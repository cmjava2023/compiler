Subject: [PATCH] Merge remote-tracking branch 'origin/LexerParser/System_Read_In_Testfiles' into LexerParser/System_Read_In_Testfiles
ANTLR adjustments, adding throws, Systemreadin for AST+Lexer, passing all tests
Fix control flow tests
ANTLR adjustments, adding throws, Systemreadin for AST+Lexer, passing all tests
ANTLR added foreach
 ANTLR including += and -=
Minor ANTLR adjustments for return and passing retur test
Minor ANTLR adjustments for Do while and passing Dowhile test
fixed Expressions in ANTLR to support nested expressions
bytecode supports primitive int & long tests (#111)
AST adapted the new grammar, passed lots of tests and made a minor change to the grammar.
Resolve merge master conflicts
Add for loop termination
Fix array test and revert some grammar changes
Add array_expression, instantiation and access_index support
---
Index: src/main/antlr/MainAntlr.g4
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/antlr/MainAntlr.g4 b/src/main/antlr/MainAntlr.g4
--- a/src/main/antlr/MainAntlr.g4	(revision 1d3632dcdb8f8812c107680fa40270175d51c602)
+++ b/src/main/antlr/MainAntlr.g4	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -16,27 +16,26 @@
 
 function_scope: ( enum_declaration | block_scope | (expressions | assignment | variable_declaration | return_statement | continue_statement | break_statement) SEMICOLON)*;
 
-block_scope: if_statement | if_else_statement | while_loop | do_while_loop | for_loop | switch_statement;
+block_scope: if_block | while_loop | do_while_loop | for_loop | switch_statement;
 
 expressions: expression (expression_operator expression)?;
 variable_declaration: (primitive_type | reference_type) IDENTIFIER;
 assignment: (variable_declaration | identifier) EQUALS expressions;
 
-expression: function_call | IDENTIFIER | STRING | CHARACTER| FLOAT | DECIMAL | INTEGER | LONG | FALSE | TRUE | identifier | casting | expression expression_concatinator expression | PAREN_OPEN expression PAREN_CLOSE | array_expression | instantiation | access_attribute | access_index | (numerical_prefix | logical_prefix) expressions | expression expression_suffix;
+expression: function_call | IDENTIFIER | STRING | CHARACTER| FLOAT | DECIMAL | INTEGER | LONG | FALSE | TRUE | identifier | casting | expression (expression_concatinator|expression_operator) expression | PAREN_OPEN expression PAREN_CLOSE | array_expression | instantiation | access_index | (numerical_prefix | logical_prefix) expressions | expression expression_suffix;
 
 expression_operator: logical_comparison_operator | numerical_comparison_operator | bit_comparison_operator;
-expression_concatinator: PLUS | DIVISION | MULTIPLICATION | MINUS | MOD | DOT;
+expression_concatinator: PLUS | DIVISION | MULTIPLICATION | MINUS | MOD | DOT| PLUS EQUALS | MINUS EQUALS;
 expression_suffix: DEC | INC;
 
 instantiation: INSTANCE_KEYWORD (type (BRACKET_OPEN INTEGER BRACKET_CLOSE)+ | type);
 
-access_index: IDENTIFIER (DOT IDENTIFIER)+;
-access_attribute: IDENTIFIER (BRACKET_OPEN INTEGER BRACKET_CLOSE)+;
+access_index: IDENTIFIER (BRACKET_OPEN INTEGER BRACKET_CLOSE)+;
 numerical_comparison_operator: DIAMOND_OPEN | DIAMOND_CLOSE | NEQ | EQ | LTE | GTE | MOD;
 numerical_prefix: PLUS | MINUS;
 logical_prefix: NOT | NOTNOT;
 logical_comparison_operator: LAND | LOR;
-bit_comparison_operator: BAND | BOR | BXOR | BIT_SHIFT_L | BIT_SHIFT_R;
+bit_comparison_operator: BAND | BOR | BXOR | LOGICAL_SHIFT_R | BIT_SHIFT_L | BIT_SHIFT_R;
 
 // Packages
 package_declaration: PACKAGE_KEYWORD identifier;
@@ -48,13 +47,14 @@
 enum_declaration: ENUM_KEYWORD IDENTIFIER CURLY_OPEN IDENTIFIER (COMMA IDENTIFIER)* CURLY_CLOSE;
 
 // Conditionals
+if_block: if_statement (ELSE_KEYWORD if_statement)* else_statement?;
 if_statement: IF_KEYWORD PAREN_OPEN expressions PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
 else_statement: ELSE_KEYWORD CURLY_OPEN function_scope CURLY_CLOSE;
-if_else_statement: if_statement else_statement;
+
 switch_statement: SWITCH_KEYWORD PAREN_OPEN expressions PAREN_CLOSE CURLY_OPEN switch_scope CURLY_CLOSE;
 switch_scope: ((CASE_KEYWORD (expressions)) COLON function_scope)* DEFAULT_KEYWORD COLON function_scope;
 
-return_statement: RETURN_KEYWORD expressions;
+return_statement: RETURN_KEYWORD (expressions)?;
 break_statement: BREAK_KEYWORD;
 continue_statement: CONTINUE_KEYWORD;
 
@@ -77,13 +77,15 @@
 wildcard: EXTENDS_KEYWORD reference_type | SUPER_KEYWORD reference_type;
 type_variable: IDENTIFIER;
 array_type: (primitive_type | class_type |type_variable) (BRACKET_OPEN BRACKET_CLOSE)+;
-array_expression: CURLY_OPEN (STRING | (expressions (COMMA expressions)*)) CURLY_CLOSE;
+array_expression: CURLY_OPEN ( (expressions (COMMA expressions)*)) CURLY_CLOSE;
 
 // Control flow
 while_loop: WHILE_KEYWORD PAREN_OPEN expressions PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
-do_while_loop: DO_KEYWORD CURLY_OPEN function_scope CURLY_CLOSE WHILE_KEYWORD PAREN_OPEN expressions PAREN_CLOSE;
-for_loop: FOR_KEYWORD PAREN_OPEN for_init SEMICOLON expressions SEMICOLON for_update PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
+do_while_loop: DO_KEYWORD CURLY_OPEN function_scope CURLY_CLOSE WHILE_KEYWORD PAREN_OPEN expressions PAREN_CLOSE (SEMICOLON)?;
+for_loop: FOR_KEYWORD PAREN_OPEN ((for_init SEMICOLON for_termination SEMICOLON for_update) | for_each) PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
+for_each: variable_declaration COLON identifier;
 for_init: assignment;
+for_termination: expressions;
 for_update: expressions;
 
 // Casting
@@ -93,7 +95,7 @@
 access_modifier: PRIVATE_KEYWORD | PUBLIC_KEYWORD | PROTECTED_KEYWORD;
 
 // Functions
-function_declaration: access_modifier INSTANCE_MODIFIER? type IDENTIFIER PAREN_OPEN function_declaration_args? PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
+function_declaration: access_modifier INSTANCE_MODIFIER? type IDENTIFIER PAREN_OPEN function_declaration_args? PAREN_CLOSE (THROWS_KEYWORD identifier)? CURLY_OPEN function_scope CURLY_CLOSE;
 function_declaration_args: function_declaration_arg (COMMA function_declaration_arg)*;
 function_declaration_arg: type IDENTIFIER;
 function_call: identifier PAREN_OPEN function_args? PAREN_CLOSE;
@@ -130,6 +132,7 @@
 PROTECTED_KEYWORD: 'protected';
 RETURN_KEYWORD: 'return';
 INSTANCE_KEYWORD: 'new';
+THROWS_KEYWORD: 'throws';
 
 IF_KEYWORD: 'if';
 ELSE_KEYWORD: 'else';
@@ -185,9 +188,10 @@
 // Bit Operators
 BAND: '&';
 BOR: '|';
-BIT_SHIFT_L: '<'+;
-BIT_SHIFT_R: '>'+;
+BIT_SHIFT_L: '<<';
+BIT_SHIFT_R: '>>';
 BXOR: '^';
+LOGICAL_SHIFT_R: '>>>';
 
 // Comments
 COMMENT : '/*' .*? '*/' -> skip;
@@ -196,7 +200,7 @@
 // Misc
 WHITESPACE  : (' ' | '\t' | '\r' | '\n') -> skip;
 STRING : '"' (~'"'|'/"')* '"'; // Danke https://stackoverflow.com/a/36615281
-CHARACTER : '\'' (~'"'|'/"')* '\''; // Danke https://stackoverflow.com/a/36615281
+CHARACTER: '\'' (~'\''|'\\\'')* '\'';
 
 FLOAT: (((INTEGER DOT INTEGER) | (DOT INTEGER)| (INTEGER DOT) | INTEGER | (INTEGER DOT )? INTEGER FLOAT_EXPONENT_SUFFIX (PLUS | MINUS)? INTEGER) FLOATING_POINT_SUFFIX);
 DECIMAL: ([1-9] DIGIT* | [0]) DOT INTEGER;
Index: src/main/java/org/cmjava2023/ast/ASTNodes.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/cmjava2023/ast/ASTNodes.java b/src/main/java/org/cmjava2023/ast/ASTNodes.java
--- a/src/main/java/org/cmjava2023/ast/ASTNodes.java	(revision 1d3632dcdb8f8812c107680fa40270175d51c602)
+++ b/src/main/java/org/cmjava2023/ast/ASTNodes.java	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,11 +1,13 @@
 package org.cmjava2023.ast;
 
 import org.cmjava2023.symboltable.*;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 
 public class ASTNodes {
 
+
     public enum AccessModifier {
         DEFAULT, //  /Blank ==> Package-Private
         PUBLIC,
@@ -24,10 +26,12 @@
         STRICTFP
     }
 
-    public interface Operator{}
+    public interface Operator {
+    }
 
     //Numerical and logical operators
-    //expression_operator->Operators
+    //expression_operator
+    // bit_comparison_operator
     public enum ComparisonOperator implements Operator {
         EQ,          //  EQ '=='
         NEQ,       //  NEQ '!='
@@ -37,7 +41,13 @@
         LAND,      //  LAND '&&'
         LOR,        //  LOR '||'
         DIAMOND_OPEN, // DIAMOND_CLOSE '<'
-        DIAMOND_CLOSE // DIAMOND_CLOSE '>'
+        DIAMOND_CLOSE, // DIAMOND_CLOSE '>'
+        BAND, // BAND: '&';
+        BOR, // BOR: '|';
+        BXOR, // BXOR: '^';
+        BIT_SHIFT_L, // BIT_SHIFT_L: '<<';
+        BIT_SHIFT_R, // BIT_SHIFT_R: '>>';
+        LOGICAL_SHIFT_R // BIT_SHIFT_R: '>>>';
     }
 
     public enum InfixOperator implements Operator {
@@ -59,16 +69,10 @@
     public interface Statement extends Node {
     }
 
-    public interface Callable extends Node {
-    }
-
     public interface Expression extends Node {
     }
 
-    public interface Condition extends Node {
-    }
-
-    public interface Identifier extends Node {
+    public interface VariableUsage extends Node {
     }
 
     public interface Type extends Node {
@@ -88,109 +92,119 @@
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
-    } //Maybe save this nested identifier into the symbol table ?
+    }
 
     // class_declaration -> ClassNode
-    // class_scope[function_declaration (->FunctionNode<statement>), variable_declaration(->VariableNode<Statement>), assignment(-> AssignmentNode<statement>) -> Statement[] body
     public record ClassNode(Clazz classSymbol,
                             ArrayList<Statement> body) implements Node, Statement {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
+
+    // enum_declaration -> EnumNode
+    public record EnumNode(Clazz enumClass,
+                           ArrayList<Variable> constants) implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
 
     // function_declaration -> FunctionNode
-    // type -> Identifier -> SymbolRef
-    // Function_declaration_args-> ParameterNode[]
-    // function_scope [expressions(-> ExpressionNode<Statement>/ComparisonNode<Statement>) , assignment (-> AssignmentNode<Statement>), variable_declaration (-> VariableNode<Statement>), return_statement (->ExpressionNode<Statement>), block_scope (->BlockScopeNode<Statement>] ->Statement[] body
     public record FunctionNode(Function functionSymbol,
                                ArrayList<ParameterNode> parameters,
-                               ArrayList<Statement> body) implements Node, Callable, Statement {
+                                @Nullable NestedIdentifierNode exception,
+                               ArrayList<Statement> body) implements Node, Statement {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    //Function_declaration_arg[type(->symbolTable), IDENTIFIER (->symbolTable)-> ParameterNode
+    //Function_declaration_arg-> ParameterNode
     public record ParameterNode(Parameter parameterSymbol) implements Node {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    // function_call -> CallNode
-    public record RawFunctionCallNode(ArrayList<String> nestedIdentifier,
-                                      ArrayList<Expression> values,
-                                      Scope scope) implements Node, Statement, Callable {
+    // function_call -> FunctionCallNode
+    public record FunctionCallNode(Function function,
+                                   ArrayList<Expression> values) implements Node, Statement, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    public record FunctionCallNode(Function function,
-                                   ArrayList<Expression> values) implements Node, Statement, Callable {
+    // continue_statement->ContinueNode
+    public record ContinueNode() implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // break_statement -> BreakNode
+    public record BreakNode() implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    public record IfBlockNode(ArrayList<IfNode> ifNodes, ElseNode elseNode) implements Node, Statement {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
     // if_statement -> IfNode
-    //else_statement [expressions (->ComparisonNode<Expression>/ExpressionNode<Expression>), function_scope (->Statement[])]->IfNode
     public record IfNode(Expression expression,
-                         ArrayList<Statement> statements) implements Node, Condition, Statement {
+                         ArrayList<Statement> statements) implements Node, Statement {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    //else_statement -> ElseNode
-    //else_statement [function_scope (->Statement[])]->ElseNode
+    // else_statement -> ElseNode
     public record ElseNode(
-            ArrayList<Statement> statements) implements Node, Condition, Statement {
-        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
-            return visitor.visit(this);
-        }
-    }
-
-    // block_scope -> BlockScopeNode
-    // block_scope [if_statement (-> IfNode<Condition>)/if_else_statement(->IfNode<Condition>, ElseNode<Condition>)]-> Condition[] conditions
-    public record BlockScopeNode(
-            ArrayList<Condition> conditions) implements Node, Statement {
+            ArrayList<Statement> statements) implements Node, Statement {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
     // variable_declaration -> VariableNode
-    // variable_declaration [primitive_type(->symbolTable), potentially_nested_identifier (->Identifier symbolRef)] -> VariableNode
-    // assignment[variable_declaration(->PotentiallyNestedIdentifierNode<Identifier>), potentially_nested_identifier (-> PotentiallyNestedIdentifierNode<Identifier>), expressions (->ComparisonNode<Expression>)] -> VariableNode
-    public record VariableNode(Variable variableSymbol,
-                               Expression value) implements Node, Callable, Statement {
+    public record VariableNode(
+            Variable variableSymbol) implements Node, Statement, VariableUsage {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    public record VariableAssigmentNode(Variable variable,
-                                        Expression value) implements Node, Callable, Statement {
+    // assignment -> (VariableAssignmentNode)
+    // Note: The field variable can be Null, if this variable is not declared.
+    public record VariableAssignmentNode(Variable variable,
+                                         Expression expression) implements Node, Statement, VariableUsage {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    public record ParameterAssigmentNode(Parameter variable,
-                                         Expression value) implements Node, Callable, Statement {
+    // assignment -> (ParameterAssignmentNode)
+    public record ParameterAssignmentNode(Parameter variable,
+                                          Expression value) implements Node, Statement {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
+    // {Any primitive type} -> ValueNode
     public record ValueNode<T>(T value) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
+    // For concatinating Expressions.
+    // expression expression_concatinator expression
     public record InfixNode(Expression leftExpression, InfixOperator operator,
                             Expression rightExpression) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
@@ -198,6 +212,8 @@
         }
     }
 
+    // To give an expression a prefix.
+    // (numerical_prefix | logical_prefix) expressions
     public record UnaryPrefixNode(PrefixOperator operator,
                                   Expression Expression) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
@@ -205,30 +221,72 @@
         }
     }
 
+    // To give an expression a suffix.
+    // It is also an expression, because it can stay alone! i++ or i--
+    // and is not an assignment. Also, there is no other case then an increment or decrement to use this.
+    // Thus, this node could potentially also be called Increment/Decrement Node
+    //expression expression_suffix
     public record UnarySuffixNode(SuffixOperator operator,
-                                  Expression Expression) implements Node, Expression {
+                                  Expression Expression) implements Node, Expression, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // PAREN_OPEN expression PAREN_CLOSE -> ParenthesesNode
+    // used to give individual expressions their scope.
+    public record ParenthesesNode(
+            Expression Expression) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    public record ParenthesesNode(Expression Expression) implements Node, Expression {
+    // casting -> CastNode
+    public record CastNode(org.cmjava2023.symboltable.Type type,
+                           Expression expression,
+                           Scope scope) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    public record CastNode(org.cmjava2023.symboltable.Type type,
-                           Expression expression) implements Node, Expression {
+    // array_expression -> ArrayInstantiationNode
+    public record ArrayInstantiationWithValuesNode(
+            ArrayList<Expression> expressions) implements Node, Expression {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // instantiation->(ArrayInstantiationNode)
+    public record ArrayInstantiationNode(org.cmjava2023.symboltable.Type type,
+                                         ArrayList<Integer> dimensionSizes) implements Node, Expression {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // both array and elementIndicesAccessed can be null if trying to access this doesnt work.
+    // access_index -> ArrayAccessNode
+    public record ArrayAccessNode(Variable array,
+                                  ArrayList<Integer> elementIndicesAccessed) implements Node, Expression {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // instantiation -> (ObjectInstantiationNode)
+    public record ObjectInstantiationNode(
+            org.cmjava2023.symboltable.Type type) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
     // potentially_nested_identifier -> PotentiallyNestedIdentifierNode
-    // potentially_nested_identifier[Identifier (->String[] nested_identifier ) -> PotentiallyNestedIdentifierNode
     public record NestedIdentifierNode(
-            ArrayList<String> nestedIdentifier) implements Node, Callable, Expression, Identifier {
+            ArrayList<String> nestedIdentifier) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
@@ -237,34 +295,97 @@
     // (expressions) -> ComparisonNode
     // expressions[expression (-> ExpressionNode), expression_operator(->Operators), expression (->Expression)-> ComparisonNode
     // NOTE: This will only be the case if the expressions is a Comparison. If it is a single expression, this is not applicable, rather use a simple ExpressionNode for this then.
-    public record ComparisonNode(Expression expression1, ComparisonOperator comparisonOperator,
-                                 Expression expression2) implements Node, Expression, Callable {
+    public record ComparisonNode(Expression leftExpression,
+                                 ComparisonOperator comparisonOperator,
+                                 Expression rightExpression) implements Node, Expression {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    public record VariableCallNode(
+            Variable symbol) implements Node, Expression {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    public record ParameterCallNode(
+            Parameter parameter) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    // expression -> ExpressionNode
-    // (expressions) -> ExpressionNode
-    // expression[function_call(->CallNode<Callable>), potentially_nested_identifier(->PotentiallyNestedIdentifierNode<Callable>), DECIMAL+INTEGER+IDENTIFIER+STRING (->VariableNode<Callable>)] -> ExpressionNode
-    // NOTE: When expressions only got one Argument, then this ExpressionNode will cover this case.
-    public record ExpressionNode(
-            Callable callable) implements Node, Expression, Statement {
+    public record VariableFieldCallNode(
+            Variable variable, Variable field) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
-    public record IdentifierNode(
-            String name) implements Node, Callable, Expression, Identifier {
+    public record VariableFunctionCallNode(
+            Variable variable, Function function) implements Node, Expression {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
     }
 
+    // ATTENTION! This can also have no Expression, thus being null
     // return_statement ->ReturnNode
-    // return_statement[ expressions(ComparisonNode<Expression>/ExpressionNode<Expression>)]->ReturnNode;
-    public record ReturnNode(Expression value) implements Node, Statement {
+    // expressions->Expression;
+    public record ReturnNode(@Nullable Expression value) implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // for_loop -> (ForLoopNode)
+    public record ForLoopNode(VariableUsage loopVariable,
+                              Expression termination,
+                              Expression increment,
+                              ArrayList<Statement> body) implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // for_loop -> (ForEachLoopNode)
+    public record ForEachLoopNode(VariableUsage variableDeclaration,
+                              NestedIdentifierNode values,
+                              ArrayList<Statement> body) implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // while_loop -> WhileLoopNode
+    public record WhileLoopNode(Expression expression,
+                                ArrayList<Statement> body) implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // do_while_loop -> DoWhileLoopNode
+    public record DoWhileLoopNode(Expression expression,
+                                  ArrayList<Statement> body) implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    // switch_statement ->SwitchNode
+    public record SwitchNode(Expression switchEx, ArrayList<CaseNode> caseNodes,
+                             ArrayList<Statement> defaultStatements) implements Node, Statement {
+        public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
+            return visitor.visit(this);
+        }
+    }
+
+    //switch_scope-> [caseNode]
+    public record CaseNode(Expression caseEx,
+                           ArrayList<Statement> body) implements Node {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
@@ -281,7 +402,8 @@
         }
     }
 
-    public record ArrayTypeNode(String type) implements Node, Type {
+    public record ArrayTypeNode(String type,
+                                int dimensions) implements Node, Type {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
         }
@@ -292,6 +414,7 @@
         }
     }
 
+    // It is just a helper class for the symbol tables. Nothing which stays in the AST.
     public record OperatorNode(Operator operator) implements Node {
         public ASTNodes.Node accept(ASTTraverser<ASTNodes.Node> visitor) {
             return visitor.visit(this);
Index: src/main/java/org/cmjava2023/ast/ParseTreeVisitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/cmjava2023/ast/ParseTreeVisitor.java b/src/main/java/org/cmjava2023/ast/ParseTreeVisitor.java
--- a/src/main/java/org/cmjava2023/ast/ParseTreeVisitor.java	(revision 1d3632dcdb8f8812c107680fa40270175d51c602)
+++ b/src/main/java/org/cmjava2023/ast/ParseTreeVisitor.java	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -8,44 +8,69 @@
 import org.cmjava2023.generated_from_antlr.MainAntlrParser;
 import org.cmjava2023.semanticanalysis.ASTVisitorFirst;
 import org.cmjava2023.symboltable.*;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 
 public class ParseTreeVisitor extends MainAntlrBaseVisitor<ASTNodes.Node> {
+
+    private enum OperatorType {
+        INFIX, PREFIX, SUFFIX, COMPARISON
+    }
+
     public final SymbolTable symbolTable = new SymbolTable();
     public ArrayList<String> errors = new ArrayList<>();
 
     // ########ANTLR########
     // start : (global_scope)+;
-    // global_scope: class_declaration | package_declaration SEMICOLON;
     public ASTNodes.Node visitStart(MainAntlrParser.StartContext ctx) {
         return new ASTNodes.StartNode(getGlobalStatements(ctx.children));
     }
 
+    // ########ANTLR########
+    // global_scope: class_declaration | package_declaration SEMICOLON;
     private ArrayList<ASTNodes.Statement> getGlobalStatements(List<ParseTree> children) {
         ArrayList<ASTNodes.Statement> statementList = new ArrayList<>();
 
         for (ParseTree child : children) {
-            statementList.add((ASTNodes.Statement) visit(child.getChild(0)));
+            statementList.add((ASTNodes.Statement) visit(child.getChild(0)));// Excluding the Semicolon, always position 0
         }
 
         return statementList;
     }
 
+    // ########ANTLR########
+    // class_scope: (enum_declaration | class_declaration | function_declaration | ((variable_declaration | assignment ) SEMICOLON))*;
+    // function_scope: ( enum_declaration | block_scope | (expressions | assignment | variable_declaration | return_statement | continue_statement | break_statement) SEMICOLON)*;
     private ArrayList<ASTNodes.Statement> getStatements(List<ParseTree> children) {
         ArrayList<ASTNodes.Statement> statementList = new ArrayList<>();
-
-        for (ParseTree child : children) {
-            if (!child.getText().equals(";")) {
-                statementList.add((ASTNodes.Statement) visit(child));
+        if (children != null) {
+            for (ParseTree child : children) {
+                if (!child.getText().equals(";")) {
+                    statementList.add((ASTNodes.Statement) visit(child));
+                }
             }
         }
 
         return statementList;
     }
 
+    // ########ANTLR########
+    // continue_statement: CONTINUE_KEYWORD;
+    public ASTNodes.Node visitContinue_statement(MainAntlrParser.Continue_statementContext ctx) {
+        return new ASTNodes.ContinueNode();
+    }
+
+    // ########ANTLR########
+    // break_statement: BREAK_KEYWORD;
+    public ASTNodes.Node visitBreak_statement(MainAntlrParser.Break_statementContext ctx) {
+        return new ASTNodes.BreakNode();
+    }
+
+    // ########ANTLR########
+    // function_declaration_args: function_declaration_arg (COMMA function_declaration_arg)*;
     private ArrayList<ASTNodes.ParameterNode> getParameters(List<ParseTree> children) {
         ArrayList<ASTNodes.ParameterNode> parameterList = new ArrayList<>();
 
@@ -58,11 +83,13 @@
         return parameterList;
     }
 
+    //  (expressions (COMMA expressions)*);
+    // function_arg (COMMA function_arg)*;
     private ArrayList<ASTNodes.Expression> getExpressions(List<ParseTree> children) {
         ArrayList<ASTNodes.Expression> expressionList = new ArrayList<>();
 
         for (ParseTree child : children) {
-            if (!child.getText().equals(",")) {
+            if (!child.getText().equals(",") && !child.getText().equals("{") && !child.getText().equals("}")) {
                 expressionList.add((ASTNodes.Expression) visit(child));
             }
         }
@@ -70,6 +97,16 @@
         return expressionList;
     }
 
+    private ArrayList<ASTNodes.IfNode> getIfNodes(List<MainAntlrParser.If_statementContext> children) {
+        ArrayList<ASTNodes.IfNode> ifNodes = new ArrayList<>();
+
+        for (MainAntlrParser.If_statementContext child : children) {
+            ifNodes.add((ASTNodes.IfNode) visit(child));
+        }
+
+        return ifNodes;
+    }
+
     // ########ANTLR########
     // package_declaration: PACKAGE_KEYWORD nested_identifier;
     public ASTNodes.Node visitPackage_declaration(MainAntlrParser.Package_declarationContext ctx) {
@@ -78,7 +115,7 @@
     }
 
     // ########ANTLR########
-    // nested_identifier: IDENTIFIER (DOT IDENTIFIER)*;
+    // identifier: IDENTIFIER (DOT IDENTIFIER)*;
     public ASTNodes.Node visitIdentifier(MainAntlrParser.IdentifierContext ctx) {
         int size = ctx.IDENTIFIER().size();
         ArrayList<String> identifiers = new ArrayList<>();
@@ -92,7 +129,7 @@
 
     // ########ANTLR########
     // class_declaration: access_modifier CLASS_KEYWORD IDENTIFIER CURLY_OPEN class_scope CURLY_CLOSE;
-    // class_scope: (function_declaration | ((variable_declaration | assignment ) SEMICOLON))*;
+    // class_scope: (enum_declaration | class_declaration | function_declaration | ((variable_declaration | assignment ) SEMICOLON))*;
     public ASTNodes.Node visitClass_declaration(MainAntlrParser.Class_declarationContext ctx) {
         ASTNodes.AccessModifier accessModifier = ASTNodes.AccessModifier.valueOf(ctx.access_modifier().getText().toUpperCase());
         Clazz classSymbol = setClassScope(ctx, null, accessModifier, null);
@@ -103,6 +140,21 @@
         return new ASTNodes.ClassNode(classSymbol, statements);
     }
 
+    // ########ANTLR########
+    // enum_declaration: ENUM_KEYWORD IDENTIFIER CURLY_OPEN IDENTIFIER (COMMA IDENTIFIER)* CURLY_CLOSE;
+    public ASTNodes.Node visitEnum_declaration(MainAntlrParser.Enum_declarationContext ctx) {
+        Clazz enumClass = setEnumScope(ctx);
+        List<TerminalNode> constantsNodes = ctx.IDENTIFIER();
+        constantsNodes.remove(constantsNodes.get(0));
+        ArrayList<Variable> constants = new ArrayList<>();
+        for (TerminalNode constant : constantsNodes) {
+            Variable constantVariable = new Variable(constant.getText(), (Type) symbolTable.getCurrentScope().resolve("int"), symbolTable.getCurrentScope());
+            constants.add(constantVariable);
+        }
+
+        return new ASTNodes.EnumNode(enumClass, constants);
+    }
+
     private Clazz setClassScope(MainAntlrParser.Class_declarationContext ctx, Clazz parentClazz, ASTNodes.AccessModifier accessModifier, ASTNodes.Modifier instanceModifier) {
         String className = ctx.IDENTIFIER().getText();
         Scope currentScope = symbolTable.getCurrentScope();
@@ -115,25 +167,35 @@
         return classSymbol;
     }
 
+    private Clazz setEnumScope(MainAntlrParser.Enum_declarationContext ctx) {
+        String enumName = ctx.IDENTIFIER().get(0).getText();
+        Scope currentScope = symbolTable.getCurrentScope();
+        checkAlreadyDeclared("Class", enumName, currentScope);
+        Clazz classSymbol = new Clazz(currentScope, new HashMap<>(), enumName, null, null, null, null);
+        classSymbol.setType(classSymbol);
+        symbolTable.addSymbol(classSymbol);
+        symbolTable.setScope(classSymbol);
+
+        return classSymbol;
+    }
+
     // ########ANTLR########
-    // function_declaration: access_modifier INSTANCE_MODIFIER? type IDENTIFIER PAREN_OPEN function_declaration_args PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
-    // function_scope: ((expressions | assignment | variable_declaration | return_statement) SEMICOLON | block_scope)*;
-    // function_declaration_args: function_declaration_arg (COMMA function_declaration_arg)*;
+    //function_declaration: access_modifier INSTANCE_MODIFIER? type IDENTIFIER PAREN_OPEN function_declaration_args? PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
     public ASTNodes.Node visitFunction_declaration(MainAntlrParser.Function_declarationContext ctx) {
         ASTNodes.Modifier instanceModifier = ctx.INSTANCE_MODIFIER() == null ? null : ASTNodes.Modifier.valueOf(ctx.INSTANCE_MODIFIER().getText().toUpperCase());
         ASTNodes.AccessModifier accessModifier = ASTNodes.AccessModifier.valueOf(ctx.access_modifier().getText().toUpperCase());
         Function functionSymbol = setFunctionScope(ctx, accessModifier, instanceModifier);
 
-        ArrayList<ASTNodes.ParameterNode> parameters = ctx.function_declaration_args() == null ? null : getParameters(ctx.function_declaration_args().children);
+        ArrayList<ASTNodes.ParameterNode> parameters = ctx.function_declaration_args() == null ? new ArrayList<>() : getParameters(ctx.function_declaration_args().children);
 
-        setLocalScope();
-
-        ArrayList<ASTNodes.Statement> statements = getStatements(ctx.function_scope().children);
+        ASTNodes.NestedIdentifierNode exception=null;
+        if(ctx.THROWS_KEYWORD()!=null){
+            exception= (ASTNodes.NestedIdentifierNode) visit(ctx.identifier());
+        }
+        ArrayList<ASTNodes.Statement> statements = getLocalScopeStatements(ctx.function_scope().children);
 
         symbolTable.popScope();
-
-        symbolTable.popScope();
-        return new ASTNodes.FunctionNode(functionSymbol, parameters, statements);
+        return new ASTNodes.FunctionNode(functionSymbol, parameters, exception, statements);
     }
 
     private Function setFunctionScope(MainAntlrParser.Function_declarationContext ctx, ASTNodes.AccessModifier accessModifier, ASTNodes.Modifier modifier) {
@@ -141,7 +203,8 @@
         Scope currentScope = symbolTable.getCurrentScope();
         checkAlreadyDeclared("Function", functionName, currentScope);
         Function functionSymbol = new Function(currentScope, new HashMap<>(), functionName, null, accessModifier, modifier);
-        setInvalidType(ctx.type(), functionSymbol);
+        Type returnType = getInvalidType(ctx.type());
+        functionSymbol.setType(returnType);
         symbolTable.addSymbol(functionSymbol);
         symbolTable.setScope(functionSymbol);
 
@@ -161,18 +224,18 @@
         Scope currentScope = symbolTable.getCurrentScope();
         checkAlreadyDeclared("Parameter", parameterName, currentScope);
         Parameter parameterSymbol = new Parameter(parameterName, null, currentScope);
-        setInvalidType(ctx.type(), parameterSymbol);
+        Type parameterType = getInvalidType(ctx.type());
+        parameterSymbol.setType(parameterType);
         symbolTable.addSymbol(parameterSymbol);
         return new ASTNodes.ParameterNode(parameterSymbol);
     }
 
     // ########ANTLR########
-    // function_call: nested_identifier PAREN_OPEN function_args? PAREN_CLOSE;
-    // function_args: function_arg (COMMA function_arg)*;
+    // function_call: identifier PAREN_OPEN function_args? PAREN_CLOSE;
     public ASTNodes.Node visitFunction_call(MainAntlrParser.Function_callContext ctx) {
         ASTNodes.NestedIdentifierNode nestedIdentifier = (ASTNodes.NestedIdentifierNode) visit(ctx.identifier());
-        ArrayList<ASTNodes.Expression> argumentExpressions = ctx.function_args() == null ? null : getExpressions(ctx.function_args().children);
-        return new ASTNodes.RawFunctionCallNode(nestedIdentifier.nestedIdentifier(), argumentExpressions, symbolTable.getCurrentScope());
+        ArrayList<ASTNodes.Expression> argumentExpressions = ctx.function_args() == null ? new ArrayList<>() : getExpressions(ctx.function_args().children);
+        return new ASTNodes.FunctionCallNode(new Function(symbolTable.getCurrentScope(), null, String.join(".", nestedIdentifier.nestedIdentifier()), null, null, null), argumentExpressions);
     }
 
     // ########ANTLR########
@@ -182,7 +245,7 @@
     }
 
     // ########ANTLR########
-    // variable_declaration: primitive_type nested_identifier;
+    // variable_declaration: (primitive_type | reference_type) IDENTIFIER;
     public ASTNodes.Node visitVariable_declaration(MainAntlrParser.Variable_declarationContext ctx) {
         String variableName = ctx.IDENTIFIER().getText();
         Scope currentScope = symbolTable.getCurrentScope();
@@ -191,10 +254,17 @@
         if (enclosingFunction != null) {
             checkAlreadyDeclared("Variable", variableName, enclosingFunction);
         }
-        Variable variableSymbol = new Variable(variableName, null, currentScope, null);
-        setInvalidType(ctx.primitive_type(), variableSymbol);
+        Variable variableSymbol = new Variable(variableName, null, currentScope);
+        Type variableType = null;
+
+        if (ctx.primitive_type() != null) {
+            variableType = getInvalidType(ctx.primitive_type());
+        } else {
+            variableType = getInvalidType(ctx.reference_type());
+        }
+        variableSymbol.setType(variableType);
         symbolTable.addSymbol(variableSymbol);
-        return new ASTNodes.VariableNode(variableSymbol, null);
+        return new ASTNodes.VariableNode(variableSymbol);
     }
 
     private Function getEnclosingFunction(Scope scope) {
@@ -209,38 +279,18 @@
         return null;
     }
 
-    private void setInvalidType(ParserRuleContext ctx, Symbol symbol) {
-        ASTNodes.Type type = (ASTNodes.Type) visit(ctx);
-
-        if (type instanceof ASTNodes.ArrayTypeNode arrayType) {
-            symbol.setType(new InvalidType(arrayType.type() + "[]"));
-        } else if (type instanceof ASTNodes.TypeNode baseType) {
-            symbol.setType(new InvalidType(baseType.type()));
-        }
-    }
-
     // ########ANTLR########
-    // assignment: (variable_declaration | nested_identifier) EQUALS expressions;
+    // assignment: (variable_declaration | identifier) EQUALS expressions;
     public ASTNodes.Node visitAssignment(MainAntlrParser.AssignmentContext ctx) {
         ASTNodes.Expression expression = (ASTNodes.Expression) visit(ctx.expressions());
         if (ctx.variable_declaration() != null) {
             ASTNodes.VariableNode variable = (ASTNodes.VariableNode) visit(ctx.variable_declaration());
-            return new ASTNodes.VariableNode(variable.variableSymbol(), expression);
+            variable.variableSymbol().setInitialExpression(expression);
+            return new ASTNodes.VariableNode(variable.variableSymbol());
         } else {
             ASTNodes.NestedIdentifierNode variableName = (ASTNodes.NestedIdentifierNode) visit(ctx.identifier());
-
-            Symbol variableSymbol = ASTVisitorFirst.resolveNestedIdentifier(null, variableName.nestedIdentifier(), symbolTable.getCurrentScope());
-
-            if (variableSymbol instanceof Variable variable) {
-                return new ASTNodes.VariableAssigmentNode(variable, expression);
-            }
-
-            if (variableSymbol instanceof Parameter parameter) {
-                return new ASTNodes.ParameterAssigmentNode(parameter, expression);
-            }
-
-            errors.add(String.format("Variable %s is not declared", String.join(".", variableName.nestedIdentifier())));
-            return new ASTNodes.VariableAssigmentNode(null, expression);
+            
+            return new ASTNodes.VariableAssignmentNode(new InvalidVariable(String.join(".", variableName.nestedIdentifier()), new InvalidType(""), symbolTable.getCurrentScope()), expression);
         }
     }
 
@@ -248,15 +298,22 @@
     // expressions: expression (expression_operator expression)?;
     public ASTNodes.Node visitExpressions(MainAntlrParser.ExpressionsContext ctx) {
         if (ctx.expression().size() > 1) {
-            ASTNodes.Operator operator = getOperator(ctx.expression_operator());
-            return new ASTNodes.ComparisonNode((ASTNodes.Expression) visit(ctx.expression().get(0)), (ASTNodes.ComparisonOperator) operator, (ASTNodes.Expression) visit(ctx.expression().get(1)));
+            ASTNodes.ComparisonOperator operator = (ASTNodes.ComparisonOperator) getOperator(ctx.expression_operator(), OperatorType.COMPARISON);
+            return new ASTNodes.ComparisonNode((ASTNodes.Expression) visit(ctx.expression().get(0)), operator, (ASTNodes.Expression) visit(ctx.expression().get(1)));
         } else {
             return visit(ctx.expression().get(0));
         }
     }
 
-    private ASTNodes.Operator getOperator(ParserRuleContext ctx) {
-        ASTNodes.OperatorNode operatorNode = getOperatorNode(ctx);
+
+    // ########ANTLR########
+    // numerical_prefix: PLUS | MINUS;
+    // logical_prefix: NOT | NOTNOT;
+    // expression_suffix: DEC | INC;
+    // expression_concatinator: PLUS | DIVISION | MULTIPLICATION | MINUS | MOD | DOT;
+    // expression_operator: logical_comparison_operator | numerical_comparison_operator | bit_comparison_operator;
+    private ASTNodes.Operator getOperator(ParserRuleContext ctx, OperatorType type) {
+        ASTNodes.OperatorNode operatorNode = getOperatorNode(ctx, type);
         return operatorNode.operator();
     }
 
@@ -268,7 +325,7 @@
         if (ctx.function_call() != null) {
             return visit(ctx.function_call());
         } else if (ctx.IDENTIFIER() != null) {
-            return new ASTNodes.IdentifierNode(ctx.IDENTIFIER().getText());
+            return new ASTNodes.VariableCallNode(new InvalidVariable(ctx.IDENTIFIER().getText(), new InvalidType(""), symbolTable.getCurrentScope()));
         } else if (ctx.STRING() != null) {
             String string = ctx.STRING().getText();
             if (string.startsWith("\"") && string.endsWith("\"")) {
@@ -277,19 +334,23 @@
                 return new ASTNodes.ValueNode<>(string);
             }
         } else if (ctx.CHARACTER() != null) {
-            return new ASTNodes.ValueNode<>(ctx.INTEGER().getText().charAt(0));
+            return new ASTNodes.ValueNode<>(ctx.CHARACTER().getText().charAt(1));
         } else if (ctx.FLOAT() != null) {
-            return new ASTNodes.ValueNode<>(Float.parseFloat(ctx.INTEGER().getText()));
+            return new ASTNodes.ValueNode<>(Float.parseFloat(ctx.FLOAT().getText()));
         } else if (ctx.DECIMAL() != null) {
             return new ASTNodes.ValueNode<>(Double.parseDouble(ctx.DECIMAL().getText()));
         } else if (ctx.INTEGER() != null) {
             return new ASTNodes.ValueNode<>(Integer.parseInt(ctx.INTEGER().getText()));
         } else if (ctx.LONG() != null) {
-            return new ASTNodes.ValueNode<>(Long.parseLong(ctx.INTEGER().getText()));
+            String longToParse = ctx.LONG().getText();
+            if (longToParse.endsWith("L") || longToParse.endsWith("l")) {
+                longToParse = longToParse.substring(0, longToParse.length() - 1);
+            }
+            return new ASTNodes.ValueNode<>(Long.parseLong(longToParse));
         } else if (ctx.FALSE() != null) {
-            return new ASTNodes.ValueNode<>(Boolean.parseBoolean(ctx.INTEGER().getText()));
+            return new ASTNodes.ValueNode<>(false);
         } else if (ctx.TRUE() != null) {
-            return new ASTNodes.ValueNode<>(Boolean.parseBoolean(ctx.INTEGER().getText()));
+            return new ASTNodes.ValueNode<>(true);
         } else if (ctx.identifier() != null) {
             return visit(ctx.identifier());
         } else if (ctx.casting() != null) {
@@ -297,72 +358,141 @@
         } else if (ctx.expression_concatinator() != null) {
             ASTNodes.Expression leftExpression = (ASTNodes.Expression) visit(ctx.expression().get(0));
             ASTNodes.Expression rightExpression = (ASTNodes.Expression) visit(ctx.expression().get(1));
-            ASTNodes.Operator operator = getOperator(ctx.expression_concatinator());
+            ASTNodes.Operator operator = getOperator(ctx.expression_concatinator(), OperatorType.INFIX);
             return new ASTNodes.InfixNode(leftExpression, (ASTNodes.InfixOperator) operator, rightExpression);
-        } else if (ctx.PAREN_OPEN() != null && ctx.PAREN_CLOSE() != null) {
+        } else if (ctx.PAREN_OPEN() != null && ctx.PAREN_CLOSE() != null && !ctx.expression().isEmpty()) {
             return new ASTNodes.ParenthesesNode((ASTNodes.Expression) visit(ctx.expression().get(0)));
+        } else if (ctx.array_expression() != null) {
+            return visit(ctx.array_expression());
+        } else if (ctx.instantiation() != null) {
+            return visit(ctx.instantiation());
+        } else if (ctx.access_index() != null) {
+            return visit(ctx.access_index());
         } else if (ctx.numerical_prefix() != null) {
-            ASTNodes.Operator operator = getOperator(ctx.numerical_prefix());
-            return new ASTNodes.UnaryPrefixNode((ASTNodes.PrefixOperator) operator, (ASTNodes.Expression) visit(ctx.expression().get(0)));
+            ASTNodes.Operator operator = getOperator(ctx.numerical_prefix(), OperatorType.PREFIX);
+            return new ASTNodes.UnaryPrefixNode((ASTNodes.PrefixOperator) operator, (ASTNodes.Expression) visit(ctx.expressions()));
         } else if (ctx.logical_prefix() != null) {
-            ASTNodes.Operator operator = getOperator(ctx.logical_prefix());
-            return new ASTNodes.UnaryPrefixNode((ASTNodes.PrefixOperator) operator, (ASTNodes.Expression) visit(ctx.expression().get(0)));
+            ASTNodes.Operator operator = getOperator(ctx.logical_prefix(), OperatorType.PREFIX);
+            return new ASTNodes.UnaryPrefixNode((ASTNodes.PrefixOperator) operator, (ASTNodes.Expression) visit(ctx.expressions()));
         } else if (ctx.expression_suffix() != null) {
-            ASTNodes.Operator operator = getOperator(ctx.expression_suffix());
+            ASTNodes.Operator operator = getOperator(ctx.expression_suffix(), OperatorType.SUFFIX);
+            ASTNodes.Expression exp = (ASTNodes.Expression) visit(ctx.expression().get(0));
             return new ASTNodes.UnarySuffixNode((ASTNodes.SuffixOperator) operator, (ASTNodes.Expression) visit(ctx.expression().get(0)));
+        } else if (ctx.expression() != null && ctx.expression().size() > 1) {
+            ASTNodes.ComparisonOperator operator = (ASTNodes.ComparisonOperator) getOperator(ctx.expression_operator(), OperatorType.COMPARISON);
+            return new ASTNodes.ComparisonNode((ASTNodes.Expression) visit(ctx.expression().get(0)), operator, (ASTNodes.Expression) visit(ctx.expression().get(1)));
         } else {
-            return null;
+            return visit(ctx.expression().get(0));
         }
     }
 
-    private static ASTNodes.OperatorNode getOperatorNode(ParserRuleContext ctx) {
-        if (ctx.children.get(0).getChild(0) instanceof TerminalNode terminalNode) {
-            int tokenType = terminalNode.getSymbol().getType();
-            String tokenName = MainAntlrLexer.VOCABULARY.getSymbolicName(tokenType);
-            ASTNodes.InfixOperator infixOperator = ASTNodes.InfixOperator.valueOf(tokenName);
-            return new ASTNodes.OperatorNode(infixOperator);
-        } else {
-            throw new IllegalArgumentException("Expected a TerminalNode");
-        }
+
+    private static ASTNodes.OperatorNode getOperatorNode(ParserRuleContext ctx, OperatorType type) {
+        int tokenType = ctx.getStart().getType();
+        String tokenName = MainAntlrLexer.VOCABULARY.getSymbolicName(tokenType);
+
+        ASTNodes.Operator operator = switch (type) {
+            case INFIX -> ASTNodes.InfixOperator.valueOf(tokenName);
+            case PREFIX -> ASTNodes.PrefixOperator.valueOf(tokenName);
+            case SUFFIX -> ASTNodes.SuffixOperator.valueOf(tokenName);
+            case COMPARISON -> ASTNodes.ComparisonOperator.valueOf(tokenName);
+            default ->
+                    throw new IllegalArgumentException("Unknown operator type");
+        };
+        return new ASTNodes.OperatorNode(operator);
     }
 
+    // ########ANTLR########
+    // casting: PAREN_OPEN type PAREN_CLOSE expressions;
     public ASTNodes.Node visitCasting(MainAntlrParser.CastingContext ctx) {
-        ASTNodes.Type type = (ASTNodes.Type) visit(ctx.type());
+        Type castType = getInvalidType(ctx.type());
+
+        return new ASTNodes.CastNode(castType, (ASTNodes.Expression) visit(ctx.expressions()), symbolTable.getCurrentScope());
+    }
+
+    // ########ANTLR########
+    //access_index: IDENTIFIER (BRACKET_OPEN INTEGER BRACKET_CLOSE)+;
+    public ASTNodes.Node visitAccess_index(MainAntlrParser.Access_indexContext ctx) {
+        String variableName = ctx.IDENTIFIER().getText();
+
+        Symbol variableSymbol = symbolTable.getCurrentScope().resolve(variableName);
+
+        if (variableSymbol instanceof Variable variable) {
+            return new ASTNodes.ArrayAccessNode(variable, getArrayIntegers(ctx.INTEGER()));
+        }
+
+        errors.add(String.format("Variable %s is not declared or not an Array", variableSymbol));
+
+        return new ASTNodes.ArrayAccessNode(null, null);
+    }
+
+
+    // ########ANTLR########
+    // array_expression: CURLY_OPEN (STRING | (expressions (COMMA expressions)*)) CURLY_CLOSE;
+    public ASTNodes.Node visitArray_expression(MainAntlrParser.Array_expressionContext ctx) {
+        ArrayList<ASTNodes.Expression> expressions = getExpressions(ctx.children);
+        return new ASTNodes.ArrayInstantiationWithValuesNode(expressions);
+    }
+
+    // ########ANTLR########
+    // instantiation: INSTANCE_KEYWORD (type (BRACKET_OPEN INTEGER BRACKET_CLOSE)+ | type);
+    public ASTNodes.Node visitInstantiation(MainAntlrParser.InstantiationContext ctx) {
+        Type objectType = getInvalidType(ctx.type());
+
+        if (ctx.INTEGER().isEmpty()) {
+            return new ASTNodes.ObjectInstantiationNode(objectType);
+        } else {
+            return new ASTNodes.ArrayInstantiationNode(objectType, getArrayIntegers(ctx.INTEGER()));
+        }
+    }
+
+    // ########ANTLR########
+    // (BRACKET_OPEN INTEGER BRACKET_CLOSE)+
+    private static ArrayList<Integer> getArrayIntegers(List<TerminalNode> integerTerminalNodes) {
+        ArrayList<Integer> dimensionSizes = new ArrayList<>();
+
+        for (TerminalNode integerTerminalNode : integerTerminalNodes) {
+            dimensionSizes.add(Integer.parseInt(integerTerminalNode.getText()));
+        }
+        return dimensionSizes;
+    }
+
+    @Nullable
+    private Type getInvalidType(ParserRuleContext ctx) {
+        ASTNodes.Type type = (ASTNodes.Type) visit(ctx);
 
         Type castType = null;
 
         if (type instanceof ASTNodes.ArrayTypeNode arrayType) {
-            castType = new InvalidType(arrayType.type() + "[]");
+            castType = new InvalidType(arrayType.type() + "[]".repeat(arrayType.dimensions()));
         } else if (type instanceof ASTNodes.TypeNode baseType) {
             castType = new InvalidType(baseType.type());
         }
-
-        return new ASTNodes.CastNode(castType, (ASTNodes.Expression) visit(ctx.expressions()));
+        return castType;
     }
 
     // ########ANTLR########
-    // block_scope: if_statement | if_else_statement;
-    // if_statement: IF_KEYWORD PAREN_OPEN expressions PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
-    // if_else_statement: if_statement else_statement;
+    // block_scope: if_statement | if_else_statement | while_loop | do_while_loop | for_loop | switch_statement;
     public ASTNodes.Node visitBlock_scope(MainAntlrParser.Block_scopeContext ctx) {
-        ArrayList<ASTNodes.Condition> conditions = new ArrayList<>();
-        if (ctx.if_statement() != null) {
-            conditions.add((ASTNodes.Condition) visit(ctx.if_statement()));
+        if (ctx.if_block() != null) {
+            return new ASTNodes.IfBlockNode(getIfNodes(ctx.if_block().if_statement()), ctx.if_block().else_statement() != null ? (ASTNodes.ElseNode) visit(ctx.if_block().else_statement()) : null);
+        } else if (ctx.while_loop() != null) {
+            return visit(ctx.while_loop());
+        } else if (ctx.do_while_loop() != null) {
+            return visit(ctx.do_while_loop());
+        } else if (ctx.for_loop() != null) {
+            return visit(ctx.for_loop());
         } else {
-            conditions.add((ASTNodes.Condition) visit(ctx.if_else_statement().if_statement()));
-            conditions.add((ASTNodes.Condition) visit(ctx.if_else_statement().else_statement()));
+            return visit(ctx.switch_statement());
         }
-        return new ASTNodes.BlockScopeNode(conditions);
     }
 
     // ########ANTLR########
     // if_statement: IF_KEYWORD PAREN_OPEN expressions PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
     // function_scope: ((expressions | assignment | variable_declaration | return_statement) SEMICOLON | block_scope)*;
     public ASTNodes.Node visitIf_statement(MainAntlrParser.If_statementContext ctx) {
-        setLocalScope();
-        ArrayList<ASTNodes.Statement> statements = getStatements(ctx.function_scope().children);
+        ArrayList<ASTNodes.Statement> statements = getLocalScopeStatements(ctx.function_scope().children);
         ASTNodes.Expression expression = (ASTNodes.Expression) visit(ctx.expressions());
-        symbolTable.popScope();
         return new ASTNodes.IfNode(expression, statements);
     }
 
@@ -370,10 +500,7 @@
     // else_statement: ELSE_KEYWORD CURLY_OPEN function_scope CURLY_CLOSE;
     // function_scope: ((expressions | assignment | variable_declaration | return_statement) SEMICOLON | block_scope)*;
     public ASTNodes.Node visitElse_statement(MainAntlrParser.Else_statementContext ctx) {
-        setLocalScope();
-        ArrayList<ASTNodes.Statement> statements = getStatements(ctx.function_scope().children);
-        symbolTable.popScope();
-        return new ASTNodes.ElseNode(statements);
+        return new ASTNodes.ElseNode(getLocalScopeStatements(ctx.function_scope().children));
     }
 
     private void setLocalScope() {
@@ -385,15 +512,18 @@
     // ########ANTLR########
     // return_statement: RETURN_KEYWORD expressions;
     public ASTNodes.Node visitReturn_statement(MainAntlrParser.Return_statementContext ctx) {
-        return new ASTNodes.ReturnNode((ASTNodes.Expression) visit(ctx.expressions()));
+        if (ctx.expressions() == null) {
+            return new ASTNodes.ReturnNode(null);
+        } else {
+            return new ASTNodes.ReturnNode((ASTNodes.Expression) visit(ctx.expressions()));
+        }
     }
 
     public ASTNodes.Node visitType(MainAntlrParser.TypeContext ctx) {
         if (ctx.primitive_type() != null) {
             return visit(ctx.primitive_type());
         } else if (ctx.array_type() != null) {
-            ASTNodes.TypeNode arrayType = (ASTNodes.TypeNode) visit(ctx.array_type());
-            return new ASTNodes.ArrayTypeNode(arrayType.type());
+            return visit(ctx.array_type());
         } else if (ctx.reference_type() != null) {
             return visit(ctx.reference_type());
         } else {
@@ -426,13 +556,18 @@
     }
 
     public ASTNodes.Node visitArray_type(MainAntlrParser.Array_typeContext ctx) {
+        ASTNodes.TypeNode type = null;
+
         if (ctx.primitive_type() != null) {
-            return visit(ctx.primitive_type());
+            type = (ASTNodes.TypeNode) visit(ctx.primitive_type());
         } else if (ctx.class_type() != null) {
-            return visit(ctx.class_type());
+            type = (ASTNodes.TypeNode) visit(ctx.class_type());
         } else {
-            return visit(ctx.type_variable());
+            type = (ASTNodes.TypeNode) visit(ctx.type_variable());
         }
+
+        return new ASTNodes.ArrayTypeNode(type.type(), ctx.BRACKET_OPEN().size());
+
     }
 
     public ASTNodes.Node visitClass_type(MainAntlrParser.Class_typeContext ctx) {
@@ -452,4 +587,68 @@
     public ASTNodes.Node visitType_variable(MainAntlrParser.Type_variableContext ctx) {
         return new ASTNodes.TypeNode(ctx.IDENTIFIER().getText());
     }
+
+    // ########ANTLR########
+    // for_loop: FOR_KEYWORD PAREN_OPEN ((for_init SEMICOLON for_termination SEMICOLON for_update) | for_each) PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
+    // for_each: variable_declaration COLON identifier;
+    // for_init: assignment;
+    // for_termination: expressions;
+    // for_update: expressions;
+
+    public ASTNodes.Node visitFor_loop(MainAntlrParser.For_loopContext ctx) {
+        List<ParseTree> forLoopParseTreeStatements = ctx.function_scope().children;
+        setLocalScope();
+        ArrayList<ASTNodes.Statement> statements = getStatements(forLoopParseTreeStatements);
+
+        if (ctx.for_each() != null) {
+            ASTNodes.VariableUsage loopVariable = (ASTNodes.VariableUsage) visit(ctx.for_each().variable_declaration());
+            symbolTable.popScope();
+            return new ASTNodes.ForEachLoopNode(loopVariable, (ASTNodes.NestedIdentifierNode) visit(ctx.for_each().identifier()), statements);
+        } else {
+            ASTNodes.VariableUsage loopVariable = (ASTNodes.VariableUsage) visit(ctx.for_init().assignment());
+            ASTNodes.Expression termination = (ASTNodes.Expression) visit(ctx.for_termination().expressions());
+            ASTNodes.Expression update = (ASTNodes.Expression) visit(ctx.for_update().expressions());
+            symbolTable.popScope();
+            return new ASTNodes.ForLoopNode(loopVariable, termination, update, statements);
+        }
+    }
+
+
+    // ########ANTLR########
+    // do_while_loop: DO_KEYWORD CURLY_OPEN function_scope CURLY_CLOSE WHILE_KEYWORD PAREN_OPEN expressions PAREN_CLOSE;
+    public ASTNodes.Node visitDo_while_loop(MainAntlrParser.Do_while_loopContext ctx) {
+        ArrayList<ASTNodes.Statement> statements = getLocalScopeStatements(ctx.function_scope().children);
+
+        return new ASTNodes.DoWhileLoopNode((ASTNodes.Expression) visit(ctx.expressions()), statements);
+    }
+
+    // ########ANTLR########
+    //while_loop: WHILE_KEYWORD PAREN_OPEN expressions PAREN_CLOSE CURLY_OPEN function_scope CURLY_CLOSE;
+    public ASTNodes.Node visitWhile_loop(MainAntlrParser.While_loopContext ctx) {
+        ArrayList<ASTNodes.Statement> statements = getLocalScopeStatements(ctx.function_scope().children);
+        return new ASTNodes.WhileLoopNode((ASTNodes.Expression) visit(ctx.expressions()), statements);
+    }
+
+    // ########ANTLR########
+    // switch_statement: SWITCH_KEYWORD PAREN_OPEN expressions PAREN_CLOSE CURLY_OPEN switch_scope CURLY_CLOSE;
+    // switch_scope: ((CASE_KEYWORD (expressions)) COLON function_scope)* DEFAULT_KEYWORD COLON function_scope;
+    public ASTNodes.Node visitSwitch_statement(MainAntlrParser.Switch_statementContext ctx) {
+        ASTNodes.Expression switchEx = (ASTNodes.Expression) visit(ctx.expressions());
+        List<MainAntlrParser.ExpressionsContext> expressions = ctx.switch_scope().expressions();
+        List<MainAntlrParser.Function_scopeContext> functionScopes = ctx.switch_scope().function_scope();
+        ArrayList<ASTNodes.CaseNode> caseNodes = new ArrayList<>();
+        for (int i = 0; i <= expressions.size() - 1; i++) {
+            caseNodes.add(new ASTNodes.CaseNode((ASTNodes.Expression) visit(expressions.get(i)), this.getLocalScopeStatements(functionScopes.get(i).children)));
+        }
+        ArrayList<ASTNodes.Statement> defaultStatements = this.getLocalScopeStatements(functionScopes.get(functionScopes.size() - 1).children);
+        return new ASTNodes.SwitchNode(switchEx, caseNodes, defaultStatements);
+    }
+
+    private ArrayList<ASTNodes.Statement> getLocalScopeStatements(List<ParseTree> children) {
+        setLocalScope();
+        ArrayList<ASTNodes.Statement> statements = getStatements(children);
+
+        symbolTable.popScope();
+        return statements;
+    }
 }
Index: src/test/resources/java-test-files/cmjava2023/array/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/array/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/array/ParseTree.txt
--- a/src/test/resources/java-test-files/cmjava2023/array/ParseTree.txt	(revision d848a06c365f386455eccdace839cd4bb79417b5)
+++ b/src/test/resources/java-test-files/cmjava2023/array/ParseTree.txt	(revision dd1c768821ce148592f5bd8935e5807421935d18)
@@ -311,7 +311,7 @@
       |     |  |        |  L  Function_arg: o[0]
       |     |  |        |     L  Expressions: o[0]
       |     |  |        |        L  Expression: o[0]
-      |     |  |        |           L  Access_attribute: o[0]
+      |     |  |        |           L  Access_index: o[0]
       |     |  |        |              |- o
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -349,7 +349,7 @@
       |     |  |        |  L  Function_arg: by[0]
       |     |  |        |     L  Expressions: by[0]
       |     |  |        |        L  Expression: by[0]
-      |     |  |        |           L  Access_attribute: by[0]
+      |     |  |        |           L  Access_index: by[0]
       |     |  |        |              |- by
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -387,7 +387,7 @@
       |     |  |        |  L  Function_arg: boo[0]
       |     |  |        |     L  Expressions: boo[0]
       |     |  |        |        L  Expression: boo[0]
-      |     |  |        |           L  Access_attribute: boo[0]
+      |     |  |        |           L  Access_index: boo[0]
       |     |  |        |              |- boo
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -425,7 +425,7 @@
       |     |  |        |  L  Function_arg: c[0]
       |     |  |        |     L  Expressions: c[0]
       |     |  |        |        L  Expression: c[0]
-      |     |  |        |           L  Access_attribute: c[0]
+      |     |  |        |           L  Access_index: c[0]
       |     |  |        |              |- c
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -463,7 +463,7 @@
       |     |  |        |  L  Function_arg: d[0]
       |     |  |        |     L  Expressions: d[0]
       |     |  |        |        L  Expression: d[0]
-      |     |  |        |           L  Access_attribute: d[0]
+      |     |  |        |           L  Access_index: d[0]
       |     |  |        |              |- d
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -501,7 +501,7 @@
       |     |  |        |  L  Function_arg: f[0]
       |     |  |        |     L  Expressions: f[0]
       |     |  |        |        L  Expression: f[0]
-      |     |  |        |           L  Access_attribute: f[0]
+      |     |  |        |           L  Access_index: f[0]
       |     |  |        |              |- f
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -539,7 +539,7 @@
       |     |  |        |  L  Function_arg: i[0]
       |     |  |        |     L  Expressions: i[0]
       |     |  |        |        L  Expression: i[0]
-      |     |  |        |           L  Access_attribute: i[0]
+      |     |  |        |           L  Access_index: i[0]
       |     |  |        |              |- i
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -577,7 +577,7 @@
       |     |  |        |  L  Function_arg: l[0]
       |     |  |        |     L  Expressions: l[0]
       |     |  |        |        L  Expression: l[0]
-      |     |  |        |           L  Access_attribute: l[0]
+      |     |  |        |           L  Access_index: l[0]
       |     |  |        |              |- l
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -615,7 +615,7 @@
       |     |  |        |  L  Function_arg: i2[0][0]
       |     |  |        |     L  Expressions: i2[0][0]
       |     |  |        |        L  Expression: i2[0][0]
-      |     |  |        |           L  Access_attribute: i2[0][0]
+      |     |  |        |           L  Access_index: i2[0][0]
       |     |  |        |              |- i2
       |     |  |        |              |- [
       |     |  |        |              |- 0
@@ -656,7 +656,7 @@
       |     |  |        |  L  Function_arg: s[0]
       |     |  |        |     L  Expressions: s[0]
       |     |  |        |        L  Expression: s[0]
-      |     |  |        |           L  Access_attribute: s[0]
+      |     |  |        |           L  Access_index: s[0]
       |     |  |        |              |- s
       |     |  |        |              |- [
       |     |  |        |              |- 0
Index: src/main/java/org/cmjava2023/ast/ASTTraverser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/cmjava2023/ast/ASTTraverser.java b/src/main/java/org/cmjava2023/ast/ASTTraverser.java
--- a/src/main/java/org/cmjava2023/ast/ASTTraverser.java	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/main/java/org/cmjava2023/ast/ASTTraverser.java	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -5,26 +5,55 @@
 
 public abstract class ASTTraverser<T> {
     public T dispatch(ASTNodes.Statement statementNode) {
-        if (statementNode instanceof ASTNodes.PackageNode) { return visit((ASTNodes.PackageNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.ClassNode) { return visit((ASTNodes.ClassNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.FunctionNode) { return visit((ASTNodes.FunctionNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.FunctionCallNode) { return visit((ASTNodes.FunctionCallNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.IfNode) { return visit((ASTNodes.IfNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.ElseNode) { return visit((ASTNodes.ElseNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.BlockScopeNode) { return visit((ASTNodes.BlockScopeNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.VariableNode) { return visit((ASTNodes.VariableNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.ReturnNode) { return visit((ASTNodes.ReturnNode)statementNode); }
-        else if (statementNode instanceof ASTNodes.VariableAssigmentNode) { return visit((ASTNodes.VariableAssigmentNode)statementNode); }
-        else { throw new NotImplementedError("type " + statementNode.getClass().getName()); }
+        if (statementNode instanceof ASTNodes.PackageNode) {
+            return visit((ASTNodes.PackageNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.ClassNode) {
+            return visit((ASTNodes.ClassNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.FunctionNode) {
+            return visit((ASTNodes.FunctionNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.FunctionCallNode) {
+            return visit((ASTNodes.FunctionCallNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.IfNode) {
+            return visit((ASTNodes.IfNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.ElseNode) {
+            return visit((ASTNodes.ElseNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.VariableNode) {
+            return visit((ASTNodes.VariableNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.ReturnNode) {
+            return visit((ASTNodes.ReturnNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.VariableAssignmentNode) {
+            return visit((ASTNodes.VariableAssignmentNode) statementNode);
+        } else if (statementNode instanceof ASTNodes.UnarySuffixNode) {
+            return visit((ASTNodes.UnarySuffixNode) statementNode);
+        } else {
+            throw new NotImplementedError("type " + statementNode.getClass().getName());
+        }
     }
+
 
     public T dispatch(ASTNodes.Expression expressionNode) {
-        if (expressionNode instanceof ASTNodes.ValueNode<?>) { return visit((ASTNodes.ValueNode<?>)expressionNode); }
-        if (expressionNode instanceof ASTNodes.NestedIdentifierNode) { return visit((ASTNodes.NestedIdentifierNode)expressionNode); }
-        else if (expressionNode instanceof ASTNodes.ComparisonNode) { return visit((ASTNodes.ComparisonNode)expressionNode); }
-        else if (expressionNode instanceof ASTNodes.ResolvedIdentifierNode) { return visit((ASTNodes.ResolvedIdentifierNode)expressionNode); }
-        else if (expressionNode instanceof ASTNodes.RawIdentifierNode) { return visit((ASTNodes.RawIdentifierNode)expressionNode); }
-        else { throw new NotImplementedError("type " + expressionNode.getClass().getName()); }
+        if (expressionNode instanceof ASTNodes.ValueNode<?>) {
+            return visit((ASTNodes.ValueNode<?>) expressionNode);
+        }
+        if (expressionNode instanceof ASTNodes.NestedIdentifierNode) {
+            return visit((ASTNodes.NestedIdentifierNode) expressionNode);
+        } else if (expressionNode instanceof ASTNodes.ComparisonNode) {
+            return visit((ASTNodes.ComparisonNode) expressionNode);
+        } else if (expressionNode instanceof ASTNodes.VariableCallNode) {
+            return visit((ASTNodes.VariableCallNode) expressionNode);
+        } else if (expressionNode instanceof ASTNodes.CastNode) {
+            return visit((ASTNodes.CastNode) expressionNode);
+        } else if (expressionNode instanceof ASTNodes.InfixNode) {
+                return visit((ASTNodes.InfixNode) expressionNode);
+        } else if (expressionNode instanceof ASTNodes.UnaryPrefixNode) {
+                return visit((ASTNodes.UnaryPrefixNode) expressionNode);
+        } else if (expressionNode instanceof ASTNodes.ArrayInstantiationWithValuesNode) {
+                return visit((ASTNodes.ArrayInstantiationWithValuesNode) expressionNode);
+        } else if (expressionNode instanceof ASTNodes.ArrayInstantiationNode) {
+                return visit((ASTNodes.ArrayInstantiationNode) expressionNode);
+        } else {
+            throw new NotImplementedError("type " + expressionNode.getClass().getName());
+        }
     }
 
     public abstract T visit(ASTNodes.StartNode startNode);
@@ -33,23 +62,29 @@
 
     public abstract T visit(ASTNodes.ClassNode classNode);
 
+    public abstract T visit(ASTNodes.ContinueNode continueNodeNode);
+
+    public abstract T visit(ASTNodes.BreakNode breakNode);
+
+    public abstract T visit(ASTNodes.EnumNode enumNode);
+
+    public abstract T visit(ASTNodes.SwitchNode switchNode);
+
+    public abstract T visit(ASTNodes.CaseNode caseNode);
+
     public abstract T visit(ASTNodes.FunctionNode functionNode);
 
     public abstract T visit(ASTNodes.ParameterNode node);
 
-    public abstract T visit(ASTNodes.RawFunctionCallNode rawFunctionCallNode);
-
     public abstract T visit(ASTNodes.FunctionCallNode rawFunctionCallNode);
 
     public abstract T visit(ASTNodes.IfNode ifNode);
 
     public abstract T visit(ASTNodes.ElseNode elseNode);
 
-    public abstract T visit(ASTNodes.BlockScopeNode blockScopeNode);
-
     public abstract T visit(ASTNodes.VariableNode variableNode);
 
-    public abstract T visit(ASTNodes.VariableAssigmentNode variableAssigmentNode);
+    public abstract T visit(ASTNodes.VariableAssignmentNode variableAssignmentNode);
 
     public abstract T visit(ASTNodes.ValueNode<?> valueNode);
 
@@ -57,9 +92,7 @@
 
     public abstract T visit(ASTNodes.ComparisonNode comparisonNode);
 
-    public abstract T visit(ASTNodes.RawIdentifierNode rawIdentifierNode);
-
-    public abstract T visit(ASTNodes.ResolvedIdentifierNode resolvedIdentifierNode);
+    public abstract T visit(ASTNodes.VariableCallNode variableCallNode);
 
     public abstract T visit(ASTNodes.ReturnNode returnNode);
 
@@ -67,18 +100,40 @@
 
     public abstract T visit(ASTNodes.ArrayTypeNode arrayTypeNode);
 
-    public abstract T visit(ASTNodes.ParameterAssigmentNode parameterAssigmentNode);
+    public abstract T visit(ASTNodes.ParameterAssignmentNode parameterAssigmentNode);
+
     public abstract T visit(ASTNodes.InfixNode infixNode);
+
     public abstract T visit(ASTNodes.UnaryPrefixNode unaryPrefixNode);
+
     public abstract T visit(ASTNodes.UnarySuffixNode unarySuffixNode);
+
     public abstract T visit(ASTNodes.ParenthesesNode parenthesesNode);
+
     public abstract T visit(ASTNodes.CastNode castNode);
+
     public abstract T visit(ASTNodes.ArrayInstantiationWithValuesNode arrayInstantiationWithValuesNode);
+
     public abstract T visit(ASTNodes.ArrayInstantiationNode arrayInstantiationNode);
+
     public abstract T visit(ASTNodes.ArrayAccessNode arrayAccessNode);
+
     public abstract T visit(ASTNodes.ObjectInstantiationNode objectInstantiationNode);
+
     public abstract T visit(ASTNodes.ForLoopNode forLoopNode);
+    public abstract T visit(ASTNodes.ForEachLoopNode forEachLoopNode);
+
     public abstract T visit(ASTNodes.WhileLoopNode whileLoopNode);
+
     public abstract T visit(ASTNodes.DoWhileLoopNode doWhileLoopNode);
+
     public abstract T visit(ASTNodes.OperatorNode operatorNode);
+
+    public abstract T visit(ASTNodes.VariableFieldCallNode variableFieldCallNode);
+
+    public abstract T visit(ASTNodes.VariableFunctionCallNode variableFunctionCallNode);
+
+    public abstract T visit(T ifBlockNode);
+
+    public abstract ASTNodes.Node visit(ASTNodes.IfBlockNode node);
 }
Index: src/main/java/org/cmjava2023/semanticanalysis/ASTVisitorFirst.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/cmjava2023/semanticanalysis/ASTVisitorFirst.java b/src/main/java/org/cmjava2023/semanticanalysis/ASTVisitorFirst.java
--- a/src/main/java/org/cmjava2023/semanticanalysis/ASTVisitorFirst.java	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/main/java/org/cmjava2023/semanticanalysis/ASTVisitorFirst.java	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -5,6 +5,7 @@
 import org.cmjava2023.symboltable.*;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Objects;
 
 public class ASTVisitorFirst extends ASTTraverser<ASTNodes.Node> {
@@ -18,22 +19,14 @@
         ArrayList<ASTNodes.Statement> statementList = new ArrayList<>();
 
         for (ASTNodes.Statement statement : statements) {
-            statementList.add((ASTNodes.Statement) statement.accept(this));
+            if(statement!=null) {
+                statementList.add((ASTNodes.Statement) statement.accept(this));
+            }
         }
 
         return statementList;
     }
 
-    private ArrayList<ASTNodes.Condition> getModifiedConditions(ArrayList<ASTNodes.Condition> conditions) {
-        ArrayList<ASTNodes.Condition> conditionList = new ArrayList<>();
-
-        for (ASTNodes.Condition condition : conditions) {
-            conditionList.add((ASTNodes.Condition) condition.accept(this));
-        }
-
-        return conditionList;
-    }
-
     private ArrayList<ASTNodes.ParameterNode> getModifiedParameters(ArrayList<ASTNodes.ParameterNode> parameters) {
         ArrayList<ASTNodes.ParameterNode> conditionList = new ArrayList<>();
 
@@ -54,6 +47,27 @@
         return expressionList;
     }
 
+    private ArrayList<ASTNodes.IfNode> getModifiedIfNodes(ArrayList<ASTNodes.IfNode> ifNodes) {
+        ArrayList<ASTNodes.IfNode> ifNodeList = new ArrayList<>();
+
+        for (ASTNodes.IfNode ifNode : ifNodes) {
+            ifNodeList.add((ASTNodes.IfNode) ifNode.accept(this));
+        }
+
+        return ifNodeList;
+    }
+
+    private ArrayList<ASTNodes.CaseNode> getModifiedCaseNodes(ArrayList<ASTNodes.CaseNode> caseNodes) {
+        ArrayList<ASTNodes.CaseNode> caseNodeList = new ArrayList<>();
+
+        for (ASTNodes.CaseNode caseNode : caseNodes) {
+
+            caseNodeList.add((ASTNodes.CaseNode) caseNode.accept(this));
+        }
+
+        return caseNodeList;
+    }
+
     @Override
     public ASTNodes.Node visit(ASTNodes.StartNode node) {
         return new ASTNodes.StartNode(getModifiedStatements(node.body()));
@@ -69,6 +83,31 @@
         return new ASTNodes.ClassNode(node.classSymbol(), getModifiedStatements(node.body()));
     }
 
+    @Override
+    public ASTNodes.Node visit(ASTNodes.ContinueNode continueNodeNode) {
+        return continueNodeNode;
+    }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.BreakNode breakNode) {
+        return breakNode;
+    }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.EnumNode enumNode) {
+        return enumNode;
+    }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.SwitchNode switchNode) {
+        return new ASTNodes.SwitchNode((ASTNodes.Expression) switchNode.switchEx().accept(this), getModifiedCaseNodes(switchNode.caseNodes()), getModifiedStatements(switchNode.defaultStatements()));
+    }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.CaseNode caseNode) {
+        return new ASTNodes.CaseNode((ASTNodes.Expression) caseNode.caseEx().accept(this), getModifiedStatements(caseNode.body()));
+    }
+
     @Override
     public ASTNodes.Node visit(ASTNodes.FunctionNode node) {
         Function functionSymbol = node.functionSymbol();
@@ -76,7 +115,7 @@
             checkForType(invalidType, "return type of Function", functionSymbol);
         }
 
-        return new ASTNodes.FunctionNode(node.functionSymbol(), getModifiedParameters(node.parameters()), getModifiedStatements(node.body()));
+        return new ASTNodes.FunctionNode(node.functionSymbol(), getModifiedParameters(node.parameters()), node.exception(), getModifiedStatements(node.body()));
     }
 
     @Override
@@ -90,16 +129,17 @@
     }
 
     @Override
-    public ASTNodes.Node visit(ASTNodes.RawFunctionCallNode node) {
-        Symbol functionSymbol = resolveNestedIdentifier(null, node.nestedIdentifier(), node.scope());
+    public ASTNodes.Node visit(ASTNodes.FunctionCallNode node) {
+        String[] nestedIdentifierArray = node.function().getName().split("\\.");
+        ArrayList<String> nestedIdentifier = new ArrayList<>(Arrays.asList(nestedIdentifierArray));
+        Symbol functionSymbol = resolveNestedIdentifier(null, nestedIdentifier, node.function().getScope());
 
         if (functionSymbol instanceof Function function) {
             return new ASTNodes.FunctionCallNode(function, getModifiedExpressions(node.values()));
         }
 
-        errors.add(String.format("Function %s is not declared", String.join(".", node.nestedIdentifier())));
-        return new ASTNodes.FunctionCallNode(null, getModifiedExpressions(node.values()));
-
+        errors.add(String.format("Function %s is not declared", String.join(".", node.function().getName())));
+        return node;
     }
 
     private static ArrayList<String> removeFirstElement(ArrayList<String> list) {
@@ -140,7 +180,7 @@
 
     @Override
     public ASTNodes.Node visit(ASTNodes.IfNode node) {
-        return new ASTNodes.IfNode(node.expression(), getModifiedStatements(node.statements()));
+        return new ASTNodes.IfNode((ASTNodes.Expression) node.expression().accept(this), getModifiedStatements(node.statements()));
     }
 
     @Override
@@ -148,30 +188,30 @@
         return new ASTNodes.ElseNode(getModifiedStatements(node.statements()));
     }
 
-    @Override
-    public ASTNodes.Node visit(ASTNodes.BlockScopeNode node) {
-        return new ASTNodes.BlockScopeNode(getModifiedConditions(node.conditions()));
-    }
-
     @Override
     public ASTNodes.Node visit(ASTNodes.VariableNode node) {
-        Variable variableSymbol = node.variableSymbol();
-        if (variableSymbol.getType() instanceof InvalidType invalidType) {
-            checkForVoidType("Variable", variableSymbol, invalidType);
-            checkForType(invalidType, "Variable", variableSymbol);
-        }
-        if (variableSymbol.getInitialExpression() != null) {
-            variableSymbol.setInitialExpression((ASTNodes.Expression) variableSymbol.getInitialExpression().accept(this));
-        }
+        checkVariable(node.variableSymbol());
         return node;
     }
 
+    private void checkVariable(Variable variable) {
+        if (variable.getType() instanceof InvalidType invalidType) {
+            checkForVoidType("Variable", variable, invalidType);
+            checkForType(invalidType, "Variable", variable);
+        }
+        if (variable.getInitialExpression() != null) {
+            variable.setInitialExpression((ASTNodes.Expression) variable.getInitialExpression().accept(this));
+        }
+    }
+
     private void checkForType(InvalidType invalidType, String errorMessagePart, Symbol symbol) {
         String type = invalidType.getName();
         String arrayIndicator = "[]";
         boolean isArray = type.contains(arrayIndicator);
+        int dimensions = 0;
 
         if (isArray) {
+            dimensions = countOccurrences(type, arrayIndicator);
             type = type.replace(arrayIndicator, "");
         }
 
@@ -179,7 +219,7 @@
 
         if (typeSymbol != null) {
             if (isArray) {
-                symbol.setType(new ArrayType(typeSymbol.getType()));
+                symbol.setType(new ArrayType(typeSymbol.getType(), dimensions));
             } else {
                 symbol.setType(typeSymbol.getType());
             }
@@ -188,6 +228,18 @@
         }
     }
 
+    public static int countOccurrences(String input, String pattern) {
+        int count = 0;
+        int index = 0;
+
+        while ((index = input.indexOf(pattern, index)) != -1) {
+            count++;
+            index += pattern.length();
+        }
+
+        return count;
+    }
+
     private void checkForVoidType(String objectName, Symbol symbol, InvalidType invalidType) {
         if (Objects.equals(invalidType.getName(), "void")) {
             errors.add(String.format("%s %s cannot have the type void", objectName, symbol.getName()));
@@ -195,8 +247,22 @@
     }
 
     @Override
-    public ASTNodes.Node visit(ASTNodes.VariableAssigmentNode node) {
-        return new ASTNodes.VariableAssigmentNode(node.variable(), (ASTNodes.Expression) node.expression().accept(this));
+    public ASTNodes.Node visit(ASTNodes.VariableAssignmentNode node) {
+        String[] variableNameArray = node.variable().getName().split("\\.");
+        ArrayList<String> variableName = new ArrayList<>(Arrays.asList(variableNameArray));
+        Symbol variableSymbol = ASTVisitorFirst.resolveNestedIdentifier(null, variableName, node.variable().getScope());
+
+        if (variableSymbol instanceof Variable variable) {
+            checkVariable(node.variable());
+            return new ASTNodes.VariableAssignmentNode(variable, (ASTNodes.Expression) node.expression().accept(this));
+        }
+
+        if (variableSymbol instanceof Parameter parameter) {
+            return new ASTNodes.ParameterAssignmentNode(parameter, (ASTNodes.Expression) node.expression().accept(this));
+        }
+
+        errors.add(String.format("Variable %s is not declared", node.variable().getName()));
+        return new ASTNodes.VariableAssignmentNode(node.variable(), (ASTNodes.Expression) node.expression().accept(this));
     }
 
     @Override
@@ -204,11 +270,6 @@
         return valueNode;
     }
 
-    @Override
-    public ASTNodes.Node visit(ASTNodes.FunctionCallNode rawFunctionCallNode) {
-        return rawFunctionCallNode;
-    }
-
     @Override
     public ASTNodes.Node visit(ASTNodes.NestedIdentifierNode node) {
         return node;
@@ -216,29 +277,33 @@
 
     @Override
     public ASTNodes.Node visit(ASTNodes.ComparisonNode node) {
-        return node;
+        return new ASTNodes.ComparisonNode((ASTNodes.Expression) node.leftExpression().accept(this), node.comparisonOperator(), (ASTNodes.Expression) node.rightExpression().accept(this));
     }
 
     @Override
-    public ASTNodes.Node visit(ASTNodes.RawIdentifierNode rawIdentifierNode) {
-        Symbol identifierSymbol = rawIdentifierNode.scope().resolve(rawIdentifierNode.name());
+    public ASTNodes.Node visit(ASTNodes.VariableCallNode node) {
+        String symbolName = node.symbol().getName();
+        Symbol identifierSymbol = node.symbol().getScope().resolve(symbolName);
 
         if (identifierSymbol instanceof Variable variable) {
-            return new ASTNodes.ResolvedIdentifierNode(rawIdentifierNode.name(), variable);
+            return new ASTNodes.VariableCallNode(variable);
         }
 
-        errors.add(String.format("Variable %s is not declared", rawIdentifierNode.name()));
-        return new ASTNodes.ResolvedIdentifierNode(rawIdentifierNode.name(), null);
-    }
+        if (identifierSymbol instanceof Parameter parameter) {
+            return new ASTNodes.ParameterCallNode(parameter);
+        }
 
-    @Override
-    public ASTNodes.Node visit(ASTNodes.ResolvedIdentifierNode resolvedIdentifierNode) {
-        return resolvedIdentifierNode;
+        errors.add(String.format("Variable %s is not declared", symbolName));
+        return node;
     }
 
     @Override
     public ASTNodes.Node visit(ASTNodes.ReturnNode node) {
-        return node;
+        if (node.value() == null) {
+            return node;
+        } else {
+            return new ASTNodes.ReturnNode((ASTNodes.Expression) node.value().accept(this));
+        }
     }
 
     @Override
@@ -252,28 +317,28 @@
     }
 
     @Override
-    public ASTNodes.Node visit(ASTNodes.ParameterAssigmentNode node) {
+    public ASTNodes.Node visit(ASTNodes.ParameterAssignmentNode node) {
         return node;
     }
 
     @Override
     public ASTNodes.Node visit(ASTNodes.InfixNode node) {
-        return new ASTNodes.InfixNode((ASTNodes.Expression) dispatch(node.leftExpression()), node.operator(), (ASTNodes.Expression) dispatch(node.rightExpression()));
+        return new ASTNodes.InfixNode((ASTNodes.Expression) node.leftExpression().accept(this), node.operator(), (ASTNodes.Expression) node.rightExpression().accept(this));
     }
 
     @Override
     public ASTNodes.Node visit(ASTNodes.UnaryPrefixNode node) {
-        return node;
+        return new ASTNodes.UnaryPrefixNode(node.operator(), (ASTNodes.Expression) node.Expression().accept(this));
     }
 
     @Override
     public ASTNodes.Node visit(ASTNodes.UnarySuffixNode node) {
-        return node;
+        return new ASTNodes.UnarySuffixNode(node.operator(), (ASTNodes.Expression) node.Expression().accept(this));
     }
 
     @Override
     public ASTNodes.Node visit(ASTNodes.ParenthesesNode node) {
-        return node;
+        return new ASTNodes.ParenthesesNode((ASTNodes.Expression) node.Expression().accept(this));
     }
 
     @Override
@@ -295,9 +360,9 @@
 
             if (typeSymbol != null) {
                 if (isArray) {
-                    return new ASTNodes.CastNode(new ArrayType(typeSymbol.getType()), node.expression(), node.scope());
+                    return new ASTNodes.CastNode(new ArrayType(typeSymbol.getType()), (ASTNodes.Expression) node.expression().accept(this), node.scope());
                 } else {
-                    return new ASTNodes.CastNode(typeSymbol.getType(), node.expression(), node.scope());
+                    return new ASTNodes.CastNode(typeSymbol.getType(), (ASTNodes.Expression) node.expression().accept(this), node.scope());
                 }
             } else {
                 errors.add(String.format("Cannot find type %s for cast expression", invalidType.getName()));
@@ -308,7 +373,7 @@
 
     @Override
     public ASTNodes.Node visit(ASTNodes.ArrayInstantiationWithValuesNode node) {
-        return node;
+        return new ASTNodes.ArrayInstantiationWithValuesNode(getModifiedExpressions(node.expressions()));
     }
 
     @Override
@@ -328,21 +393,46 @@
 
     @Override
     public ASTNodes.Node visit(ASTNodes.ForLoopNode node) {
-        return new ASTNodes.ForLoopNode(node.loopVariable(), node.termination(), node.increment(), getModifiedStatements(node.body()));
+        return new ASTNodes.ForLoopNode((ASTNodes.VariableUsage) node.loopVariable().accept(this), (ASTNodes.Expression) node.termination().accept(this), (ASTNodes.Expression) node.increment().accept(this), getModifiedStatements(node.body()));
+    }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.ForEachLoopNode forEachLoopNode) {
+        return null;
     }
 
     @Override
     public ASTNodes.Node visit(ASTNodes.WhileLoopNode node) {
-        return new ASTNodes.WhileLoopNode(node.expression(), getModifiedStatements(node.body()));
+        return new ASTNodes.WhileLoopNode((ASTNodes.Expression) node.expression().accept(this), getModifiedStatements(node.body()));
     }
 
     @Override
     public ASTNodes.Node visit(ASTNodes.DoWhileLoopNode node) {
-        return new ASTNodes.DoWhileLoopNode(node.expression(), getModifiedStatements(node.body()));
+        return new ASTNodes.DoWhileLoopNode((ASTNodes.Expression) node.expression().accept(this), getModifiedStatements(node.body()));
     }
 
     @Override
     public ASTNodes.Node visit(ASTNodes.OperatorNode node) {
         return node;
     }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.VariableFieldCallNode variableFieldCallNode) {
+        return null;
+    }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.VariableFunctionCallNode variableFunctionCallNode) {
+        return null;
+    }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.Node ifBlockNode) {
+        return null;
+    }
+
+    @Override
+    public ASTNodes.Node visit(ASTNodes.IfBlockNode node) {
+        return new ASTNodes.IfBlockNode(getModifiedIfNodes(node.ifNodes()), node.elseNode() != null ? (ASTNodes.ElseNode) node.elseNode().accept(this) : null);
+    }
 }
Index: src/main/kotlin/org/cmjava2023/FunctionCodeAstTraverser.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/org/cmjava2023/FunctionCodeAstTraverser.kt b/src/main/kotlin/org/cmjava2023/FunctionCodeAstTraverser.kt
--- a/src/main/kotlin/org/cmjava2023/FunctionCodeAstTraverser.kt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/main/kotlin/org/cmjava2023/FunctionCodeAstTraverser.kt	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -1,9 +1,13 @@
 package org.cmjava2023
 
 import org.cmjava2023.ast.ASTNodes
+import org.cmjava2023.ast.ASTNodes.ComparisonOperator
 import org.cmjava2023.ast.ASTTraverser
 import org.cmjava2023.classfilespecification.OpCode
 import org.cmjava2023.classfilespecification.constantpool.*
+import org.cmjava2023.symboltable.ArrayType
+import org.cmjava2023.symboltable.BuiltIn
+import org.cmjava2023.symboltable.Type
 import org.cmjava2023.symboltable.Variable
 
 class FunctionCodeAstTraverser : ASTTraverser<List<OpCode>>() {
@@ -19,6 +23,26 @@
         throw NotImplementedError()
     }
 
+    override fun visit(continueNodeNode: ASTNodes.ContinueNode?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
+
+    override fun visit(breakNode: ASTNodes.BreakNode?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
+
+    override fun visit(enumNode: ASTNodes.EnumNode?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
+
+    override fun visit(switchNode: ASTNodes.SwitchNode?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
+
+    override fun visit(caseNode: ASTNodes.CaseNode?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
+
     override fun visit(functionNode: ASTNodes.FunctionNode): List<OpCode> {
         val opCodes = functionNode.body.flatMap { dispatch(it) }
         return if (opCodes.lastOrNull() !is OpCode.ReturnAnything) {
@@ -32,10 +56,6 @@
         TODO("Not yet implemented")
     }
 
-    override fun visit(rawFunctionCallNode: ASTNodes.RawFunctionCallNode?): List<OpCode> {
-        TODO("Not yet implemented")
-    }
-
     override fun visit(functionCallNode: ASTNodes.FunctionCallNode): List<OpCode> {
         if (functionCallNode.function.name == "System.out.println"
         ) {
@@ -50,22 +70,32 @@
                 ClassConstantInfo(qualifiedClassName),
                 NameAndTypeConstantInfo(fieldName, "Ljava/io/PrintStream;")
             )
-            val methodReferenceConstantInfo = MethodReferenceConstantInfo(
-                ClassConstantInfo("java/io/PrintStream"),
-                NameAndTypeConstantInfo(methodName, "(Ljava/lang/String;)V")
-            )
 
+            var typeCodeToPrint = "Ljava/lang/String;"
             val expr = functionCallNode.values[0]
             val opcOdesLoadingWhatToPrint = if (expr is ASTNodes.ValueNode<*>) {
-                when(val value = expr.value) {
+                when (val value = expr.value) {
                     is String -> listOf(OpCode.LoadConstant(StringConstantInfo(value)))
                     else -> throw NotImplementedError()
                 }
             } else if (expr is ASTNodes.InfixNode && expr.operator == ASTNodes.InfixOperator.PLUS) {
+                visit(expr)
+            } else if (expr is ASTNodes.VariableCallNode) {
+                typeCodeToPrint = getCharOfBuiltInForTypeDescriptor(expr.symbol.type)
+                visit(expr)
+            }  else if (expr is ASTNodes.ArrayAccessNode) {
+                val arrayType = (expr.array.type as ArrayType).arrayType
+                if(arrayType.name != "String") {
+                    typeCodeToPrint = getCharOfBuiltInForTypeDescriptor(arrayType)                    
+                }
                 visit(expr)
             } else {
-                throw NotImplementedError()
+                throw NotImplementedError(expr.javaClass.name)
             }
+            val methodReferenceConstantInfo = MethodReferenceConstantInfo(
+                ClassConstantInfo("java/io/PrintStream"),
+                NameAndTypeConstantInfo(methodName, "($typeCodeToPrint)V")
+            )
 
             return listOf(OpCode.Getstatic(fieldReferenceConstantInfo))
                 .plus(opcOdesLoadingWhatToPrint)
@@ -75,21 +105,159 @@
         }
     }
 
+    private fun getCharOfBuiltInForTypeDescriptor(type: Type): String {
+        return when (type.name) {
+            "int" -> "I"
+            "boolean" -> "Z"
+            "float" -> "F"
+            "char" -> "C"
+            "byte" -> "I"
+            "short" -> "I"
+            "long" -> "J"
+            "double" -> "D"
+            else -> throw NotImplementedError(type.name)
+        }
+    }
+
     override fun visit(infixNode: ASTNodes.InfixNode): List<OpCode> {
         val leftExpression = infixNode.leftExpression
-        if (infixNode.operator == ASTNodes.InfixOperator.PLUS && leftExpression is ASTNodes.ValueNode<*> && leftExpression.value is String) {
-            return listOf(
-                OpCode.New(ClassConstantInfo("java/lang/StringBuilder")),
-                OpCode.Dup(),
-                OpCode.Invokespecial(MethodReferenceConstantInfo(ClassConstantInfo("java/lang/StringBuilder"), NameAndTypeConstantInfo("<init>", "()V"))),
-                OpCode.LoadConstant(StringConstantInfo(leftExpression.value as String)),
-                OpCode.Invokevirtual(MethodReferenceConstantInfo(ClassConstantInfo("java/lang/StringBuilder"), NameAndTypeConstantInfo("append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;"))))
-                .plus(dispatch(infixNode.rightExpression))
-                .plus(OpCode.Invokevirtual(MethodReferenceConstantInfo(ClassConstantInfo("java/lang/StringBuilder"), NameAndTypeConstantInfo("append", "(I)Ljava/lang/StringBuilder;"))))
-                .plus(OpCode.Invokevirtual(MethodReferenceConstantInfo(ClassConstantInfo("java/lang/StringBuilder"), NameAndTypeConstantInfo("toString", "()Ljava/lang/String;"))))
-        } else {
-            throw NotImplementedError()
-        }
+        val rightExpression = infixNode.rightExpression
+        return if (infixNode.operator == ASTNodes.InfixOperator.PLUS && leftExpression is ASTNodes.ValueNode<*> && leftExpression.value is String && rightExpression is ASTNodes.VariableCallNode) {
+            concatStringLiteralAndVariable(leftExpression, infixNode, rightExpression)
+        } else {
+            val leftType = getTypeNameOf(leftExpression)
+            val rightType = getTypeNameOf(rightExpression)
+
+            if (leftType == rightType || rightExpression is ASTNodes.ValueNode<*>) {
+                dispatch(leftExpression)
+                    .plus(if(rightExpression is ASTNodes.ValueNode<*>) { visitValueNodeThatNeedsType(rightExpression, leftType) } else {dispatch(rightExpression) })
+                    .plus(when (leftType) {
+                    "int" -> infixBothInt(infixNode.operator)
+                    "long" -> infixBothLong(infixNode.operator)
+                    "float" -> infixBothFloat(infixNode.operator)
+                    "double" -> infixBothDouble(infixNode.operator)
+                    else -> throw NotImplementedError(leftType)
+                })
+            } else {
+                throw NotImplementedError("$leftType $rightType")
+            }
+        }
+    }
+
+    private fun getTypeNameOf(expression: ASTNodes.Expression): String {
+        return when (expression) {
+            is ASTNodes.VariableCallNode -> expression.symbol.type.name
+            is ASTNodes.ValueNode<*> -> when (expression.value) {
+                is String -> "String"
+                is Int -> "int"
+                is Long -> "long"
+                is Float -> "float"
+                is Double -> "double"
+                is Boolean -> "boolean"
+                is Char -> "char"
+                is Byte -> "byte"
+                is Short -> "short"
+                else -> throw NotImplementedError("type${expression.value.javaClass.name}")
+            }
+
+            else -> throw NotImplementedError(expression.javaClass.name)
+        }
+    }
+
+    private fun infixBothInt(operator: ASTNodes.InfixOperator): List<OpCode> {
+        return listOf(
+            when (operator) {
+                ASTNodes.InfixOperator.PLUS -> OpCode.Iadd()
+                ASTNodes.InfixOperator.MINUS -> OpCode.Isub()
+                ASTNodes.InfixOperator.DIVISION -> OpCode.Idiv()
+                ASTNodes.InfixOperator.MULTIPLICATION -> OpCode.Imul()
+                ASTNodes.InfixOperator.MOD -> OpCode.Irem()
+                else -> throw NotImplementedError(operator.name)
+            }
+        )
+    }
+
+    private fun infixBothLong(operator: ASTNodes.InfixOperator): List<OpCode> {
+        return listOf(
+            when (operator) {
+                ASTNodes.InfixOperator.PLUS -> OpCode.Ladd()
+                ASTNodes.InfixOperator.MINUS -> OpCode.Lsub()
+                ASTNodes.InfixOperator.DIVISION -> OpCode.Ldiv()
+                ASTNodes.InfixOperator.MULTIPLICATION -> OpCode.Lmul()
+                ASTNodes.InfixOperator.MOD -> OpCode.Lrem()
+                else -> throw NotImplementedError(operator.name)
+            }
+        )
+    }
+
+    private fun infixBothFloat(operator: ASTNodes.InfixOperator): List<OpCode> {
+        return listOf(
+            when (operator) {
+                ASTNodes.InfixOperator.PLUS -> OpCode.Fadd()
+                ASTNodes.InfixOperator.MINUS -> OpCode.Fsub()
+                ASTNodes.InfixOperator.DIVISION -> OpCode.Fdiv()
+                ASTNodes.InfixOperator.MULTIPLICATION -> OpCode.Fmul()
+                ASTNodes.InfixOperator.MOD -> OpCode.Frem()
+                else -> throw NotImplementedError(operator.name)
+            }
+        )
+    }
+
+    private fun infixBothDouble(operator: ASTNodes.InfixOperator): List<OpCode> {
+        return listOf(
+            when (operator) {
+                ASTNodes.InfixOperator.PLUS -> OpCode.Dadd()
+                ASTNodes.InfixOperator.MINUS -> OpCode.Dsub()
+                ASTNodes.InfixOperator.DIVISION -> OpCode.Ddiv()
+                ASTNodes.InfixOperator.MULTIPLICATION -> OpCode.Dmul()
+                ASTNodes.InfixOperator.MOD -> OpCode.Drem()
+                else -> throw NotImplementedError(operator.name)
+            }
+        )
+    }
+
+    private fun FunctionCodeAstTraverser.concatStringLiteralAndVariable(
+        leftExpression: ASTNodes.ValueNode<*>,
+        infixNode: ASTNodes.InfixNode,
+        rightExpression: ASTNodes.VariableCallNode
+    ): List<OpCode> {
+        return listOf(
+            OpCode.New(ClassConstantInfo("java/lang/StringBuilder")),
+            OpCode.Dup(),
+            OpCode.Invokespecial(
+                MethodReferenceConstantInfo(
+                    ClassConstantInfo("java/lang/StringBuilder"),
+                    NameAndTypeConstantInfo("<init>", "()V")
+                )
+            ),
+            OpCode.LoadConstant(StringConstantInfo(leftExpression.value as String)),
+            OpCode.Invokevirtual(
+                MethodReferenceConstantInfo(
+                    ClassConstantInfo("java/lang/StringBuilder"),
+                    NameAndTypeConstantInfo("append", "(Ljava/lang/String;)Ljava/lang/StringBuilder;")
+                )
+            )
+        )
+            .plus(dispatch(infixNode.rightExpression))
+            .plus(
+                OpCode.Invokevirtual(
+                    MethodReferenceConstantInfo(
+                        ClassConstantInfo("java/lang/StringBuilder"),
+                        NameAndTypeConstantInfo(
+                            "append",
+                            "(" + getCharOfBuiltInForTypeDescriptor(rightExpression.symbol.type) + ")Ljava/lang/StringBuilder;"
+                        )
+                    )
+                )
+            )
+            .plus(
+                OpCode.Invokevirtual(
+                    MethodReferenceConstantInfo(
+                        ClassConstantInfo("java/lang/StringBuilder"),
+                        NameAndTypeConstantInfo("toString", "()Ljava/lang/String;")
+                    )
+                )
+            )
     }
 
 
@@ -101,9 +269,6 @@
         throw NotImplementedError()
     }
 
-    override fun visit(blockScopeNode: ASTNodes.BlockScopeNode): List<OpCode> {
-        return listOf()
-    }
     override fun visit(variableNode: ASTNodes.VariableNode): List<OpCode> {
         val variableSymbol = variableNode.variableSymbol
         val value = variableSymbol.initialExpression
@@ -111,41 +276,88 @@
     }
 
     private fun assignOrDeclareVariable(variableSymbol: Variable, value: ASTNodes.Expression): List<OpCode> {
-        val opCodesLoadingExpressionValueOnStack = dispatch(value)
-        val storingOpCode = when(variableSymbol.type.name) {
-            "int" -> OpCode.StoreInt(variableSymbol)
-            "long" -> OpCode.StoreLong(variableSymbol)
-            "float" -> OpCode.StoreFloat(variableSymbol)
-            "double" -> OpCode.StoreDouble(variableSymbol)
-            "boolean" -> OpCode.StoreInt(variableSymbol)
-            "char" -> OpCode.StoreInt(variableSymbol)
-            "byte" -> OpCode.StoreInt(variableSymbol)
-            "short" -> OpCode.StoreInt(variableSymbol)
-            else -> throw NotImplementedError("typename:${variableSymbol.type.name}")
+        val opCodesLoadingExpressionValueOnStack = if (value is ASTNodes.ValueNode<*> && getTypeNameOf(value) != variableSymbol.type.name) {
+            visitValueNodeThatNeedsType(value, variableSymbol.type.name)
+        } else if (variableSymbol.type is ArrayType && value is ASTNodes.ArrayInstantiationWithValuesNode) {
+            visit(value, variableSymbol.type as ArrayType)
+        } else {
+            dispatch(value)
+        }
+        val storingOpCode = storeStackInVar(variableSymbol)
+        return opCodesLoadingExpressionValueOnStack.plus(storingOpCode)
+    }
+
+    private fun FunctionCodeAstTraverser.visitValueNodeThatNeedsType(
+        value: ASTNodes.ValueNode<*>,
+        typeName: String
+    ): List<OpCode> {
+        val valueAsString = value.value.toString()
+        return visit(when (typeName) {
+            "int" -> ASTNodes.ValueNode(valueAsString.toInt())
+            "long" -> ASTNodes.ValueNode(valueAsString.toLong())
+            "float" -> ASTNodes.ValueNode(valueAsString.toFloat())
+            "double" -> ASTNodes.ValueNode(valueAsString.toDouble())
+            "boolean" -> ASTNodes.ValueNode(valueAsString.toBoolean())
+            "char" -> {
+                when (value.value) {
+                    is Char -> value
+                    is Int -> ASTNodes.ValueNode(Char(value.value as Int))
+                    else -> throw NotImplementedError(value.value.javaClass.name)
+                }
+            }
+            "byte" -> ASTNodes.ValueNode(valueAsString.toByte())
+            "short" -> ASTNodes.ValueNode(valueAsString.toShort())
+            "String" -> ASTNodes.ValueNode(valueAsString)
+            else -> throw NotImplementedError("typename:$typeName")
+        })
+    }
+
+    private fun storeStackInVar(variableSymbol: Variable): OpCode {
+        return when(variableSymbol.type) {
+            is ArrayType -> OpCode.StoreArray(variableSymbol)
+            is BuiltIn -> when (variableSymbol.type.name) {
+                "int" -> OpCode.StoreInt(variableSymbol)
+                "long" -> OpCode.StoreLong(variableSymbol)
+                "float" -> OpCode.StoreFloat(variableSymbol)
+                "double" -> OpCode.StoreDouble(variableSymbol)
+                "boolean" -> OpCode.StoreInt(variableSymbol)
+                "char" -> OpCode.StoreInt(variableSymbol)
+                "byte" -> OpCode.StoreInt(variableSymbol)
+                "short" -> OpCode.StoreInt(variableSymbol)
+                else -> throw NotImplementedError("typename:${variableSymbol.type.name}")
+            }
+            else -> throw NotImplementedError("typename:${variableSymbol.type.javaClass.name}")
         }
-        return opCodesLoadingExpressionValueOnStack.plus(storingOpCode)
+       
     }
 
-    override fun visit(variableAssigmentNode: ASTNodes.VariableAssigmentNode): List<OpCode> {
-        val variableSymbol = variableAssigmentNode.variable
-        val value = variableAssigmentNode.expression
+    override fun visit(variableAssignmentNode: ASTNodes.VariableAssignmentNode): List<OpCode> {
+        val variableSymbol = variableAssignmentNode.variable
+        val value = variableAssignmentNode.expression
         return assignOrDeclareVariable(variableSymbol, value)
     }
 
     override fun visit(valueNode: ASTNodes.ValueNode<*>): List<OpCode> {
         val value = valueNode.value
-        return listOf(when (value) {
-            is String -> OpCode.LoadConstant(StringConstantInfo(value))
-            is Int -> OpCode.IntConstant(value)
-            is Long -> OpCode.LongConstant(value)
-            is Float -> OpCode.FloatConstant(value)
-            is Double -> OpCode.DoubleConstant(value)
-            is Boolean -> if(value) { OpCode.Iconst_1() } else { OpCode.Iconst_0() }
-            is Char ->  OpCode.IntConstant(value.code)
-            is Byte ->  OpCode.IntConstant(value.toInt())
-            is Short ->  OpCode.IntConstant(value.toInt())
-            else -> throw NotImplementedError("type${value.javaClass.name}")
-        })
+        return listOf(
+            when (value) {
+                is String -> OpCode.LoadConstant(StringConstantInfo(value))
+                is Int -> OpCode.IntConstant(value)
+                is Long -> OpCode.LongConstant(value)
+                is Float -> OpCode.FloatConstant(value)
+                is Double -> OpCode.DoubleConstant(value)
+                is Boolean -> if (value) {
+                    OpCode.Iconst_1()
+                } else {
+                    OpCode.Iconst_0()
+                }
+
+                is Char -> OpCode.IntConstant(value.code)
+                is Byte -> OpCode.IntConstant(value.toInt())
+                is Short -> OpCode.IntConstant(value.toInt())
+                else -> throw NotImplementedError("type${value.javaClass.name}")
+            }
+        )
     }
 
     override fun visit(nestedIdentifierNode: ASTNodes.NestedIdentifierNode): List<OpCode> {
@@ -153,25 +365,68 @@
     }
 
     override fun visit(comparisonNode: ASTNodes.ComparisonNode): List<OpCode> {
-        TODO("Not yet implemented")
-    }
+        val leftExpression = comparisonNode.leftExpression
+        val rightExpression = comparisonNode.rightExpression
+        val result = mutableListOf<OpCode>()
+        if (leftExpression is ASTNodes.VariableCallNode && rightExpression is ASTNodes.ValueNode<*>) {
+            result.addAll(visit(leftExpression))
+            if(comparisonNode.comparisonOperator == ComparisonOperator.BAND || comparisonNode.comparisonOperator == ComparisonOperator.BOR || comparisonNode.comparisonOperator == ComparisonOperator.BXOR) {
+                result.addAll(visitValueNodeThatNeedsType(rightExpression, leftExpression.symbol.type.name))
+            } else {
+                result.addAll(visit(rightExpression))
+            }
 
-    override fun visit(rawIdentifierNode: ASTNodes.RawIdentifierNode?): List<OpCode> {
-        TODO("Not yet implemented")
+            when (leftExpression.symbol.type.name) {
+                "int" -> {
+                    result.add(
+                        when (comparisonNode.comparisonOperator) {
+                            ComparisonOperator.BAND -> OpCode.Iand()
+                            ComparisonOperator.BOR -> OpCode.Ior()
+                            ComparisonOperator.BXOR -> OpCode.Ixor()
+                            ComparisonOperator.BIT_SHIFT_L -> OpCode.Ishl()
+                            ComparisonOperator.BIT_SHIFT_R -> OpCode.Ishr()
+                            ComparisonOperator.LOGICAL_SHIFT_R -> OpCode.Iushr()
+                            else -> throw NotImplementedError(comparisonNode.comparisonOperator.name)
+                        }
+                    )
+                }
+                "long" -> {
+                    result.add(
+                        when (comparisonNode.comparisonOperator) {
+                            ComparisonOperator.BAND -> OpCode.Land()
+                            ComparisonOperator.BOR -> OpCode.Lor()
+                            ComparisonOperator.BXOR -> OpCode.Lxor()
+                            ComparisonOperator.BIT_SHIFT_L -> OpCode.Lshl()
+                            ComparisonOperator.BIT_SHIFT_R -> OpCode.Lshr()
+                            ComparisonOperator.LOGICAL_SHIFT_R -> OpCode.Lushr()
+                            else -> throw NotImplementedError(comparisonNode.comparisonOperator.name)
+                        }
+                    )
+                }
+                else -> {
+                    throw NotImplementedError(leftExpression.symbol.type.name + " " + rightExpression.value.javaClass.name)
+                }
+            }
+        } else {
+            throw NotImplementedError(leftExpression.javaClass.name + " " + rightExpression.javaClass.name)
+        }
+        return result
     }
 
-    override fun visit(resolvedIdentifierNode: ASTNodes.ResolvedIdentifierNode): List<OpCode> {
-        return listOf(when(resolvedIdentifierNode.symbol.type.name) {
-            "int" -> OpCode.LoadInt(resolvedIdentifierNode.symbol)
-            "long" -> OpCode.LoadLong(resolvedIdentifierNode.symbol)
-            "float" -> OpCode.LoadFloat(resolvedIdentifierNode.symbol)
-            "double" -> OpCode.LoadDouble(resolvedIdentifierNode.symbol)
-            "boolean" -> OpCode.LoadInt(resolvedIdentifierNode.symbol)
-            "char" -> OpCode.LoadInt(resolvedIdentifierNode.symbol)
-            "byte" -> OpCode.LoadInt(resolvedIdentifierNode.symbol)
-            "short" -> OpCode.LoadInt(resolvedIdentifierNode.symbol)
-            else -> throw NotImplementedError("typename:${resolvedIdentifierNode.symbol.type.name}")
-        })
+    override fun visit(variableCallNode: ASTNodes.VariableCallNode): List<OpCode> {
+        return listOf(
+            when (variableCallNode.symbol.type.name) {
+                "int" -> OpCode.LoadInt(variableCallNode.symbol)
+                "long" -> OpCode.LoadLong(variableCallNode.symbol)
+                "float" -> OpCode.LoadFloat(variableCallNode.symbol)
+                "double" -> OpCode.LoadDouble(variableCallNode.symbol)
+                "boolean" -> OpCode.LoadInt(variableCallNode.symbol)
+                "char" -> OpCode.LoadInt(variableCallNode.symbol)
+                "byte" -> OpCode.LoadInt(variableCallNode.symbol)
+                "short" -> OpCode.LoadInt(variableCallNode.symbol)
+                else -> throw NotImplementedError("typename:${variableCallNode.symbol.type.name}")
+            }
+        )
     }
 
     override fun visit(returnNode: ASTNodes.ReturnNode): List<OpCode> {
@@ -186,36 +441,184 @@
         TODO("Not yet implemented")
     }
 
-    override fun visit(parameterAssigmentNode: ASTNodes.ParameterAssigmentNode?): List<OpCode> {
+    override fun visit(parameterAssignmentNode: ASTNodes.ParameterAssignmentNode?): List<OpCode> {
         TODO("Not yet implemented")
     }
 
-    override fun visit(unaryPrefixNode: ASTNodes.UnaryPrefixNode?): List<OpCode> {
-        TODO("Not yet implemented")
+    override fun visit(unaryPrefixNode: ASTNodes.UnaryPrefixNode): List<OpCode> {
+        val typeName = getTypeNameOf(unaryPrefixNode.Expression)
+        return dispatch(unaryPrefixNode.Expression).plus(
+            when (typeName) {
+                "int" -> when (unaryPrefixNode.operator) {
+                    ASTNodes.PrefixOperator.MINUS -> OpCode.Ineg()
+                    else -> throw NotImplementedError(unaryPrefixNode.operator.name)
+                }
+                "long" -> when (unaryPrefixNode.operator) {
+                    ASTNodes.PrefixOperator.MINUS -> OpCode.Lneg()
+                    else -> throw NotImplementedError(unaryPrefixNode.operator.name)
+                }
+                "float" -> when (unaryPrefixNode.operator) {
+                    ASTNodes.PrefixOperator.MINUS -> OpCode.Fneg()
+                    else -> throw NotImplementedError(unaryPrefixNode.operator.name)
+                }
+                "double" -> when (unaryPrefixNode.operator) {
+                    ASTNodes.PrefixOperator.MINUS -> OpCode.Dneg()
+                    else -> throw NotImplementedError(unaryPrefixNode.operator.name)
+                }
+
+                else -> throw NotImplementedError(typeName)
+            }
+        )
     }
 
-    override fun visit(unarySuffixNode: ASTNodes.UnarySuffixNode?): List<OpCode> {
-        TODO("Not yet implemented")
+    override fun visit(unarySuffixNode: ASTNodes.UnarySuffixNode): List<OpCode> {
+        val expression = unarySuffixNode.Expression
+        return if (expression is ASTNodes.VariableCallNode) {
+            listOf(
+                when (expression.symbol.type.name) {
+                    "int" -> when (unarySuffixNode.operator) {
+                        ASTNodes.SuffixOperator.INC -> OpCode.IncreaseInt(expression.symbol, 1)
+                        else -> throw NotImplementedError(unarySuffixNode.operator.name)
+                    }
+                    else -> throw NotImplementedError(expression.symbol.type.name)
+                }
+            )
+        } else throw NotImplementedError(unarySuffixNode.Expression.javaClass.name)
     }
 
     override fun visit(parenthesesNode: ASTNodes.ParenthesesNode?): List<OpCode> {
         TODO("Not yet implemented")
     }
 
-    override fun visit(castNode: ASTNodes.CastNode?): List<OpCode> {
+    override fun visit(castNode: ASTNodes.CastNode): List<OpCode> {
+        val result = mutableListOf<OpCode>()
+        val expression = castNode.expression
+        if (expression is ASTNodes.VariableCallNode) {
+            result.addAll(visit(expression))
+            val fromTypeName = expression.symbol.type.name
+            val toTypeName = castNode.type.name
+            result.add(
+                when (fromTypeName) {
+                    "int" -> when (toTypeName) {
+                        "byte" -> OpCode.I2b()
+                        "char" -> OpCode.I2c()
+                        "short" -> OpCode.I2s()
+                        "long" -> OpCode.I2l()
+                        "float" -> OpCode.I2f()
+                        "double" -> OpCode.I2d()
+                        else -> throw NotImplementedError(toTypeName)
+                    }
+                    "long" -> when (toTypeName) {
+                        "int" -> OpCode.L2i()
+                        "float" -> OpCode.L2f()
+                        "double" -> OpCode.L2d()
+                        else -> throw NotImplementedError(toTypeName)
+                    }
+                    "float" -> when (toTypeName) {
+                        "int" -> OpCode.F2i()
+                        "long" -> OpCode.F2l()
+                        "double" -> OpCode.F2d()
+                        else -> throw NotImplementedError(toTypeName)
+                    }
+                    "double" -> when (toTypeName) {
+                        "int" -> OpCode.D2i()
+                        "long" -> OpCode.D2l()
+                        "float" -> OpCode.D2f()
+                        else -> throw NotImplementedError(toTypeName)
+                    }
+                    else -> throw NotImplementedError(fromTypeName)
+                }
+            )
+        }
+        return result
+    }
+
+    override fun visit(arrayInstantiationWithValuesNode: ASTNodes.ArrayInstantiationWithValuesNode): List<OpCode> {
         TODO("Not yet implemented")
     }
-
-    override fun visit(arrayInstantiationWithValuesNode: ASTNodes.ArrayInstantiationWithValuesNode?): List<OpCode> {
-        TODO("Not yet implemented")
+    
+    fun visit(arrayInstantiationWithValuesNode: ASTNodes.ArrayInstantiationWithValuesNode, arrayType: ArrayType): List<OpCode> {        
+        val result = mutableListOf<OpCode>()
+        val arrayLength = arrayInstantiationWithValuesNode.expressions.size
+        result.add(OpCode.IntConstant(arrayLength))
+        val valueNodesOrNull = arrayInstantiationWithValuesNode.expressions.map { if(it is ASTNodes.ValueNode<*>) { it } else { null } }
+        if(valueNodesOrNull.none { it == null }) {
+            result.add(when(arrayType.arrayType.name) {
+                "String" -> OpCode.Anewarray(ClassConstantInfo("java/lang/String"))
+                "boolean" -> OpCode.Newarray(OpCode.ArrayType.T_BOOLEAN)
+                "int" -> OpCode.Newarray(OpCode.ArrayType.T_INT)
+                "byte" -> OpCode.Newarray(OpCode.ArrayType.T_BYTE)
+                "char" -> OpCode.Newarray(OpCode.ArrayType.T_CHAR)
+                "short" -> OpCode.Newarray(OpCode.ArrayType.T_SHORT)
+                "long" -> OpCode.Newarray(OpCode.ArrayType.T_LONG)
+                "float" -> OpCode.Newarray(OpCode.ArrayType.T_FLOAT)
+                "double" -> OpCode.Newarray(OpCode.ArrayType.T_DOUBLE)
+                else -> throw NotImplementedError(arrayType.arrayType.name)
+            })
+            val opCodeToStoreArrayElements = when(arrayType.arrayType.name) {
+                "String" -> OpCode.Aastore()
+                "boolean" -> OpCode.Bastore()
+                "int" -> OpCode.Iastore()
+                "byte" -> OpCode.Bastore()
+                "short" -> OpCode.Sastore()
+                "char" -> OpCode.Castore()
+                "long" -> OpCode.Lastore()
+                "double" -> OpCode.Dastore()
+                "float" -> OpCode.Fastore()
+                else -> throw NotImplementedError(arrayType.arrayType.name)
+            }
+            result.add(OpCode.Dup())
+            val valueNodes = valueNodesOrNull.requireNoNulls()
+            for ((index, valueNode) in valueNodes.withIndex()) {
+                result.add(OpCode.IntConstant(index))
+                result.addAll(visitValueNodeThatNeedsType(valueNode, arrayType.arrayType.name))
+                result.add(opCodeToStoreArrayElements)
+                if (index + 1 < valueNodes.size) {
+                    result.add(OpCode.Dup())
+                }
+            }
+        } else {
+            throw NotImplementedError("Array element not ValueNode")
+        }
+        
+        
+        return result
     }
 
-    override fun visit(arrayInstantiationNode: ASTNodes.ArrayInstantiationNode?): List<OpCode> {
-        TODO("Not yet implemented")
+    override fun visit(arrayInstantiationNode: ASTNodes.ArrayInstantiationNode): List<OpCode> {
+        val result = mutableListOf<OpCode>()
+        for (dimensionSize in arrayInstantiationNode.dimensionSizes) {
+            result.add(OpCode.IntConstant(dimensionSize))
+        }
+        val numberOfDimensions = arrayInstantiationNode.dimensionSizes.size.toUByte()
+        result.add(OpCode.Multianewarray(ClassConstantInfo("[".repeat(numberOfDimensions.toInt()) + getCharOfBuiltInForTypeDescriptor(arrayInstantiationNode.type)), numberOfDimensions))
+        return result
     }
 
-    override fun visit(arrayAccessNode: ASTNodes.ArrayAccessNode?): List<OpCode> {
-        TODO("Not yet implemented")
+    override fun visit(arrayAccessNode: ASTNodes.ArrayAccessNode): List<OpCode> {
+        val result = mutableListOf<OpCode>()
+        result.add(OpCode.LoadArray(arrayAccessNode.array))
+        for ((index, elementIndexAccessed) in arrayAccessNode.elementIndicesAccessed.withIndex()) {
+            result.add(OpCode.IntConstant(elementIndexAccessed))
+            if (index + 1 < arrayAccessNode.elementIndicesAccessed.size) {
+                result.add(OpCode.Aaload())                
+            }
+        }
+        val arrayTypeName = (arrayAccessNode.array.type as ArrayType).arrayType.name
+        result.add(when (arrayTypeName) {
+            "String" -> OpCode.Aaload()
+            "boolean" -> OpCode.Baload()
+            "int" -> OpCode.Iaload()
+            "byte" -> OpCode.Baload()
+            "short" -> OpCode.Saload()
+            "char" -> OpCode.Caload()
+            "long" -> OpCode.Laload()
+            "double" -> OpCode.Daload()
+            "float" -> OpCode.Faload()
+            else -> throw NotImplementedError(arrayTypeName)
+        })
+        
+        return result
     }
 
     override fun visit(objectInstantiationNode: ASTNodes.ObjectInstantiationNode?): List<OpCode> {
@@ -225,6 +628,10 @@
     override fun visit(forLoopNode: ASTNodes.ForLoopNode?): List<OpCode> {
         TODO("Not yet implemented")
     }
+
+    override fun visit(forEachLoopNode: ASTNodes.ForEachLoopNode?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
 
     override fun visit(whileLoopNode: ASTNodes.WhileLoopNode?): List<OpCode> {
         TODO("Not yet implemented")
@@ -237,4 +644,20 @@
     override fun visit(operatorNode: ASTNodes.OperatorNode?): List<OpCode> {
         TODO("Not yet implemented")
     }
+
+    override fun visit(variableFieldCallNode: ASTNodes.VariableFieldCallNode?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
+
+    override fun visit(variableFunctionCallNode: ASTNodes.VariableFunctionCallNode?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
+
+    override fun visit(node: ASTNodes.IfBlockNode?): ASTNodes.Node {
+        TODO("Not yet implemented")
+    }
+
+    override fun visit(ifBlockNode: List<OpCode>?): List<OpCode> {
+        TODO("Not yet implemented")
+    }
 }
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/doubles/conversions/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/doubles/conversions/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/doubles/conversions/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/doubles/conversions/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,341 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: doubles
+   |     L  3: conversions
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 10.0
+               |     |- name: d
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: float
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10.0
+               |     |        |- name: d
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: double
+               |     |- name: f
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: int
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10.0
+               |     |        |- name: d
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: double
+               |     |- name: i
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: long
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10.0
+               |     |        |- name: d
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: double
+               |     |- name: l
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type VariableCallNode)
+               |     |  L  symbol (field of type Variable)
+               |     |     |- initialExpression (field of type ValueNode)
+               |     |     |  L  value: 10.0
+               |     |     |- name: d
+               |     |     L  type (field of type BuiltIn)
+               |     |        L  name: double
+               |     |- name: force_store
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type VariableCallNode)
+               |     |  L  symbol (field of type Variable)
+               |     |     |- initialExpression (field of type VariableCallNode)
+               |     |     |  L  symbol (field of type Variable)
+               |     |     |     |- initialExpression (field of type ValueNode)
+               |     |     |     |  L  value: 10.0
+               |     |     |     |- name: d
+               |     |     |     L  type (field of type BuiltIn)
+               |     |     |        L  name: double
+               |     |     |- name: force_store
+               |     |     L  type (field of type BuiltIn)
+               |     |        L  name: double
+               |     |- name: force_load
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 1.0
+               |     |- name: force_const
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 7 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d:
+               |- 8 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 10.0
+               |           |- name: d
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f:
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: float
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10.0
+               |           |        |- name: d
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: double
+               |           |- name: f
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: k:
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: int
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10.0
+               |           |        |- name: d
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: double
+               |           |- name: i
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l:
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: long
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10.0
+               |           |        |- name: d
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: double
+               |           |- name: l
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_load:
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type VariableCallNode)
+               |           |  L  symbol (field of type Variable)
+               |           |     |- initialExpression (field of type VariableCallNode)
+               |           |     |  L  symbol (field of type Variable)
+               |           |     |     |- initialExpression (field of type ValueNode)
+               |           |     |     |  L  value: 10.0
+               |           |     |     |- name: d
+               |           |     |     L  type (field of type BuiltIn)
+               |           |     |        L  name: double
+               |           |     |- name: force_store
+               |           |     L  type (field of type BuiltIn)
+               |           |        L  name: double
+               |           |- name: force_load
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_store:
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type VariableCallNode)
+               |           |  L  symbol (field of type Variable)
+               |           |     |- initialExpression (field of type ValueNode)
+               |           |     |  L  value: 10.0
+               |           |     |- name: d
+               |           |     L  type (field of type BuiltIn)
+               |           |        L  name: double
+               |           |- name: force_store
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_const:
+               L  20 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type ValueNode)
+                           |  L  value: 1.0
+                           |- name: force_const
+                           L  type (field of type BuiltIn)
+                              L  name: double
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/doubles/mathops/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/doubles/mathops/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/doubles/mathops/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/doubles/mathops/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/doubles/mathops/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,499 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: doubles
+   |     L  3: mathops
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 10
+               |     |- name: d
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 10
+               |     |  |     |- name: d
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: double
+               |     |  |- operator: PLUS
+               |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: d
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: double
+               |     |- name: d2
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: d
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: double
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: d
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: double
+               |     |  |     |- name: d2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: double
+               |     |  |- operator: DIVISION
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: d3
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: d
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: double
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: d
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: double
+               |     |  |     |- name: d2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: double
+               |     |  |- operator: MULTIPLICATION
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: d4
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type UnaryPrefixNode)
+               |     |  |- operator: MINUS
+               |     |  L  Expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type InfixNode)
+               |     |        |  |- leftExpression (field of type VariableCallNode)
+               |     |        |  |  L  symbol (field of type Variable)
+               |     |        |  |     |- initialExpression (field of type ValueNode)
+               |     |        |  |     |  L  value: 10
+               |     |        |  |     |- name: d
+               |     |        |  |     L  type (field of type BuiltIn)
+               |     |        |  |        L  name: double
+               |     |        |  |- operator: PLUS
+               |     |        |  L  rightExpression (field of type VariableCallNode)
+               |     |        |     L  symbol (field of type Variable)
+               |     |        |        |- initialExpression (field of type ValueNode)
+               |     |        |        |  L  value: 10
+               |     |        |        |- name: d
+               |     |        |        L  type (field of type BuiltIn)
+               |     |        |           L  name: double
+               |     |        |- name: d2
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: double
+               |     |- name: d5
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: d
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: double
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: d
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: double
+               |     |  |     |- name: d2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: double
+               |     |  |- operator: MOD
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 10
+               |     |- name: d6
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 10
+               |     |  |     |- name: d
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: double
+               |     |  |- operator: MINUS
+               |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: d
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: double
+               |     |- name: d7
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 7 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d:
+               |- 8 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 10
+               |           |- name: d
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d2:
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 10
+               |           |  |     |- name: d
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: double
+               |           |  |- operator: PLUS
+               |           |  L  rightExpression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: d
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: double
+               |           |- name: d2
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d3:
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: d
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: double
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: d
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: double
+               |           |  |     |- name: d2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: double
+               |           |  |- operator: DIVISION
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: d3
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d4:
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: d
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: double
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: d
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: double
+               |           |  |     |- name: d2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: double
+               |           |  |- operator: MULTIPLICATION
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: d4
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d5:
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type UnaryPrefixNode)
+               |           |  |- operator: MINUS
+               |           |  L  Expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type InfixNode)
+               |           |        |  |- leftExpression (field of type VariableCallNode)
+               |           |        |  |  L  symbol (field of type Variable)
+               |           |        |  |     |- initialExpression (field of type ValueNode)
+               |           |        |  |     |  L  value: 10
+               |           |        |  |     |- name: d
+               |           |        |  |     L  type (field of type BuiltIn)
+               |           |        |  |        L  name: double
+               |           |        |  |- operator: PLUS
+               |           |        |  L  rightExpression (field of type VariableCallNode)
+               |           |        |     L  symbol (field of type Variable)
+               |           |        |        |- initialExpression (field of type ValueNode)
+               |           |        |        |  L  value: 10
+               |           |        |        |- name: d
+               |           |        |        L  type (field of type BuiltIn)
+               |           |        |           L  name: double
+               |           |        |- name: d2
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: double
+               |           |- name: d5
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d6:
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: d
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: double
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: d
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: double
+               |           |  |     |- name: d2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: double
+               |           |  |- operator: MOD
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 10
+               |           |- name: d6
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d7:
+               L  20 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type InfixNode)
+                           |  |- leftExpression (field of type VariableCallNode)
+                           |  |  L  symbol (field of type Variable)
+                           |  |     |- initialExpression (field of type ValueNode)
+                           |  |     |  L  value: 10
+                           |  |     |- name: d
+                           |  |     L  type (field of type BuiltIn)
+                           |  |        L  name: double
+                           |  |- operator: MINUS
+                           |  L  rightExpression (field of type VariableCallNode)
+                           |     L  symbol (field of type Variable)
+                           |        |- initialExpression (field of type ValueNode)
+                           |        |  L  value: 10
+                           |        |- name: d
+                           |        L  type (field of type BuiltIn)
+                           |           L  name: double
+                           |- name: d7
+                           L  type (field of type BuiltIn)
+                              L  name: double
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/floats/conversions/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/floats/conversions/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/floats/conversions/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/floats/conversions/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/floats/conversions/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,341 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: floats
+   |     L  3: conversions
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 10
+               |     |- name: f
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: double
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: f
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: float
+               |     |- name: d
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: long
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: f
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: float
+               |     |- name: l
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: int
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: f
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: float
+               |     |- name: i
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type VariableCallNode)
+               |     |  L  symbol (field of type Variable)
+               |     |     |- initialExpression (field of type ValueNode)
+               |     |     |  L  value: 10
+               |     |     |- name: f
+               |     |     L  type (field of type BuiltIn)
+               |     |        L  name: float
+               |     |- name: force_store
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type VariableCallNode)
+               |     |  L  symbol (field of type Variable)
+               |     |     |- initialExpression (field of type VariableCallNode)
+               |     |     |  L  symbol (field of type Variable)
+               |     |     |     |- initialExpression (field of type ValueNode)
+               |     |     |     |  L  value: 10
+               |     |     |     |- name: f
+               |     |     |     L  type (field of type BuiltIn)
+               |     |     |        L  name: float
+               |     |     |- name: force_store
+               |     |     L  type (field of type BuiltIn)
+               |     |        L  name: float
+               |     |- name: force_load
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 1
+               |     |- name: force_const
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 7 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f:
+               |- 8 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 10
+               |           |- name: f
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d:
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: double
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: f
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: float
+               |           |- name: d
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l:
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: long
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: f
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: float
+               |           |- name: l
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i:
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: int
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: f
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: float
+               |           |- name: i
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_load:
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type VariableCallNode)
+               |           |  L  symbol (field of type Variable)
+               |           |     |- initialExpression (field of type VariableCallNode)
+               |           |     |  L  symbol (field of type Variable)
+               |           |     |     |- initialExpression (field of type ValueNode)
+               |           |     |     |  L  value: 10
+               |           |     |     |- name: f
+               |           |     |     L  type (field of type BuiltIn)
+               |           |     |        L  name: float
+               |           |     |- name: force_store
+               |           |     L  type (field of type BuiltIn)
+               |           |        L  name: float
+               |           |- name: force_load
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_store:
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type VariableCallNode)
+               |           |  L  symbol (field of type Variable)
+               |           |     |- initialExpression (field of type ValueNode)
+               |           |     |  L  value: 10
+               |           |     |- name: f
+               |           |     L  type (field of type BuiltIn)
+               |           |        L  name: float
+               |           |- name: force_store
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_const:
+               L  20 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type ValueNode)
+                           |  L  value: 1
+                           |- name: force_const
+                           L  type (field of type BuiltIn)
+                              L  name: float
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/floats/mathops/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/floats/mathops/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/floats/mathops/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/floats/mathops/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/floats/mathops/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,499 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: floats
+   |     L  3: mathops
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 10
+               |     |- name: f
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 10
+               |     |  |     |- name: f
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: float
+               |     |  |- operator: PLUS
+               |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: f
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: float
+               |     |- name: f2
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: f
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: float
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: f
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: float
+               |     |  |     |- name: f2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: float
+               |     |  |- operator: DIVISION
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: f3
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: f
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: float
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: f
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: float
+               |     |  |     |- name: f2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: float
+               |     |  |- operator: MULTIPLICATION
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: f4
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type UnaryPrefixNode)
+               |     |  |- operator: MINUS
+               |     |  L  Expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type InfixNode)
+               |     |        |  |- leftExpression (field of type VariableCallNode)
+               |     |        |  |  L  symbol (field of type Variable)
+               |     |        |  |     |- initialExpression (field of type ValueNode)
+               |     |        |  |     |  L  value: 10
+               |     |        |  |     |- name: f
+               |     |        |  |     L  type (field of type BuiltIn)
+               |     |        |  |        L  name: float
+               |     |        |  |- operator: PLUS
+               |     |        |  L  rightExpression (field of type VariableCallNode)
+               |     |        |     L  symbol (field of type Variable)
+               |     |        |        |- initialExpression (field of type ValueNode)
+               |     |        |        |  L  value: 10
+               |     |        |        |- name: f
+               |     |        |        L  type (field of type BuiltIn)
+               |     |        |           L  name: float
+               |     |        |- name: f2
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: float
+               |     |- name: f5
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: f
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: float
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: f
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: float
+               |     |  |     |- name: f2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: float
+               |     |  |- operator: MOD
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 10
+               |     |- name: f6
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 10
+               |     |  |     |- name: f
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: float
+               |     |  |- operator: MINUS
+               |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: f
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: float
+               |     |- name: f7
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 7 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f:
+               |- 8 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 10
+               |           |- name: f
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f2:
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 10
+               |           |  |     |- name: f
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: float
+               |           |  |- operator: PLUS
+               |           |  L  rightExpression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: f
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: float
+               |           |- name: f2
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f3:
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: f
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: float
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: f
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: float
+               |           |  |     |- name: f2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: float
+               |           |  |- operator: DIVISION
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: f3
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f4:
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: f
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: float
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: f
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: float
+               |           |  |     |- name: f2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: float
+               |           |  |- operator: MULTIPLICATION
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: f4
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f5:
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type UnaryPrefixNode)
+               |           |  |- operator: MINUS
+               |           |  L  Expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type InfixNode)
+               |           |        |  |- leftExpression (field of type VariableCallNode)
+               |           |        |  |  L  symbol (field of type Variable)
+               |           |        |  |     |- initialExpression (field of type ValueNode)
+               |           |        |  |     |  L  value: 10
+               |           |        |  |     |- name: f
+               |           |        |  |     L  type (field of type BuiltIn)
+               |           |        |  |        L  name: float
+               |           |        |  |- operator: PLUS
+               |           |        |  L  rightExpression (field of type VariableCallNode)
+               |           |        |     L  symbol (field of type Variable)
+               |           |        |        |- initialExpression (field of type ValueNode)
+               |           |        |        |  L  value: 10
+               |           |        |        |- name: f
+               |           |        |        L  type (field of type BuiltIn)
+               |           |        |           L  name: float
+               |           |        |- name: f2
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: float
+               |           |- name: f5
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f6:
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: f
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: float
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: f
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: float
+               |           |  |     |- name: f2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: float
+               |           |  |- operator: MOD
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 10
+               |           |- name: f6
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f7:
+               L  20 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type InfixNode)
+                           |  |- leftExpression (field of type VariableCallNode)
+                           |  |  L  symbol (field of type Variable)
+                           |  |     |- initialExpression (field of type ValueNode)
+                           |  |     |  L  value: 10
+                           |  |     |- name: f
+                           |  |     L  type (field of type BuiltIn)
+                           |  |        L  name: float
+                           |  |- operator: MINUS
+                           |  L  rightExpression (field of type VariableCallNode)
+                           |     L  symbol (field of type Variable)
+                           |        |- initialExpression (field of type ValueNode)
+                           |        |  L  value: 10
+                           |        |- name: f
+                           |        L  type (field of type BuiltIn)
+                           |           L  name: float
+                           |- name: f7
+                           L  type (field of type BuiltIn)
+                              L  name: float
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,417 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: ints
+   |     L  3: conversions
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 10
+               |     |- name: i
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: byte
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: i
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: b
+               |     L  type (field of type BuiltIn)
+               |        L  name: byte
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: char
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: i
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: c
+               |     L  type (field of type BuiltIn)
+               |        L  name: char
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: double
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: i
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: d
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: float
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: i
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: f
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: long
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: i
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: l
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: short
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: i
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: s
+               |     L  type (field of type BuiltIn)
+               |        L  name: short
+               |- 7 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type VariableCallNode)
+               |     |  L  symbol (field of type Variable)
+               |     |     |- initialExpression (field of type CastNode)
+               |     |     |  |- type (field of type BuiltIn)
+               |     |     |  |  L  name: short
+               |     |     |  L  expression (field of type VariableCallNode)
+               |     |     |     L  symbol (field of type Variable)
+               |     |     |        |- initialExpression (field of type ValueNode)
+               |     |     |        |  L  value: 10
+               |     |     |        |- name: i
+               |     |     |        L  type (field of type BuiltIn)
+               |     |     |           L  name: int
+               |     |     |- name: s
+               |     |     L  type (field of type BuiltIn)
+               |     |        L  name: short
+               |     |- name: force_load
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 8 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i:
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 10
+               |           |- name: i
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: b:
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: byte
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: i
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: int
+               |           |- name: b
+               |           L  type (field of type BuiltIn)
+               |              L  name: byte
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: c:
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: char
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: i
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: int
+               |           |- name: c
+               |           L  type (field of type BuiltIn)
+               |              L  name: char
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d:
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: double
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: i
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: int
+               |           |- name: d
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f:
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: float
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: i
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: int
+               |           |- name: f
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l:
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: long
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: i
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: int
+               |           |- name: l
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 20 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: s:
+               |- 21 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: short
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: i
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: int
+               |           |- name: s
+               |           L  type (field of type BuiltIn)
+               |              L  name: short
+               |- 22 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_load:
+               L  23 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type VariableCallNode)
+                           |  L  symbol (field of type Variable)
+                           |     |- initialExpression (field of type CastNode)
+                           |     |  |- type (field of type BuiltIn)
+                           |     |  |  L  name: short
+                           |     |  L  expression (field of type VariableCallNode)
+                           |     |     L  symbol (field of type Variable)
+                           |     |        |- initialExpression (field of type ValueNode)
+                           |     |        |  L  value: 10
+                           |     |        |- name: i
+                           |     |        L  type (field of type BuiltIn)
+                           |     |           L  name: int
+                           |     |- name: s
+                           |     L  type (field of type BuiltIn)
+                           |        L  name: short
+                           |- name: force_load
+                           L  type (field of type BuiltIn)
+                              L  name: int
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,428 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: ints
+   |     L  3: logicops
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 4
+               |     |- name: i
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 8
+               |     |- name: eight
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 257
+               |     |- name: sipush
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 4
+               |     |  |     |- name: i
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- comparisonOperator: BAND
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: i2
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 4
+               |     |  |     |- name: i
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- comparisonOperator: BOR
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: i3
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 8
+               |     |  |     |- name: eight
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- comparisonOperator: BIT_SHIFT_L
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 1
+               |     |- name: i4
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 8
+               |     |  |     |- name: eight
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- comparisonOperator: BIT_SHIFT_R
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 1
+               |     |- name: i5
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 7 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 8
+               |     |  |     |- name: eight
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- comparisonOperator: LOGICAL_SHIFT_R
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 1
+               |     |- name: i6
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 8 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ComparisonNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 4
+               |     |  |     |  |     |- name: i
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: int
+               |     |  |     |  |- comparisonOperator: BAND
+               |     |  |     |  L  rightExpression (field of type ValueNode)
+               |     |  |     |     L  value: 2
+               |     |  |     |- name: i2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- comparisonOperator: BXOR
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: i7
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i:
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 4
+               |           |- name: i
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: eight:
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 8
+               |           |- name: eight
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i2:
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 4
+               |           |  |     |- name: i
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- comparisonOperator: BAND
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: i2
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i3:
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 4
+               |           |  |     |- name: i
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- comparisonOperator: BOR
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: i3
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i4:
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 8
+               |           |  |     |- name: eight
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- comparisonOperator: BIT_SHIFT_L
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 1
+               |           |- name: i4
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i5:
+               |- 20 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 8
+               |           |  |     |- name: eight
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- comparisonOperator: BIT_SHIFT_R
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 1
+               |           |- name: i5
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 21 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i6:
+               |- 22 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 8
+               |           |  |     |- name: eight
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- comparisonOperator: LOGICAL_SHIFT_R
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 1
+               |           |- name: i6
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 23 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i7:
+               L  24 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type ComparisonNode)
+                           |  |- leftExpression (field of type VariableCallNode)
+                           |  |  L  symbol (field of type Variable)
+                           |  |     |- initialExpression (field of type ComparisonNode)
+                           |  |     |  |- leftExpression (field of type VariableCallNode)
+                           |  |     |  |  L  symbol (field of type Variable)
+                           |  |     |  |     |- initialExpression (field of type ValueNode)
+                           |  |     |  |     |  L  value: 4
+                           |  |     |  |     |- name: i
+                           |  |     |  |     L  type (field of type BuiltIn)
+                           |  |     |  |        L  name: int
+                           |  |     |  |- comparisonOperator: BAND
+                           |  |     |  L  rightExpression (field of type ValueNode)
+                           |  |     |     L  value: 2
+                           |  |     |- name: i2
+                           |  |     L  type (field of type BuiltIn)
+                           |  |        L  name: int
+                           |  |- comparisonOperator: BXOR
+                           |  L  rightExpression (field of type ValueNode)
+                           |     L  value: 2
+                           |- name: i7
+                           L  type (field of type BuiltIn)
+                              L  name: int
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,597 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: ints
+   |     L  3: mathops
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 10
+               |     |- name: i
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 10
+               |     |  |     |- name: i
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- operator: PLUS
+               |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: i
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: i2
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: i
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: int
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: i
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: int
+               |     |  |     |- name: i2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- operator: DIVISION
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: i3
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type VariableCallNode)
+               |     |  L  symbol (field of type Variable)
+               |     |     |- initialExpression (field of type InfixNode)
+               |     |     |  |- leftExpression (field of type VariableCallNode)
+               |     |     |  |  L  symbol (field of type Variable)
+               |     |     |  |     |- initialExpression (field of type ValueNode)
+               |     |     |  |     |  L  value: 10
+               |     |     |  |     |- name: i
+               |     |     |  |     L  type (field of type BuiltIn)
+               |     |     |  |        L  name: int
+               |     |     |  |- operator: PLUS
+               |     |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     |     L  symbol (field of type Variable)
+               |     |     |        |- initialExpression (field of type ValueNode)
+               |     |     |        |  L  value: 10
+               |     |     |        |- name: i
+               |     |     |        L  type (field of type BuiltIn)
+               |     |     |           L  name: int
+               |     |     |- name: i2
+               |     |     L  type (field of type BuiltIn)
+               |     |        L  name: int
+               |     |- name: i4
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 4 (field of type UnarySuffixNode)
+               |  |- operator: INC
+               |  L  Expression (field of type VariableCallNode)
+               |     L  symbol (field of type Variable)
+               |        |- initialExpression (field of type VariableCallNode)
+               |        |  L  symbol (field of type Variable)
+               |        |     |- initialExpression (field of type InfixNode)
+               |        |     |  |- leftExpression (field of type VariableCallNode)
+               |        |     |  |  L  symbol (field of type Variable)
+               |        |     |  |     |- initialExpression (field of type ValueNode)
+               |        |     |  |     |  L  value: 10
+               |        |     |  |     |- name: i
+               |        |     |  |     L  type (field of type BuiltIn)
+               |        |     |  |        L  name: int
+               |        |     |  |- operator: PLUS
+               |        |     |  L  rightExpression (field of type VariableCallNode)
+               |        |     |     L  symbol (field of type Variable)
+               |        |     |        |- initialExpression (field of type ValueNode)
+               |        |     |        |  L  value: 10
+               |        |     |        |- name: i
+               |        |     |        L  type (field of type BuiltIn)
+               |        |     |           L  name: int
+               |        |     |- name: i2
+               |        |     L  type (field of type BuiltIn)
+               |        |        L  name: int
+               |        |- name: i4
+               |        L  type (field of type BuiltIn)
+               |           L  name: int
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: i
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: int
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: i
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: int
+               |     |  |     |- name: i2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- operator: MULTIPLICATION
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: i5
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type UnaryPrefixNode)
+               |     |  |- operator: MINUS
+               |     |  L  Expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type InfixNode)
+               |     |        |  |- leftExpression (field of type VariableCallNode)
+               |     |        |  |  L  symbol (field of type Variable)
+               |     |        |  |     |- initialExpression (field of type ValueNode)
+               |     |        |  |     |  L  value: 10
+               |     |        |  |     |- name: i
+               |     |        |  |     L  type (field of type BuiltIn)
+               |     |        |  |        L  name: int
+               |     |        |  |- operator: PLUS
+               |     |        |  L  rightExpression (field of type VariableCallNode)
+               |     |        |     L  symbol (field of type Variable)
+               |     |        |        |- initialExpression (field of type ValueNode)
+               |     |        |        |  L  value: 10
+               |     |        |        |- name: i
+               |     |        |        L  type (field of type BuiltIn)
+               |     |        |           L  name: int
+               |     |        |- name: i2
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: i6
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 7 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: i
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: int
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: i
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: int
+               |     |  |     |- name: i2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- operator: MOD
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 10
+               |     |- name: i7
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 8 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 10
+               |     |  |     |- name: i
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: int
+               |     |  |- operator: MINUS
+               |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: i
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: int
+               |     |- name: i8
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i:
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 10
+               |           |- name: i
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i2:
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 10
+               |           |  |     |- name: i
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- operator: PLUS
+               |           |  L  rightExpression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: i
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: int
+               |           |- name: i2
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i3:
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: i
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: int
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: i
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: int
+               |           |  |     |- name: i2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- operator: DIVISION
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: i3
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i4:
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type VariableCallNode)
+               |           |  L  symbol (field of type Variable)
+               |           |     |- initialExpression (field of type InfixNode)
+               |           |     |  |- leftExpression (field of type VariableCallNode)
+               |           |     |  |  L  symbol (field of type Variable)
+               |           |     |  |     |- initialExpression (field of type ValueNode)
+               |           |     |  |     |  L  value: 10
+               |           |     |  |     |- name: i
+               |           |     |  |     L  type (field of type BuiltIn)
+               |           |     |  |        L  name: int
+               |           |     |  |- operator: PLUS
+               |           |     |  L  rightExpression (field of type VariableCallNode)
+               |           |     |     L  symbol (field of type Variable)
+               |           |     |        |- initialExpression (field of type ValueNode)
+               |           |     |        |  L  value: 10
+               |           |     |        |- name: i
+               |           |     |        L  type (field of type BuiltIn)
+               |           |     |           L  name: int
+               |           |     |- name: i2
+               |           |     L  type (field of type BuiltIn)
+               |           |        L  name: int
+               |           |- name: i4
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i5:
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: i
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: int
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: i
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: int
+               |           |  |     |- name: i2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- operator: MULTIPLICATION
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: i5
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i6:
+               |- 20 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type UnaryPrefixNode)
+               |           |  |- operator: MINUS
+               |           |  L  Expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type InfixNode)
+               |           |        |  |- leftExpression (field of type VariableCallNode)
+               |           |        |  |  L  symbol (field of type Variable)
+               |           |        |  |     |- initialExpression (field of type ValueNode)
+               |           |        |  |     |  L  value: 10
+               |           |        |  |     |- name: i
+               |           |        |  |     L  type (field of type BuiltIn)
+               |           |        |  |        L  name: int
+               |           |        |  |- operator: PLUS
+               |           |        |  L  rightExpression (field of type VariableCallNode)
+               |           |        |     L  symbol (field of type Variable)
+               |           |        |        |- initialExpression (field of type ValueNode)
+               |           |        |        |  L  value: 10
+               |           |        |        |- name: i
+               |           |        |        L  type (field of type BuiltIn)
+               |           |        |           L  name: int
+               |           |        |- name: i2
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: int
+               |           |- name: i6
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 21 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i7:
+               |- 22 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: i
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: int
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: i
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: int
+               |           |  |     |- name: i2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: int
+               |           |  |- operator: MOD
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 10
+               |           |- name: i7
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 23 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i8:
+               L  24 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type InfixNode)
+                           |  |- leftExpression (field of type VariableCallNode)
+                           |  |  L  symbol (field of type Variable)
+                           |  |     |- initialExpression (field of type ValueNode)
+                           |  |     |  L  value: 10
+                           |  |     |- name: i
+                           |  |     L  type (field of type BuiltIn)
+                           |  |        L  name: int
+                           |  |- operator: MINUS
+                           |  L  rightExpression (field of type VariableCallNode)
+                           |     L  symbol (field of type Variable)
+                           |        |- initialExpression (field of type ValueNode)
+                           |        |  L  value: 10
+                           |        |- name: i
+                           |        L  type (field of type BuiltIn)
+                           |           L  name: int
+                           |- name: i8
+                           L  type (field of type BuiltIn)
+                              L  name: int
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,341 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: longs
+   |     L  3: conversions
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 10
+               |     |- name: l
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: double
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: l
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: long
+               |     |- name: d
+               |     L  type (field of type BuiltIn)
+               |        L  name: double
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: float
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: l
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: long
+               |     |- name: f
+               |     L  type (field of type BuiltIn)
+               |        L  name: float
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: int
+               |     |  L  expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: l
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: long
+               |     |- name: i
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type VariableCallNode)
+               |     |  L  symbol (field of type Variable)
+               |     |     |- initialExpression (field of type ValueNode)
+               |     |     |  L  value: 10
+               |     |     |- name: l
+               |     |     L  type (field of type BuiltIn)
+               |     |        L  name: long
+               |     |- name: force_store
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type VariableCallNode)
+               |     |  L  symbol (field of type Variable)
+               |     |     |- initialExpression (field of type VariableCallNode)
+               |     |     |  L  symbol (field of type Variable)
+               |     |     |     |- initialExpression (field of type ValueNode)
+               |     |     |     |  L  value: 10
+               |     |     |     |- name: l
+               |     |     |     L  type (field of type BuiltIn)
+               |     |     |        L  name: long
+               |     |     |- name: force_store
+               |     |     L  type (field of type BuiltIn)
+               |     |        L  name: long
+               |     |- name: force_load
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 1
+               |     |- name: force_const
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 7 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l:
+               |- 8 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 10
+               |           |- name: l
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: d:
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: double
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: l
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: long
+               |           |- name: d
+               |           L  type (field of type BuiltIn)
+               |              L  name: double
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: f:
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: float
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: l
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: long
+               |           |- name: f
+               |           L  type (field of type BuiltIn)
+               |              L  name: float
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: i:
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type CastNode)
+               |           |  |- type (field of type BuiltIn)
+               |           |  |  L  name: int
+               |           |  L  expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: l
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: long
+               |           |- name: i
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_load:
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type VariableCallNode)
+               |           |  L  symbol (field of type Variable)
+               |           |     |- initialExpression (field of type VariableCallNode)
+               |           |     |  L  symbol (field of type Variable)
+               |           |     |     |- initialExpression (field of type ValueNode)
+               |           |     |     |  L  value: 10
+               |           |     |     |- name: l
+               |           |     |     L  type (field of type BuiltIn)
+               |           |     |        L  name: long
+               |           |     |- name: force_store
+               |           |     L  type (field of type BuiltIn)
+               |           |        L  name: long
+               |           |- name: force_load
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_store:
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type VariableCallNode)
+               |           |  L  symbol (field of type Variable)
+               |           |     |- initialExpression (field of type ValueNode)
+               |           |     |  L  value: 10
+               |           |     |- name: l
+               |           |     L  type (field of type BuiltIn)
+               |           |        L  name: long
+               |           |- name: force_store
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: force_const:
+               L  20 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type ValueNode)
+                           |  L  value: 1
+                           |- name: force_const
+                           L  type (field of type BuiltIn)
+                              L  name: long
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,421 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: longs
+   |     L  3: logicops
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 4
+               |     |- name: l
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 8
+               |     |- name: eight
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 4
+               |     |  |     |- name: l
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- comparisonOperator: BAND
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: l2
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 4
+               |     |  |     |- name: l
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- comparisonOperator: BOR
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: l3
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 8
+               |     |  |     |- name: eight
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- comparisonOperator: BIT_SHIFT_L
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 1
+               |     |- name: l4
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 8
+               |     |  |     |- name: eight
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- comparisonOperator: BIT_SHIFT_R
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 1
+               |     |- name: l5
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 8
+               |     |  |     |- name: eight
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- comparisonOperator: LOGICAL_SHIFT_R
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 1
+               |     |- name: l6
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 7 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ComparisonNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ComparisonNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 4
+               |     |  |     |  |     |- name: l
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: long
+               |     |  |     |  |- comparisonOperator: BAND
+               |     |  |     |  L  rightExpression (field of type ValueNode)
+               |     |  |     |     L  value: 2
+               |     |  |     |- name: l2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- comparisonOperator: BXOR
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: l7
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 8 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l:
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 4
+               |           |- name: l
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: eight:
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 8
+               |           |- name: eight
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l2:
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 4
+               |           |  |     |- name: l
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- comparisonOperator: BAND
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: l2
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l3:
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 4
+               |           |  |     |- name: l
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- comparisonOperator: BOR
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: l3
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l4:
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 8
+               |           |  |     |- name: eight
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- comparisonOperator: BIT_SHIFT_L
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 1
+               |           |- name: l4
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l5:
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 8
+               |           |  |     |- name: eight
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- comparisonOperator: BIT_SHIFT_R
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 1
+               |           |- name: l5
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 20 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l6:
+               |- 21 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ComparisonNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 8
+               |           |  |     |- name: eight
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- comparisonOperator: LOGICAL_SHIFT_R
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 1
+               |           |- name: l6
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 22 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l7:
+               L  23 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type ComparisonNode)
+                           |  |- leftExpression (field of type VariableCallNode)
+                           |  |  L  symbol (field of type Variable)
+                           |  |     |- initialExpression (field of type ComparisonNode)
+                           |  |     |  |- leftExpression (field of type VariableCallNode)
+                           |  |     |  |  L  symbol (field of type Variable)
+                           |  |     |  |     |- initialExpression (field of type ValueNode)
+                           |  |     |  |     |  L  value: 4
+                           |  |     |  |     |- name: l
+                           |  |     |  |     L  type (field of type BuiltIn)
+                           |  |     |  |        L  name: long
+                           |  |     |  |- comparisonOperator: BAND
+                           |  |     |  L  rightExpression (field of type ValueNode)
+                           |  |     |     L  value: 2
+                           |  |     |- name: l2
+                           |  |     L  type (field of type BuiltIn)
+                           |  |        L  name: long
+                           |  |- comparisonOperator: BXOR
+                           |  L  rightExpression (field of type ValueNode)
+                           |     L  value: 2
+                           |- name: l7
+                           L  type (field of type BuiltIn)
+                              L  name: long
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/AST.txt	(revision ec324078fdfcfb9bee1aedfd75a852361c86d603)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,499 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: primitive
+   |     |- 2: longs
+   |     L  3: mathops
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 10
+               |     |- name: l
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 10
+               |     |  |     |- name: l
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- operator: PLUS
+               |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: l
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: long
+               |     |- name: l2
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: l
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: long
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: l
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: long
+               |     |  |     |- name: l2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- operator: DIVISION
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: l3
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 3 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: l
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: long
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: l
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: long
+               |     |  |     |- name: l2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- operator: MULTIPLICATION
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 2
+               |     |- name: l4
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type UnaryPrefixNode)
+               |     |  |- operator: MINUS
+               |     |  L  Expression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type InfixNode)
+               |     |        |  |- leftExpression (field of type VariableCallNode)
+               |     |        |  |  L  symbol (field of type Variable)
+               |     |        |  |     |- initialExpression (field of type ValueNode)
+               |     |        |  |     |  L  value: 10
+               |     |        |  |     |- name: l
+               |     |        |  |     L  type (field of type BuiltIn)
+               |     |        |  |        L  name: long
+               |     |        |  |- operator: PLUS
+               |     |        |  L  rightExpression (field of type VariableCallNode)
+               |     |        |     L  symbol (field of type Variable)
+               |     |        |        |- initialExpression (field of type ValueNode)
+               |     |        |        |  L  value: 10
+               |     |        |        |- name: l
+               |     |        |        L  type (field of type BuiltIn)
+               |     |        |           L  name: long
+               |     |        |- name: l2
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: long
+               |     |- name: l5
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type InfixNode)
+               |     |  |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |     |  |  L  symbol (field of type Variable)
+               |     |  |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  |     |  L  value: 10
+               |     |  |     |  |     |- name: l
+               |     |  |     |  |     L  type (field of type BuiltIn)
+               |     |  |     |  |        L  name: long
+               |     |  |     |  |- operator: PLUS
+               |     |  |     |  L  rightExpression (field of type VariableCallNode)
+               |     |  |     |     L  symbol (field of type Variable)
+               |     |  |     |        |- initialExpression (field of type ValueNode)
+               |     |  |     |        |  L  value: 10
+               |     |  |     |        |- name: l
+               |     |  |     |        L  type (field of type BuiltIn)
+               |     |  |     |           L  name: long
+               |     |  |     |- name: l2
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- operator: MOD
+               |     |  L  rightExpression (field of type ValueNode)
+               |     |     L  value: 10
+               |     |- name: l6
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type InfixNode)
+               |     |  |- leftExpression (field of type VariableCallNode)
+               |     |  |  L  symbol (field of type Variable)
+               |     |  |     |- initialExpression (field of type ValueNode)
+               |     |  |     |  L  value: 10
+               |     |  |     |- name: l
+               |     |  |     L  type (field of type BuiltIn)
+               |     |  |        L  name: long
+               |     |  |- operator: MINUS
+               |     |  L  rightExpression (field of type VariableCallNode)
+               |     |     L  symbol (field of type Variable)
+               |     |        |- initialExpression (field of type ValueNode)
+               |     |        |  L  value: 10
+               |     |        |- name: l
+               |     |        L  type (field of type BuiltIn)
+               |     |           L  name: long
+               |     |- name: l7
+               |     L  type (field of type BuiltIn)
+               |        L  name: long
+               |- 7 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l:
+               |- 8 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 10
+               |           |- name: l
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 9 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l2:
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  L  value: 10
+               |           |  |     |- name: l
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- operator: PLUS
+               |           |  L  rightExpression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type ValueNode)
+               |           |        |  L  value: 10
+               |           |        |- name: l
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: long
+               |           |- name: l2
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 11 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l3:
+               |- 12 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: l
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: long
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: l
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: long
+               |           |  |     |- name: l2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- operator: DIVISION
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: l3
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 13 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l4:
+               |- 14 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: l
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: long
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: l
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: long
+               |           |  |     |- name: l2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- operator: MULTIPLICATION
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 2
+               |           |- name: l4
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 15 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l5:
+               |- 16 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type UnaryPrefixNode)
+               |           |  |- operator: MINUS
+               |           |  L  Expression (field of type VariableCallNode)
+               |           |     L  symbol (field of type Variable)
+               |           |        |- initialExpression (field of type InfixNode)
+               |           |        |  |- leftExpression (field of type VariableCallNode)
+               |           |        |  |  L  symbol (field of type Variable)
+               |           |        |  |     |- initialExpression (field of type ValueNode)
+               |           |        |  |     |  L  value: 10
+               |           |        |  |     |- name: l
+               |           |        |  |     L  type (field of type BuiltIn)
+               |           |        |  |        L  name: long
+               |           |        |  |- operator: PLUS
+               |           |        |  L  rightExpression (field of type VariableCallNode)
+               |           |        |     L  symbol (field of type Variable)
+               |           |        |        |- initialExpression (field of type ValueNode)
+               |           |        |        |  L  value: 10
+               |           |        |        |- name: l
+               |           |        |        L  type (field of type BuiltIn)
+               |           |        |           L  name: long
+               |           |        |- name: l2
+               |           |        L  type (field of type BuiltIn)
+               |           |           L  name: long
+               |           |- name: l5
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 17 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l6:
+               |- 18 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type InfixNode)
+               |           |  |- leftExpression (field of type VariableCallNode)
+               |           |  |  L  symbol (field of type Variable)
+               |           |  |     |- initialExpression (field of type InfixNode)
+               |           |  |     |  |- leftExpression (field of type VariableCallNode)
+               |           |  |     |  |  L  symbol (field of type Variable)
+               |           |  |     |  |     |- initialExpression (field of type ValueNode)
+               |           |  |     |  |     |  L  value: 10
+               |           |  |     |  |     |- name: l
+               |           |  |     |  |     L  type (field of type BuiltIn)
+               |           |  |     |  |        L  name: long
+               |           |  |     |  |- operator: PLUS
+               |           |  |     |  L  rightExpression (field of type VariableCallNode)
+               |           |  |     |     L  symbol (field of type Variable)
+               |           |  |     |        |- initialExpression (field of type ValueNode)
+               |           |  |     |        |  L  value: 10
+               |           |  |     |        |- name: l
+               |           |  |     |        L  type (field of type BuiltIn)
+               |           |  |     |           L  name: long
+               |           |  |     |- name: l2
+               |           |  |     L  type (field of type BuiltIn)
+               |           |  |        L  name: long
+               |           |  |- operator: MOD
+               |           |  L  rightExpression (field of type ValueNode)
+               |           |     L  value: 10
+               |           |- name: l6
+               |           L  type (field of type BuiltIn)
+               |              L  name: long
+               |- 19 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: l7:
+               L  20 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression (field of type InfixNode)
+                           |  |- leftExpression (field of type VariableCallNode)
+                           |  |  L  symbol (field of type Variable)
+                           |  |     |- initialExpression (field of type ValueNode)
+                           |  |     |  L  value: 10
+                           |  |     |- name: l
+                           |  |     L  type (field of type BuiltIn)
+                           |  |        L  name: long
+                           |  |- operator: MINUS
+                           |  L  rightExpression (field of type VariableCallNode)
+                           |     L  symbol (field of type Variable)
+                           |        |- initialExpression (field of type ValueNode)
+                           |        |  L  value: 10
+                           |        |- name: l
+                           |        L  type (field of type BuiltIn)
+                           |           L  name: long
+                           |- name: l7
+                           L  type (field of type BuiltIn)
+                              L  name: long
\ No newline at end of file
Index: src/main/kotlin/org/cmjava2023/ConstantPoolToByteList.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/org/cmjava2023/ConstantPoolToByteList.kt b/src/main/kotlin/org/cmjava2023/ConstantPoolToByteList.kt
--- a/src/main/kotlin/org/cmjava2023/ConstantPoolToByteList.kt	(revision 673b8e98988417b38015be588a7e08dda2a1f4ed)
+++ b/src/main/kotlin/org/cmjava2023/ConstantPoolToByteList.kt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -260,6 +260,7 @@
             is OpCode.LoadLong -> transformLoadLong(opCode, localVariables)
             is OpCode.LoadFloat -> transformLoadFloat(opCode, localVariables)
             is OpCode.LoadDouble -> transformLoadDouble(opCode, localVariables)
+            is OpCode.IncreaseInt -> OpCode.Iinc(getNumberOfVariable(localVariables, opCode.variableSymbol), opCode.byteToIncreaseBy)
             else -> throw NotImplementedError(opCode.javaClass.name)
         }
 
Index: src/main/kotlin/org/cmjava2023/classfilespecification/OpCode.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/org/cmjava2023/classfilespecification/OpCode.kt b/src/main/kotlin/org/cmjava2023/classfilespecification/OpCode.kt
--- a/src/main/kotlin/org/cmjava2023/classfilespecification/OpCode.kt	(revision 673b8e98988417b38015be588a7e08dda2a1f4ed)
+++ b/src/main/kotlin/org/cmjava2023/classfilespecification/OpCode.kt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -248,6 +248,8 @@
     class LoadLong(val variableSymbol: Variable): MultiplePossibleOpcode()
     class LoadFloat(val variableSymbol: Variable): MultiplePossibleOpcode()
     class LoadDouble(val variableSymbol: Variable): MultiplePossibleOpcode()
+    
+    class IncreaseInt(val variableSymbol: Variable, val byteToIncreaseBy: Byte): MultiplePossibleOpcode()
 
     interface ReturnAnything
 
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/ClassFileContent.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/ClassFileContent.json b/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/ClassFileContent.json
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/ClassFileContent.json	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,19 @@
+{
+  "classAccessModifierHex" : "0021",
+  "thisClass" : "Class cmjava2023/primitive/ints/conversions/Main",
+  "superClass" : "Class java/lang/Object",
+  "methodDescriptions" : [
+    {
+      "accessModifierHex" : "0009",
+      "name" : "main",
+      "typeDescriptor" : "([Ljava/lang/String;)V",
+      "code" : null
+    },
+    {
+      "accessModifierHex" : "0001",
+      "name" : "<init>",
+      "typeDescriptor" : "()V",
+      "code" : "Aload_0: \nInvokespecial: 'Methodref java/lang/Object.<init>:()V', \nReturn:"
+    }
+  ]
+}
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/ClassFileModel.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/ClassFileModel.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/ClassFileModel.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/ClassFileModel.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,1466 @@
+root (field of type ClassfileModel)
+|- packageNameWithDelimiterForClassFile: cmjava2023/primitive/ints/conversions
+|- constantPool
+|  |- 0 (field of type ClassConstantInfo)
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: cmjava2023/primitive/ints/conversions/Main
+|  |  |  |- utf8encodedName: cmjava2023/primitive/ints/conversions/Main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  tag: CONSTANT_Class
+|  L  1 (field of type ClassConstantInfo)
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: java/lang/Object
+|     |  |- utf8encodedName: java/lang/Object
+|     |  L  tag: CONSTANT_Utf8
+|     L  tag: CONSTANT_Class
+|- classClassAccessModifiers
+|  |- 0: ACC_PUBLIC
+|  L  1: ACC_SUPER
+|- constantPoolIndex: 0
+|- numberOfInterfaces: 0
+|- interfaceDefinitions
+|- numberOfFields: 0
+|- fieldDefinitions
+|- methodDefinitions
+|  |- 0 (field of type MethodInfo)
+|  |  |- accessModifiers
+|  |  |  |- 0: ACC_PUBLIC
+|  |  |  L  1: ACC_STATIC
+|  |  |- attributes
+|  |  |  L  0 (field of type CodeAttributeInfo)
+|  |  |     |- code
+|  |  |     |  |- 0 (field of type IntConstant)
+|  |  |     |  |  |- int: 10
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 1 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 2 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 3 (field of type I2b)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -111
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 4 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: byte
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: b
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: byte
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 5 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 6 (field of type I2c)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -110
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 7 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: char
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: c
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: char
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 8 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 9 (field of type I2d)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -121
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 10 (field of type StoreDouble)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: double
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: d
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: double
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 11 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 12 (field of type I2f)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -122
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 13 (field of type StoreFloat)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: float
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: f
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: float
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 14 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 15 (field of type I2l)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -123
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 16 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: long
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 17 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 18 (field of type I2s)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -109
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 19 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: short
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: s
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: short
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 20 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: short
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: s
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: short
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 21 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |     |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |     |  |  L  name: short
+|  |  |     |  |  |  |     |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |     |- name: s
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: short
+|  |  |     |  |  |  |- name: force_load
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 22 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 23 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i:
+|  |  |     |  |  |  |  |- utf8encodedName: i:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i:
+|  |  |     |  |  |     |  |- utf8encodedName: i:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 24 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 25 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 26 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 27 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 28 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 29 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: b:
+|  |  |     |  |  |  |  |- utf8encodedName: b:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: b:
+|  |  |     |  |  |     |  |- utf8encodedName: b:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 30 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 31 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 32 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: byte
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: b
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: byte
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 33 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 34 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 35 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: c:
+|  |  |     |  |  |  |  |- utf8encodedName: c:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: c:
+|  |  |     |  |  |     |  |- utf8encodedName: c:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 36 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 37 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 38 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: char
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: c
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: char
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 39 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (C)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (C)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 40 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 41 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: d:
+|  |  |     |  |  |  |  |- utf8encodedName: d:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: d:
+|  |  |     |  |  |     |  |- utf8encodedName: d:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 42 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 43 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 44 (field of type LoadDouble)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: double
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: d
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: double
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 45 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (D)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (D)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 46 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 47 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: f:
+|  |  |     |  |  |  |  |- utf8encodedName: f:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: f:
+|  |  |     |  |  |     |  |- utf8encodedName: f:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 48 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 49 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 50 (field of type LoadFloat)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: float
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: f
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: float
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 51 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (F)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (F)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 52 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 53 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l:
+|  |  |     |  |  |  |  |- utf8encodedName: l:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l:
+|  |  |     |  |  |     |  |- utf8encodedName: l:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 54 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 55 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 56 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: long
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 57 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 58 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 59 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: s:
+|  |  |     |  |  |  |  |- utf8encodedName: s:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: s:
+|  |  |     |  |  |     |  |- utf8encodedName: s:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 60 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 61 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 62 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: short
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: s
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: short
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 63 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 64 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 65 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: force_load:
+|  |  |     |  |  |  |  |- utf8encodedName: force_load:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: force_load:
+|  |  |     |  |  |     |  |- utf8encodedName: force_load:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 66 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 67 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 68 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |     |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |     |  |  L  name: short
+|  |  |     |  |  |  |     |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |     |- name: s
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: short
+|  |  |     |  |  |  |- name: force_load
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 69 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  L  70 (field of type Return)
+|  |  |     |     |- Companion (field of type Companion)
+|  |  |     |     |- values
+|  |  |     |     |- opCodeValue: -79
+|  |  |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     L  name (field of type Utf8ConstantInfo)
+|  |  |        |- content: Code
+|  |  |        |- utf8encodedName: Code
+|  |  |        L  tag: CONSTANT_Utf8
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: main
+|  |  |  |- utf8encodedName: main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  typeDescriptor (field of type Utf8ConstantInfo)
+|  |     |- content: ([Ljava/lang/String;)V
+|  |     |- utf8encodedName: ([Ljava/lang/String;)V
+|  |     L  tag: CONSTANT_Utf8
+|  L  1 (field of type MethodInfo)
+|     |- accessModifiers
+|     |  L  0: ACC_PUBLIC
+|     |- attributes
+|     |  L  0 (field of type CodeAttributeInfo)
+|     |     |- code
+|     |     |  |- 0 (field of type Aload_0)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |- opCodeValue: 42
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  |- 1 (field of type Invokespecial)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|     |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: java/lang/Object
+|     |     |  |  |     |  |  |- utf8encodedName: java/lang/Object
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_Class
+|     |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: <init>
+|     |     |  |  |     |  |  |- utf8encodedName: <init>
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: ()V
+|     |     |  |  |     |  |  |- utf8encodedName: ()V
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|     |     |  |  |     L  tag: CONSTANT_Methodref
+|     |     |  |  |- opCodeValue: -73
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  L  2 (field of type Return)
+|     |     |     |- Companion (field of type Companion)
+|     |     |     |- values
+|     |     |     |- opCodeValue: -79
+|     |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     L  name (field of type Utf8ConstantInfo)
+|     |        |- content: Code
+|     |        |- utf8encodedName: Code
+|     |        L  tag: CONSTANT_Utf8
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: <init>
+|     |  |- utf8encodedName: <init>
+|     |  L  tag: CONSTANT_Utf8
+|     L  typeDescriptor (field of type Utf8ConstantInfo)
+|        |- content: ()V
+|        |- utf8encodedName: ()V
+|        L  tag: CONSTANT_Utf8
+|- attributesCount: 0
+L  attributeDefinitions
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/main.code.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/main.code.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/main.code.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/conversions/main.code.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,71 @@
+Bipush: '10', 
+Istore_1: 
+Iload_1: 
+I2b: 
+Istore_2: 
+Iload_1: 
+I2c: 
+Istore_3: 
+Iload_1: 
+I2d: 
+Dstore: '4', 
+Iload_1: 
+I2f: 
+Fstore: '6', 
+Iload_1: 
+I2l: 
+Lstore: '7', 
+Iload_1: 
+I2s: 
+Istore: '9', 
+Iload: '9', 
+Istore: '10', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload_1: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str b:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload_2: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str c:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload_3: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(C)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str d:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Dload: '4', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(D)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str f:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Fload: '6', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(F)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '7', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str s:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '9', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str force_load:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '10', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Return:
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ClassFileContent.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ClassFileContent.json b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ClassFileContent.json
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ClassFileContent.json	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,19 @@
+{
+  "classAccessModifierHex" : "0021",
+  "thisClass" : "Class cmjava2023/primitive/ints/logicops/Main",
+  "superClass" : "Class java/lang/Object",
+  "methodDescriptions" : [
+    {
+      "accessModifierHex" : "0009",
+      "name" : "main",
+      "typeDescriptor" : "([Ljava/lang/String;)V",
+      "code" : null
+    },
+    {
+      "accessModifierHex" : "0001",
+      "name" : "<init>",
+      "typeDescriptor" : "()V",
+      "code" : "Aload_0: \nInvokespecial: 'Methodref java/lang/Object.<init>:()V', \nReturn:"
+    }
+  ]
+}
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ClassFileModel.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ClassFileModel.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ClassFileModel.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ClassFileModel.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,1527 @@
+root (field of type ClassfileModel)
+|- packageNameWithDelimiterForClassFile: cmjava2023/primitive/ints/logicops
+|- constantPool
+|  |- 0 (field of type ClassConstantInfo)
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: cmjava2023/primitive/ints/logicops/Main
+|  |  |  |- utf8encodedName: cmjava2023/primitive/ints/logicops/Main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  tag: CONSTANT_Class
+|  L  1 (field of type ClassConstantInfo)
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: java/lang/Object
+|     |  |- utf8encodedName: java/lang/Object
+|     |  L  tag: CONSTANT_Utf8
+|     L  tag: CONSTANT_Class
+|- classClassAccessModifiers
+|  |- 0: ACC_PUBLIC
+|  L  1: ACC_SUPER
+|- constantPoolIndex: 0
+|- numberOfInterfaces: 0
+|- interfaceDefinitions
+|- numberOfFields: 0
+|- fieldDefinitions
+|- methodDefinitions
+|  |- 0 (field of type MethodInfo)
+|  |  |- accessModifiers
+|  |  |  |- 0: ACC_PUBLIC
+|  |  |  L  1: ACC_STATIC
+|  |  |- attributes
+|  |  |  L  0 (field of type CodeAttributeInfo)
+|  |  |     |- code
+|  |  |     |  |- 0 (field of type IntConstant)
+|  |  |     |  |  |- int: 4
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 1 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 4
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 2 (field of type IntConstant)
+|  |  |     |  |  |- int: 8
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 3 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 4 (field of type IntConstant)
+|  |  |     |  |  |- int: 257
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 5 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 257
+|  |  |     |  |  |  |- name: sipush
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 6 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 4
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 7 (field of type IntConstant)
+|  |  |     |  |  |- int: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 8 (field of type Iand)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 126
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 9 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 10 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 4
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 11 (field of type IntConstant)
+|  |  |     |  |  |- int: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 12 (field of type Ior)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -128
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 13 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BOR
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i3
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 14 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 15 (field of type IntConstant)
+|  |  |     |  |  |- int: 1
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 16 (field of type Ishl)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 120
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 17 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BIT_SHIFT_L
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: i4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 18 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 19 (field of type IntConstant)
+|  |  |     |  |  |- int: 1
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 20 (field of type Ishr)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 122
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 21 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BIT_SHIFT_R
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: i5
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 22 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 23 (field of type IntConstant)
+|  |  |     |  |  |- int: 1
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 24 (field of type Iushr)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 124
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 25 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: LOGICAL_SHIFT_R
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: i6
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 26 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 27 (field of type IntConstant)
+|  |  |     |  |  |- int: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 28 (field of type Ixor)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -126
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 29 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |  |     |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |     L  value: 2
+|  |  |     |  |  |  |  |     |- name: i2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BXOR
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i7
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 30 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 31 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i:
+|  |  |     |  |  |  |  |- utf8encodedName: i:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i:
+|  |  |     |  |  |     |  |- utf8encodedName: i:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 32 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 33 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 34 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 4
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 35 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 36 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 37 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: eight:
+|  |  |     |  |  |  |  |- utf8encodedName: eight:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: eight:
+|  |  |     |  |  |     |  |- utf8encodedName: eight:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 38 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 39 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 40 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 41 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 42 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 43 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i2:
+|  |  |     |  |  |  |  |- utf8encodedName: i2:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i2:
+|  |  |     |  |  |     |  |- utf8encodedName: i2:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 44 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 45 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 46 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 47 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 48 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 49 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i3:
+|  |  |     |  |  |  |  |- utf8encodedName: i3:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i3:
+|  |  |     |  |  |     |  |- utf8encodedName: i3:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 50 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 51 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 52 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BOR
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i3
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 53 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 54 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 55 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i4:
+|  |  |     |  |  |  |  |- utf8encodedName: i4:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i4:
+|  |  |     |  |  |     |  |- utf8encodedName: i4:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 56 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 57 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 58 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BIT_SHIFT_L
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: i4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 59 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 60 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 61 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i5:
+|  |  |     |  |  |  |  |- utf8encodedName: i5:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i5:
+|  |  |     |  |  |     |  |- utf8encodedName: i5:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 62 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 63 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 64 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BIT_SHIFT_R
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: i5
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 65 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 66 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 67 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i6:
+|  |  |     |  |  |  |  |- utf8encodedName: i6:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i6:
+|  |  |     |  |  |     |  |- utf8encodedName: i6:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 68 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 69 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 70 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: LOGICAL_SHIFT_R
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: i6
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 71 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 72 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 73 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i7:
+|  |  |     |  |  |  |  |- utf8encodedName: i7:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i7:
+|  |  |     |  |  |     |  |- utf8encodedName: i7:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 74 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 75 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 76 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |  |     |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |     L  value: 2
+|  |  |     |  |  |  |  |     |- name: i2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- comparisonOperator: BXOR
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i7
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 77 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  L  78 (field of type Return)
+|  |  |     |     |- Companion (field of type Companion)
+|  |  |     |     |- values
+|  |  |     |     |- opCodeValue: -79
+|  |  |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     L  name (field of type Utf8ConstantInfo)
+|  |  |        |- content: Code
+|  |  |        |- utf8encodedName: Code
+|  |  |        L  tag: CONSTANT_Utf8
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: main
+|  |  |  |- utf8encodedName: main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  typeDescriptor (field of type Utf8ConstantInfo)
+|  |     |- content: ([Ljava/lang/String;)V
+|  |     |- utf8encodedName: ([Ljava/lang/String;)V
+|  |     L  tag: CONSTANT_Utf8
+|  L  1 (field of type MethodInfo)
+|     |- accessModifiers
+|     |  L  0: ACC_PUBLIC
+|     |- attributes
+|     |  L  0 (field of type CodeAttributeInfo)
+|     |     |- code
+|     |     |  |- 0 (field of type Aload_0)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |- opCodeValue: 42
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  |- 1 (field of type Invokespecial)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|     |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: java/lang/Object
+|     |     |  |  |     |  |  |- utf8encodedName: java/lang/Object
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_Class
+|     |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: <init>
+|     |     |  |  |     |  |  |- utf8encodedName: <init>
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: ()V
+|     |     |  |  |     |  |  |- utf8encodedName: ()V
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|     |     |  |  |     L  tag: CONSTANT_Methodref
+|     |     |  |  |- opCodeValue: -73
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  L  2 (field of type Return)
+|     |     |     |- Companion (field of type Companion)
+|     |     |     |- values
+|     |     |     |- opCodeValue: -79
+|     |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     L  name (field of type Utf8ConstantInfo)
+|     |        |- content: Code
+|     |        |- utf8encodedName: Code
+|     |        L  tag: CONSTANT_Utf8
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: <init>
+|     |  |- utf8encodedName: <init>
+|     |  L  tag: CONSTANT_Utf8
+|     L  typeDescriptor (field of type Utf8ConstantInfo)
+|        |- content: ()V
+|        |- utf8encodedName: ()V
+|        L  tag: CONSTANT_Utf8
+|- attributesCount: 0
+L  attributeDefinitions
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/main.code.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/main.code.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/main.code.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/main.code.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,79 @@
+Iconst_4: 
+Istore_1: 
+Bipush: '8', 
+Istore_2: 
+Sipush: '257', 
+Istore_3: 
+Iload_1: 
+Iconst_2: 
+Iand: 
+Istore: '4', 
+Iload_1: 
+Iconst_2: 
+Ior: 
+Istore: '5', 
+Iload_2: 
+Iconst_1: 
+Ishl: 
+Istore: '6', 
+Iload_2: 
+Iconst_1: 
+Ishr: 
+Istore: '7', 
+Iload_2: 
+Iconst_1: 
+Iushr: 
+Istore: '8', 
+Iload: '4', 
+Iconst_2: 
+Ixor: 
+Istore: '9', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload_1: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str eight:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload_2: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i2:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '4', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i3:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '5', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i4:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '6', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i5:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '7', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i6:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '8', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i7:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '9', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Return:
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/ClassFileContent.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/ClassFileContent.json b/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/ClassFileContent.json
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/ClassFileContent.json	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,19 @@
+{
+  "classAccessModifierHex" : "0021",
+  "thisClass" : "Class cmjava2023/primitive/ints/mathops/Main",
+  "superClass" : "Class java/lang/Object",
+  "methodDescriptions" : [
+    {
+      "accessModifierHex" : "0009",
+      "name" : "main",
+      "typeDescriptor" : "([Ljava/lang/String;)V",
+      "code" : null
+    },
+    {
+      "accessModifierHex" : "0001",
+      "name" : "<init>",
+      "typeDescriptor" : "()V",
+      "code" : "Aload_0: \nInvokespecial: 'Methodref java/lang/Object.<init>:()V', \nReturn:"
+    }
+  ]
+}
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/ClassFileModel.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/ClassFileModel.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/ClassFileModel.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/ClassFileModel.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,1757 @@
+root (field of type ClassfileModel)
+|- packageNameWithDelimiterForClassFile: cmjava2023/primitive/ints/mathops
+|- constantPool
+|  |- 0 (field of type ClassConstantInfo)
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: cmjava2023/primitive/ints/mathops/Main
+|  |  |  |- utf8encodedName: cmjava2023/primitive/ints/mathops/Main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  tag: CONSTANT_Class
+|  L  1 (field of type ClassConstantInfo)
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: java/lang/Object
+|     |  |- utf8encodedName: java/lang/Object
+|     |  L  tag: CONSTANT_Utf8
+|     L  tag: CONSTANT_Class
+|- classClassAccessModifiers
+|  |- 0: ACC_PUBLIC
+|  L  1: ACC_SUPER
+|- constantPoolIndex: 0
+|- numberOfInterfaces: 0
+|- interfaceDefinitions
+|- numberOfFields: 0
+|- fieldDefinitions
+|- methodDefinitions
+|  |- 0 (field of type MethodInfo)
+|  |  |- accessModifiers
+|  |  |  |- 0: ACC_PUBLIC
+|  |  |  L  1: ACC_STATIC
+|  |  |- attributes
+|  |  |  L  0 (field of type CodeAttributeInfo)
+|  |  |     |- code
+|  |  |     |  |- 0 (field of type IntConstant)
+|  |  |     |  |  |- int: 10
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 1 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 2 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 3 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 4 (field of type Iadd)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 96
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 5 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 6 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 7 (field of type IntConstant)
+|  |  |     |  |  |- int: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 8 (field of type Idiv)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 108
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 9 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |  |     |- name: i2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: DIVISION
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i3
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 10 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 11 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |     |- name: i2
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: int
+|  |  |     |  |  |  |- name: i4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 12 (field of type IncreaseInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |     |- name: i2
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: int
+|  |  |     |  |  |  |- name: i4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- byteToIncreaseBy: 1
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 13 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 14 (field of type IntConstant)
+|  |  |     |  |  |- int: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 15 (field of type Imul)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 104
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 16 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |  |     |- name: i2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: MULTIPLICATION
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i5
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 17 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 18 (field of type Ineg)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 116
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 19 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type UnaryPrefixNode)
+|  |  |     |  |  |  |  |- operator: MINUS
+|  |  |     |  |  |  |  L  Expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |        |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |        |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  |     |  L  value: 10
+|  |  |     |  |  |  |        |  |     |- name: i
+|  |  |     |  |  |  |        |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        |  |        L  name: int
+|  |  |     |  |  |  |        |  |- operator: PLUS
+|  |  |     |  |  |  |        |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |        |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |        |  L  value: 10
+|  |  |     |  |  |  |        |        |- name: i
+|  |  |     |  |  |  |        |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        |           L  name: int
+|  |  |     |  |  |  |        |- name: i2
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i6
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 20 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 21 (field of type IntConstant)
+|  |  |     |  |  |- int: 10
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 22 (field of type Irem)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 112
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 23 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |  |     |- name: i2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: MOD
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 10
+|  |  |     |  |  |  |- name: i7
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 24 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 25 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 26 (field of type Isub)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 100
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 27 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: MINUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i8
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 28 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 29 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i:
+|  |  |     |  |  |  |  |- utf8encodedName: i:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i:
+|  |  |     |  |  |     |  |- utf8encodedName: i:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 30 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 31 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 32 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 33 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 34 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 35 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i2:
+|  |  |     |  |  |  |  |- utf8encodedName: i2:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i2:
+|  |  |     |  |  |     |  |- utf8encodedName: i2:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 36 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 37 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 38 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 39 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 40 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 41 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i3:
+|  |  |     |  |  |  |  |- utf8encodedName: i3:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i3:
+|  |  |     |  |  |     |  |- utf8encodedName: i3:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 42 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 43 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 44 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |  |     |- name: i2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: DIVISION
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i3
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 45 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 46 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 47 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i4:
+|  |  |     |  |  |  |  |- utf8encodedName: i4:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i4:
+|  |  |     |  |  |     |  |- utf8encodedName: i4:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 48 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 49 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 50 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |     |- name: i2
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: int
+|  |  |     |  |  |  |- name: i4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 51 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 52 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 53 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i5:
+|  |  |     |  |  |  |  |- utf8encodedName: i5:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i5:
+|  |  |     |  |  |     |  |- utf8encodedName: i5:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 54 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 55 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 56 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |  |     |- name: i2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: MULTIPLICATION
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: i5
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 57 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 58 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 59 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i6:
+|  |  |     |  |  |  |  |- utf8encodedName: i6:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i6:
+|  |  |     |  |  |     |  |- utf8encodedName: i6:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 60 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 61 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 62 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type UnaryPrefixNode)
+|  |  |     |  |  |  |  |- operator: MINUS
+|  |  |     |  |  |  |  L  Expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |        |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |        |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  |     |  L  value: 10
+|  |  |     |  |  |  |        |  |     |- name: i
+|  |  |     |  |  |  |        |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        |  |        L  name: int
+|  |  |     |  |  |  |        |  |- operator: PLUS
+|  |  |     |  |  |  |        |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |        |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |        |  L  value: 10
+|  |  |     |  |  |  |        |        |- name: i
+|  |  |     |  |  |  |        |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        |           L  name: int
+|  |  |     |  |  |  |        |- name: i2
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i6
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 63 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 64 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 65 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i7:
+|  |  |     |  |  |  |  |- utf8encodedName: i7:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i7:
+|  |  |     |  |  |     |  |- utf8encodedName: i7:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 66 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 67 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 68 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: i
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: int
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: i
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: int
+|  |  |     |  |  |  |  |     |- name: i2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: MOD
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 10
+|  |  |     |  |  |  |- name: i7
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 69 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 70 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 71 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i8:
+|  |  |     |  |  |  |  |- utf8encodedName: i8:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i8:
+|  |  |     |  |  |     |  |- utf8encodedName: i8:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 72 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 73 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 74 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: i
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: int
+|  |  |     |  |  |  |  |- operator: MINUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: i
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: int
+|  |  |     |  |  |  |- name: i8
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 75 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  L  76 (field of type Return)
+|  |  |     |     |- Companion (field of type Companion)
+|  |  |     |     |- values
+|  |  |     |     |- opCodeValue: -79
+|  |  |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     L  name (field of type Utf8ConstantInfo)
+|  |  |        |- content: Code
+|  |  |        |- utf8encodedName: Code
+|  |  |        L  tag: CONSTANT_Utf8
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: main
+|  |  |  |- utf8encodedName: main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  typeDescriptor (field of type Utf8ConstantInfo)
+|  |     |- content: ([Ljava/lang/String;)V
+|  |     |- utf8encodedName: ([Ljava/lang/String;)V
+|  |     L  tag: CONSTANT_Utf8
+|  L  1 (field of type MethodInfo)
+|     |- accessModifiers
+|     |  L  0: ACC_PUBLIC
+|     |- attributes
+|     |  L  0 (field of type CodeAttributeInfo)
+|     |     |- code
+|     |     |  |- 0 (field of type Aload_0)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |- opCodeValue: 42
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  |- 1 (field of type Invokespecial)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|     |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: java/lang/Object
+|     |     |  |  |     |  |  |- utf8encodedName: java/lang/Object
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_Class
+|     |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: <init>
+|     |     |  |  |     |  |  |- utf8encodedName: <init>
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: ()V
+|     |     |  |  |     |  |  |- utf8encodedName: ()V
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|     |     |  |  |     L  tag: CONSTANT_Methodref
+|     |     |  |  |- opCodeValue: -73
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  L  2 (field of type Return)
+|     |     |     |- Companion (field of type Companion)
+|     |     |     |- values
+|     |     |     |- opCodeValue: -79
+|     |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     L  name (field of type Utf8ConstantInfo)
+|     |        |- content: Code
+|     |        |- utf8encodedName: Code
+|     |        L  tag: CONSTANT_Utf8
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: <init>
+|     |  |- utf8encodedName: <init>
+|     |  L  tag: CONSTANT_Utf8
+|     L  typeDescriptor (field of type Utf8ConstantInfo)
+|        |- content: ()V
+|        |- utf8encodedName: ()V
+|        L  tag: CONSTANT_Utf8
+|- attributesCount: 0
+L  attributeDefinitions
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/main.code.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/main.code.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/main.code.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/mathops/main.code.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,77 @@
+Bipush: '10', 
+Istore_1: 
+Iload_1: 
+Iload_1: 
+Iadd: 
+Istore_2: 
+Iload_2: 
+Iconst_2: 
+Idiv: 
+Istore_3: 
+Iload_2: 
+Istore: '4', 
+Iinc: '4', '1', 
+Iload_2: 
+Iconst_2: 
+Imul: 
+Istore: '5', 
+Iload_2: 
+Ineg: 
+Istore: '6', 
+Iload_2: 
+Bipush: '10', 
+Irem: 
+Istore: '7', 
+Iload_1: 
+Iload_1: 
+Isub: 
+Istore: '8', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload_1: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i2:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload_2: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i3:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload_3: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i4:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '4', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i5:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '5', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i6:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '6', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i7:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '7', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i8:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '8', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Return:
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/ClassFileContent.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/ClassFileContent.json b/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/ClassFileContent.json
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/ClassFileContent.json	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,19 @@
+{
+  "classAccessModifierHex" : "0021",
+  "thisClass" : "Class cmjava2023/primitive/longs/conversions/Main",
+  "superClass" : "Class java/lang/Object",
+  "methodDescriptions" : [
+    {
+      "accessModifierHex" : "0009",
+      "name" : "main",
+      "typeDescriptor" : "([Ljava/lang/String;)V",
+      "code" : null
+    },
+    {
+      "accessModifierHex" : "0001",
+      "name" : "<init>",
+      "typeDescriptor" : "()V",
+      "code" : "Aload_0: \nInvokespecial: 'Methodref java/lang/Object.<init>:()V', \nReturn:"
+    }
+  ]
+}
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/ClassFileModel.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/ClassFileModel.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/ClassFileModel.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/ClassFileModel.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,1246 @@
+root (field of type ClassfileModel)
+|- packageNameWithDelimiterForClassFile: cmjava2023/primitive/longs/conversions
+|- constantPool
+|  |- 0 (field of type ClassConstantInfo)
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: cmjava2023/primitive/longs/conversions/Main
+|  |  |  |- utf8encodedName: cmjava2023/primitive/longs/conversions/Main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  tag: CONSTANT_Class
+|  L  1 (field of type ClassConstantInfo)
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: java/lang/Object
+|     |  |- utf8encodedName: java/lang/Object
+|     |  L  tag: CONSTANT_Utf8
+|     L  tag: CONSTANT_Class
+|- classClassAccessModifiers
+|  |- 0: ACC_PUBLIC
+|  L  1: ACC_SUPER
+|- constantPoolIndex: 0
+|- numberOfInterfaces: 0
+|- interfaceDefinitions
+|- numberOfFields: 0
+|- fieldDefinitions
+|- methodDefinitions
+|  |- 0 (field of type MethodInfo)
+|  |  |- accessModifiers
+|  |  |  |- 0: ACC_PUBLIC
+|  |  |  L  1: ACC_STATIC
+|  |  |- attributes
+|  |  |  L  0 (field of type CodeAttributeInfo)
+|  |  |     |- code
+|  |  |     |  |- 0 (field of type LongConstant)
+|  |  |     |  |  |- long: 10
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 1 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 2 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 3 (field of type L2d)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -118
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 4 (field of type StoreDouble)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: double
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: d
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: double
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 5 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 6 (field of type L2f)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -119
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 7 (field of type StoreFloat)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: float
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: f
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: float
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 8 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 9 (field of type L2i)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -120
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 10 (field of type StoreInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: int
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 11 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 12 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |     |- name: l
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: long
+|  |  |     |  |  |  |- name: force_store
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 13 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |     |- name: l
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: long
+|  |  |     |  |  |  |- name: force_store
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 14 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |     |  L  value: 10
+|  |  |     |  |  |  |     |     |- name: l
+|  |  |     |  |  |  |     |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |        L  name: long
+|  |  |     |  |  |  |     |- name: force_store
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: long
+|  |  |     |  |  |  |- name: force_load
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 15 (field of type LongConstant)
+|  |  |     |  |  |- long: 1
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 16 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 1
+|  |  |     |  |  |  |- name: force_const
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 17 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 18 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l:
+|  |  |     |  |  |  |  |- utf8encodedName: l:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l:
+|  |  |     |  |  |     |  |- utf8encodedName: l:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 19 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 20 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 21 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 22 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 23 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 24 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: d:
+|  |  |     |  |  |  |  |- utf8encodedName: d:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: d:
+|  |  |     |  |  |     |  |- utf8encodedName: d:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 25 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 26 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 27 (field of type LoadDouble)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: double
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: d
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: double
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 28 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (D)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (D)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 29 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 30 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: f:
+|  |  |     |  |  |  |  |- utf8encodedName: f:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: f:
+|  |  |     |  |  |     |  |- utf8encodedName: f:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 31 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 32 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 33 (field of type LoadFloat)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: float
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: f
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: float
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 34 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (F)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (F)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 35 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 36 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: i:
+|  |  |     |  |  |  |  |- utf8encodedName: i:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: i:
+|  |  |     |  |  |     |  |- utf8encodedName: i:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 37 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 38 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 39 (field of type LoadInt)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type CastNode)
+|  |  |     |  |  |  |  |- type (field of type BuiltIn)
+|  |  |     |  |  |  |  |  L  name: int
+|  |  |     |  |  |  |  L  expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: i
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: int
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 40 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (I)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (I)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 41 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 42 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: force_load:
+|  |  |     |  |  |  |  |- utf8encodedName: force_load:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: force_load:
+|  |  |     |  |  |     |  |- utf8encodedName: force_load:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 43 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 44 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 45 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |     |  L  value: 10
+|  |  |     |  |  |  |     |     |- name: l
+|  |  |     |  |  |  |     |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |     |        L  name: long
+|  |  |     |  |  |  |     |- name: force_store
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: long
+|  |  |     |  |  |  |- name: force_load
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 46 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 47 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 48 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: force_store:
+|  |  |     |  |  |  |  |- utf8encodedName: force_store:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: force_store:
+|  |  |     |  |  |     |  |- utf8encodedName: force_store:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 49 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 50 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 51 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |     |- name: l
+|  |  |     |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        L  name: long
+|  |  |     |  |  |  |- name: force_store
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 52 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 53 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 54 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: force_const:
+|  |  |     |  |  |  |  |- utf8encodedName: force_const:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: force_const:
+|  |  |     |  |  |     |  |- utf8encodedName: force_const:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 55 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 56 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 57 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 1
+|  |  |     |  |  |  |- name: force_const
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 58 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  L  59 (field of type Return)
+|  |  |     |     |- Companion (field of type Companion)
+|  |  |     |     |- values
+|  |  |     |     |- opCodeValue: -79
+|  |  |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     L  name (field of type Utf8ConstantInfo)
+|  |  |        |- content: Code
+|  |  |        |- utf8encodedName: Code
+|  |  |        L  tag: CONSTANT_Utf8
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: main
+|  |  |  |- utf8encodedName: main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  typeDescriptor (field of type Utf8ConstantInfo)
+|  |     |- content: ([Ljava/lang/String;)V
+|  |     |- utf8encodedName: ([Ljava/lang/String;)V
+|  |     L  tag: CONSTANT_Utf8
+|  L  1 (field of type MethodInfo)
+|     |- accessModifiers
+|     |  L  0: ACC_PUBLIC
+|     |- attributes
+|     |  L  0 (field of type CodeAttributeInfo)
+|     |     |- code
+|     |     |  |- 0 (field of type Aload_0)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |- opCodeValue: 42
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  |- 1 (field of type Invokespecial)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|     |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: java/lang/Object
+|     |     |  |  |     |  |  |- utf8encodedName: java/lang/Object
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_Class
+|     |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: <init>
+|     |     |  |  |     |  |  |- utf8encodedName: <init>
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: ()V
+|     |     |  |  |     |  |  |- utf8encodedName: ()V
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|     |     |  |  |     L  tag: CONSTANT_Methodref
+|     |     |  |  |- opCodeValue: -73
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  L  2 (field of type Return)
+|     |     |     |- Companion (field of type Companion)
+|     |     |     |- values
+|     |     |     |- opCodeValue: -79
+|     |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     L  name (field of type Utf8ConstantInfo)
+|     |        |- content: Code
+|     |        |- utf8encodedName: Code
+|     |        L  tag: CONSTANT_Utf8
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: <init>
+|     |  |- utf8encodedName: <init>
+|     |  L  tag: CONSTANT_Utf8
+|     L  typeDescriptor (field of type Utf8ConstantInfo)
+|        |- content: ()V
+|        |- utf8encodedName: ()V
+|        L  tag: CONSTANT_Utf8
+|- attributesCount: 0
+L  attributeDefinitions
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/main.code.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/main.code.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/main.code.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/conversions/main.code.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,60 @@
+Ldc2_w: 'Long 10', 
+Lstore_1: 
+Lload_1: 
+L2d: 
+Dstore_3: 
+Lload_1: 
+L2f: 
+Fstore: '5', 
+Lload_1: 
+L2i: 
+Istore: '6', 
+Lload_1: 
+Lstore: '7', 
+Lload: '7', 
+Lstore: '9', 
+Lconst_1: 
+Lstore: '11', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload_1: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str d:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Dload_3: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(D)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str f:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Fload: '5', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(F)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str i:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Iload: '6', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(I)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str force_load:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '9', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str force_store:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '7', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str force_const:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '11', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Return:
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ClassFileContent.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ClassFileContent.json b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ClassFileContent.json
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ClassFileContent.json	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,19 @@
+{
+  "classAccessModifierHex" : "0021",
+  "thisClass" : "Class cmjava2023/primitive/longs/logicops/Main",
+  "superClass" : "Class java/lang/Object",
+  "methodDescriptions" : [
+    {
+      "accessModifierHex" : "0009",
+      "name" : "main",
+      "typeDescriptor" : "([Ljava/lang/String;)V",
+      "code" : null
+    },
+    {
+      "accessModifierHex" : "0001",
+      "name" : "<init>",
+      "typeDescriptor" : "()V",
+      "code" : "Aload_0: \nInvokespecial: 'Methodref java/lang/Object.<init>:()V', \nReturn:"
+    }
+  ]
+}
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ClassFileModel.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ClassFileModel.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ClassFileModel.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ClassFileModel.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,1508 @@
+root (field of type ClassfileModel)
+|- packageNameWithDelimiterForClassFile: cmjava2023/primitive/longs/logicops
+|- constantPool
+|  |- 0 (field of type ClassConstantInfo)
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: cmjava2023/primitive/longs/logicops/Main
+|  |  |  |- utf8encodedName: cmjava2023/primitive/longs/logicops/Main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  tag: CONSTANT_Class
+|  L  1 (field of type ClassConstantInfo)
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: java/lang/Object
+|     |  |- utf8encodedName: java/lang/Object
+|     |  L  tag: CONSTANT_Utf8
+|     L  tag: CONSTANT_Class
+|- classClassAccessModifiers
+|  |- 0: ACC_PUBLIC
+|  L  1: ACC_SUPER
+|- constantPoolIndex: 0
+|- numberOfInterfaces: 0
+|- interfaceDefinitions
+|- numberOfFields: 0
+|- fieldDefinitions
+|- methodDefinitions
+|  |- 0 (field of type MethodInfo)
+|  |  |- accessModifiers
+|  |  |  |- 0: ACC_PUBLIC
+|  |  |  L  1: ACC_STATIC
+|  |  |- attributes
+|  |  |  L  0 (field of type CodeAttributeInfo)
+|  |  |     |- code
+|  |  |     |  |- 0 (field of type LongConstant)
+|  |  |     |  |  |- long: 4
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 1 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 4
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 2 (field of type LongConstant)
+|  |  |     |  |  |- long: 8
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 3 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 4 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 4
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 5 (field of type LongConstant)
+|  |  |     |  |  |- long: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 6 (field of type Land)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 127
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 7 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 8 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 4
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 9 (field of type LongConstant)
+|  |  |     |  |  |- long: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 10 (field of type Lor)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -127
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 11 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BOR
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l3
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 12 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 13 (field of type IntConstant)
+|  |  |     |  |  |- int: 1
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 14 (field of type Lshl)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 121
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 15 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BIT_SHIFT_L
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: l4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 16 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 17 (field of type IntConstant)
+|  |  |     |  |  |- int: 1
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 18 (field of type Lshr)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 123
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 19 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BIT_SHIFT_R
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: l5
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 20 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 21 (field of type IntConstant)
+|  |  |     |  |  |- int: 1
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 22 (field of type Lushr)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 125
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 23 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: LOGICAL_SHIFT_R
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: l6
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 24 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 25 (field of type LongConstant)
+|  |  |     |  |  |- long: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 26 (field of type Lxor)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -125
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 27 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |  |     |- name: l
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: long
+|  |  |     |  |  |  |  |     |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |     L  value: 2
+|  |  |     |  |  |  |  |     |- name: l2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BXOR
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l7
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 28 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 29 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l:
+|  |  |     |  |  |  |  |- utf8encodedName: l:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l:
+|  |  |     |  |  |     |  |- utf8encodedName: l:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 30 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 31 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 32 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 4
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 33 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 34 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 35 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: eight:
+|  |  |     |  |  |  |  |- utf8encodedName: eight:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: eight:
+|  |  |     |  |  |     |  |- utf8encodedName: eight:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 36 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 37 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 38 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 8
+|  |  |     |  |  |  |- name: eight
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 39 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 40 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 41 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l2:
+|  |  |     |  |  |  |  |- utf8encodedName: l2:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l2:
+|  |  |     |  |  |     |  |- utf8encodedName: l2:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 42 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 43 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 44 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 45 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 46 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 47 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l3:
+|  |  |     |  |  |  |  |- utf8encodedName: l3:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l3:
+|  |  |     |  |  |     |  |- utf8encodedName: l3:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 48 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 49 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 50 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BOR
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l3
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 51 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 52 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 53 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l4:
+|  |  |     |  |  |  |  |- utf8encodedName: l4:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l4:
+|  |  |     |  |  |     |  |- utf8encodedName: l4:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 54 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 55 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 56 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BIT_SHIFT_L
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: l4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 57 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 58 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 59 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l5:
+|  |  |     |  |  |  |  |- utf8encodedName: l5:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l5:
+|  |  |     |  |  |     |  |- utf8encodedName: l5:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 60 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 61 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 62 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BIT_SHIFT_R
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: l5
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 63 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 64 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 65 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l6:
+|  |  |     |  |  |  |  |- utf8encodedName: l6:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l6:
+|  |  |     |  |  |     |  |- utf8encodedName: l6:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 66 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 67 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 68 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 8
+|  |  |     |  |  |  |  |     |- name: eight
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: LOGICAL_SHIFT_R
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 1
+|  |  |     |  |  |  |- name: l6
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 69 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 70 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 71 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l7:
+|  |  |     |  |  |  |  |- utf8encodedName: l7:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l7:
+|  |  |     |  |  |     |  |- utf8encodedName: l7:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 72 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 73 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 74 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ComparisonNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 4
+|  |  |     |  |  |  |  |     |  |     |- name: l
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: long
+|  |  |     |  |  |  |  |     |  |- comparisonOperator: BAND
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |     L  value: 2
+|  |  |     |  |  |  |  |     |- name: l2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- comparisonOperator: BXOR
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l7
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 75 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  L  76 (field of type Return)
+|  |  |     |     |- Companion (field of type Companion)
+|  |  |     |     |- values
+|  |  |     |     |- opCodeValue: -79
+|  |  |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     L  name (field of type Utf8ConstantInfo)
+|  |  |        |- content: Code
+|  |  |        |- utf8encodedName: Code
+|  |  |        L  tag: CONSTANT_Utf8
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: main
+|  |  |  |- utf8encodedName: main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  typeDescriptor (field of type Utf8ConstantInfo)
+|  |     |- content: ([Ljava/lang/String;)V
+|  |     |- utf8encodedName: ([Ljava/lang/String;)V
+|  |     L  tag: CONSTANT_Utf8
+|  L  1 (field of type MethodInfo)
+|     |- accessModifiers
+|     |  L  0: ACC_PUBLIC
+|     |- attributes
+|     |  L  0 (field of type CodeAttributeInfo)
+|     |     |- code
+|     |     |  |- 0 (field of type Aload_0)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |- opCodeValue: 42
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  |- 1 (field of type Invokespecial)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|     |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: java/lang/Object
+|     |     |  |  |     |  |  |- utf8encodedName: java/lang/Object
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_Class
+|     |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: <init>
+|     |     |  |  |     |  |  |- utf8encodedName: <init>
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: ()V
+|     |     |  |  |     |  |  |- utf8encodedName: ()V
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|     |     |  |  |     L  tag: CONSTANT_Methodref
+|     |     |  |  |- opCodeValue: -73
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  L  2 (field of type Return)
+|     |     |     |- Companion (field of type Companion)
+|     |     |     |- values
+|     |     |     |- opCodeValue: -79
+|     |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     L  name (field of type Utf8ConstantInfo)
+|     |        |- content: Code
+|     |        |- utf8encodedName: Code
+|     |        L  tag: CONSTANT_Utf8
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: <init>
+|     |  |- utf8encodedName: <init>
+|     |  L  tag: CONSTANT_Utf8
+|     L  typeDescriptor (field of type Utf8ConstantInfo)
+|        |- content: ()V
+|        |- utf8encodedName: ()V
+|        L  tag: CONSTANT_Utf8
+|- attributesCount: 0
+L  attributeDefinitions
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/main.code.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/main.code.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/main.code.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/main.code.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,77 @@
+Ldc2_w: 'Long 4', 
+Lstore_1: 
+Ldc2_w: 'Long 8', 
+Lstore_3: 
+Lload_1: 
+Ldc2_w: 'Long 2', 
+Land: 
+Lstore: '5', 
+Lload_1: 
+Ldc2_w: 'Long 2', 
+Lor: 
+Lstore: '7', 
+Lload_3: 
+Iconst_1: 
+Lshl: 
+Lstore: '9', 
+Lload_3: 
+Iconst_1: 
+Lshr: 
+Lstore: '11', 
+Lload_3: 
+Iconst_1: 
+Lushr: 
+Lstore: '13', 
+Lload: '5', 
+Ldc2_w: 'Long 2', 
+Lxor: 
+Lstore: '15', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload_1: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str eight:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload_3: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l2:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '5', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l3:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '7', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l4:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '9', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l5:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '11', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l6:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '13', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l7:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '15', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Return:
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/ClassFileContent.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/ClassFileContent.json b/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/ClassFileContent.json
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/ClassFileContent.json	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,19 @@
+{
+  "classAccessModifierHex" : "0021",
+  "thisClass" : "Class cmjava2023/primitive/longs/mathops/Main",
+  "superClass" : "Class java/lang/Object",
+  "methodDescriptions" : [
+    {
+      "accessModifierHex" : "0009",
+      "name" : "main",
+      "typeDescriptor" : "([Ljava/lang/String;)V",
+      "code" : null
+    },
+    {
+      "accessModifierHex" : "0001",
+      "name" : "<init>",
+      "typeDescriptor" : "()V",
+      "code" : "Aload_0: \nInvokespecial: 'Methodref java/lang/Object.<init>:()V', \nReturn:"
+    }
+  ]
+}
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/ClassFileModel.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/ClassFileModel.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/ClassFileModel.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/ClassFileModel.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,1523 @@
+root (field of type ClassfileModel)
+|- packageNameWithDelimiterForClassFile: cmjava2023/primitive/longs/mathops
+|- constantPool
+|  |- 0 (field of type ClassConstantInfo)
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: cmjava2023/primitive/longs/mathops/Main
+|  |  |  |- utf8encodedName: cmjava2023/primitive/longs/mathops/Main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  tag: CONSTANT_Class
+|  L  1 (field of type ClassConstantInfo)
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: java/lang/Object
+|     |  |- utf8encodedName: java/lang/Object
+|     |  L  tag: CONSTANT_Utf8
+|     L  tag: CONSTANT_Class
+|- classClassAccessModifiers
+|  |- 0: ACC_PUBLIC
+|  L  1: ACC_SUPER
+|- constantPoolIndex: 0
+|- numberOfInterfaces: 0
+|- interfaceDefinitions
+|- numberOfFields: 0
+|- fieldDefinitions
+|- methodDefinitions
+|  |- 0 (field of type MethodInfo)
+|  |  |- accessModifiers
+|  |  |  |- 0: ACC_PUBLIC
+|  |  |  L  1: ACC_STATIC
+|  |  |- attributes
+|  |  |  L  0 (field of type CodeAttributeInfo)
+|  |  |     |- code
+|  |  |     |  |- 0 (field of type LongConstant)
+|  |  |     |  |  |- long: 10
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 1 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 2 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 3 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 4 (field of type Ladd)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 97
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 5 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 6 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 7 (field of type LongConstant)
+|  |  |     |  |  |- long: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 8 (field of type Ldiv)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 109
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 9 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: l
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: long
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: l
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: long
+|  |  |     |  |  |  |  |     |- name: l2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: DIVISION
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l3
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 10 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 11 (field of type LongConstant)
+|  |  |     |  |  |- long: 2
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 12 (field of type Lmul)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 105
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 13 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: l
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: long
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: l
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: long
+|  |  |     |  |  |  |  |     |- name: l2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: MULTIPLICATION
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 14 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 15 (field of type Lneg)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 117
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 16 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type UnaryPrefixNode)
+|  |  |     |  |  |  |  |- operator: MINUS
+|  |  |     |  |  |  |  L  Expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |        |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |        |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  |     |  L  value: 10
+|  |  |     |  |  |  |        |  |     |- name: l
+|  |  |     |  |  |  |        |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        |  |        L  name: long
+|  |  |     |  |  |  |        |  |- operator: PLUS
+|  |  |     |  |  |  |        |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |        |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |        |  L  value: 10
+|  |  |     |  |  |  |        |        |- name: l
+|  |  |     |  |  |  |        |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        |           L  name: long
+|  |  |     |  |  |  |        |- name: l2
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l5
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 17 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 18 (field of type LongConstant)
+|  |  |     |  |  |- long: 10
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 19 (field of type Lrem)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 113
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 20 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: l
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: long
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: l
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: long
+|  |  |     |  |  |  |  |     |- name: l2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: MOD
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 10
+|  |  |     |  |  |  |- name: l6
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 21 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 22 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 23 (field of type Lsub)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: 101
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 24 (field of type StoreLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: MINUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l7
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 25 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 26 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l:
+|  |  |     |  |  |  |  |- utf8encodedName: l:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l:
+|  |  |     |  |  |     |  |- utf8encodedName: l:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 27 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 28 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 29 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  L  value: 10
+|  |  |     |  |  |  |- name: l
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 30 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 31 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 32 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l2:
+|  |  |     |  |  |  |  |- utf8encodedName: l2:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l2:
+|  |  |     |  |  |     |  |- utf8encodedName: l2:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 33 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 34 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 35 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: PLUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l2
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 36 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 37 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 38 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l3:
+|  |  |     |  |  |  |  |- utf8encodedName: l3:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l3:
+|  |  |     |  |  |     |  |- utf8encodedName: l3:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 39 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 40 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 41 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: l
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: long
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: l
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: long
+|  |  |     |  |  |  |  |     |- name: l2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: DIVISION
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l3
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 42 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 43 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 44 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l4:
+|  |  |     |  |  |  |  |- utf8encodedName: l4:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l4:
+|  |  |     |  |  |     |  |- utf8encodedName: l4:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 45 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 46 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 47 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: l
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: long
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: l
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: long
+|  |  |     |  |  |  |  |     |- name: l2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: MULTIPLICATION
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 2
+|  |  |     |  |  |  |- name: l4
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 48 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 49 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 50 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l5:
+|  |  |     |  |  |  |  |- utf8encodedName: l5:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l5:
+|  |  |     |  |  |     |  |- utf8encodedName: l5:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 51 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 52 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 53 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type UnaryPrefixNode)
+|  |  |     |  |  |  |  |- operator: MINUS
+|  |  |     |  |  |  |  L  Expression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |        |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |        |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  |     |  L  value: 10
+|  |  |     |  |  |  |        |  |     |- name: l
+|  |  |     |  |  |  |        |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        |  |        L  name: long
+|  |  |     |  |  |  |        |  |- operator: PLUS
+|  |  |     |  |  |  |        |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |        |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |        |  L  value: 10
+|  |  |     |  |  |  |        |        |- name: l
+|  |  |     |  |  |  |        |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |        |           L  name: long
+|  |  |     |  |  |  |        |- name: l2
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l5
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 54 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 55 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 56 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l6:
+|  |  |     |  |  |  |  |- utf8encodedName: l6:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l6:
+|  |  |     |  |  |     |  |- utf8encodedName: l6:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 57 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 58 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 59 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |     |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |  |     |- name: l
+|  |  |     |  |  |  |  |     |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |  |        L  name: long
+|  |  |     |  |  |  |  |     |  |- operator: PLUS
+|  |  |     |  |  |  |  |     |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |     |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |        |  L  value: 10
+|  |  |     |  |  |  |  |     |        |- name: l
+|  |  |     |  |  |  |  |     |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |     |           L  name: long
+|  |  |     |  |  |  |  |     |- name: l2
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: MOD
+|  |  |     |  |  |  |  L  rightExpression (field of type ValueNode)
+|  |  |     |  |  |  |     L  value: 10
+|  |  |     |  |  |  |- name: l6
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 60 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 61 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 62 (field of type LoadConstant)
+|  |  |     |  |  |- constantInfo (field of type StringConstantInfo)
+|  |  |     |  |  |  |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |  |  |- content: l7:
+|  |  |     |  |  |  |  |- utf8encodedName: l7:
+|  |  |     |  |  |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |  L  tag: CONSTANT_String
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type StringConstantInfo)
+|  |  |     |  |  |     |- value (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |- content: l7:
+|  |  |     |  |  |     |  |- utf8encodedName: l7:
+|  |  |     |  |  |     |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     L  tag: CONSTANT_String
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 63 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (Ljava/lang/String;)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 64 (field of type Getstatic)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type FieldReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/lang/System
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/lang/System
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: out
+|  |  |     |  |  |     |  |  |- utf8encodedName: out
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  |- utf8encodedName: Ljava/io/PrintStream;
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Fieldref
+|  |  |     |  |  |- opCodeValue: -78
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 65 (field of type LoadLong)
+|  |  |     |  |  |- variableSymbol (field of type Variable)
+|  |  |     |  |  |  |- initialExpression (field of type InfixNode)
+|  |  |     |  |  |  |  |- leftExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |  |  L  symbol (field of type Variable)
+|  |  |     |  |  |  |  |     |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |  |     |  L  value: 10
+|  |  |     |  |  |  |  |     |- name: l
+|  |  |     |  |  |  |  |     L  type (field of type BuiltIn)
+|  |  |     |  |  |  |  |        L  name: long
+|  |  |     |  |  |  |  |- operator: MINUS
+|  |  |     |  |  |  |  L  rightExpression (field of type VariableCallNode)
+|  |  |     |  |  |  |     L  symbol (field of type Variable)
+|  |  |     |  |  |  |        |- initialExpression (field of type ValueNode)
+|  |  |     |  |  |  |        |  L  value: 10
+|  |  |     |  |  |  |        |- name: l
+|  |  |     |  |  |  |        L  type (field of type BuiltIn)
+|  |  |     |  |  |  |           L  name: long
+|  |  |     |  |  |  |- name: l7
+|  |  |     |  |  |  L  type (field of type BuiltIn)
+|  |  |     |  |  |     L  name: long
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |- opCodeValue: -53
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  |- 66 (field of type Invokevirtual)
+|  |  |     |  |  |- Companion (field of type Companion)
+|  |  |     |  |  |- values
+|  |  |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|  |  |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: java/io/PrintStream
+|  |  |     |  |  |     |  |  |- utf8encodedName: java/io/PrintStream
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_Class
+|  |  |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|  |  |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: println
+|  |  |     |  |  |     |  |  |- utf8encodedName: println
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|  |  |     |  |  |     |  |  |- content: (J)V
+|  |  |     |  |  |     |  |  |- utf8encodedName: (J)V
+|  |  |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|  |  |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|  |  |     |  |  |     L  tag: CONSTANT_Methodref
+|  |  |     |  |  |- opCodeValue: -74
+|  |  |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     |  L  67 (field of type Return)
+|  |  |     |     |- Companion (field of type Companion)
+|  |  |     |     |- values
+|  |  |     |     |- opCodeValue: -79
+|  |  |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|  |  |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|  |  |     L  name (field of type Utf8ConstantInfo)
+|  |  |        |- content: Code
+|  |  |        |- utf8encodedName: Code
+|  |  |        L  tag: CONSTANT_Utf8
+|  |  |- name (field of type Utf8ConstantInfo)
+|  |  |  |- content: main
+|  |  |  |- utf8encodedName: main
+|  |  |  L  tag: CONSTANT_Utf8
+|  |  L  typeDescriptor (field of type Utf8ConstantInfo)
+|  |     |- content: ([Ljava/lang/String;)V
+|  |     |- utf8encodedName: ([Ljava/lang/String;)V
+|  |     L  tag: CONSTANT_Utf8
+|  L  1 (field of type MethodInfo)
+|     |- accessModifiers
+|     |  L  0: ACC_PUBLIC
+|     |- attributes
+|     |  L  0 (field of type CodeAttributeInfo)
+|     |     |- code
+|     |     |  |- 0 (field of type Aload_0)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |- opCodeValue: 42
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  |- 1 (field of type Invokespecial)
+|     |     |  |  |- Companion (field of type Companion)
+|     |     |  |  |- values
+|     |     |  |  |  L  0 (field of type MethodReferenceConstantInfo)
+|     |     |  |  |     |- classConstantInfo (field of type ClassConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: java/lang/Object
+|     |     |  |  |     |  |  |- utf8encodedName: java/lang/Object
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_Class
+|     |     |  |  |     |- nameAndTypeConstantInfo (field of type NameAndTypeConstantInfo)
+|     |     |  |  |     |  |- name (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: <init>
+|     |     |  |  |     |  |  |- utf8encodedName: <init>
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  |- type (field of type Utf8ConstantInfo)
+|     |     |  |  |     |  |  |- content: ()V
+|     |     |  |  |     |  |  |- utf8encodedName: ()V
+|     |     |  |  |     |  |  L  tag: CONSTANT_Utf8
+|     |     |  |  |     |  L  tag: CONSTANT_NameAndType
+|     |     |  |  |     L  tag: CONSTANT_Methodref
+|     |     |  |  |- opCodeValue: -73
+|     |     |  |  |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |  |  L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     |  L  2 (field of type Return)
+|     |     |     |- Companion (field of type Companion)
+|     |     |     |- values
+|     |     |     |- opCodeValue: -79
+|     |     |     |- classToOpCodeValueMap (field of type LinkedHashMap)
+|     |     |     L  opCodeValueToClassMap (field of type LinkedHashMap)
+|     |     L  name (field of type Utf8ConstantInfo)
+|     |        |- content: Code
+|     |        |- utf8encodedName: Code
+|     |        L  tag: CONSTANT_Utf8
+|     |- name (field of type Utf8ConstantInfo)
+|     |  |- content: <init>
+|     |  |- utf8encodedName: <init>
+|     |  L  tag: CONSTANT_Utf8
+|     L  typeDescriptor (field of type Utf8ConstantInfo)
+|        |- content: ()V
+|        |- utf8encodedName: ()V
+|        L  tag: CONSTANT_Utf8
+|- attributesCount: 0
+L  attributeDefinitions
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/main.code.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/main.code.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/main.code.txt
new file mode 100644
--- /dev/null	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/mathops/main.code.txt	(revision 36ae1e1e379887d61173a40654d18c90908acbbf)
@@ -0,0 +1,68 @@
+Ldc2_w: 'Long 10', 
+Lstore_1: 
+Lload_1: 
+Lload_1: 
+Ladd: 
+Lstore_3: 
+Lload_3: 
+Ldc2_w: 'Long 2', 
+Ldiv: 
+Lstore: '5', 
+Lload_3: 
+Ldc2_w: 'Long 2', 
+Lmul: 
+Lstore: '7', 
+Lload_3: 
+Lneg: 
+Lstore: '9', 
+Lload_3: 
+Ldc2_w: 'Long 10', 
+Lrem: 
+Lstore: '11', 
+Lload_1: 
+Lload_1: 
+Lsub: 
+Lstore: '13', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload_1: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l2:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload_3: 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l3:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '5', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l4:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '7', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l5:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '9', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l6:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '11', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Ldc: 'Str l7:', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(Ljava/lang/String;)V', 
+Getstatic: 'Fieldref java/lang/System.out:Ljava/io/PrintStream;', 
+Lload: '13', 
+Invokevirtual: 'Methodref java/io/PrintStream.println:(J)V', 
+Return:
\ No newline at end of file
Index: src/main/gen/MainAntlrBaseListener.java
===================================================================
diff --git a/src/main/gen/MainAntlrBaseListener.java b/src/main/gen/MainAntlrBaseListener.java
new file mode 100644
--- /dev/null	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
+++ b/src/main/gen/MainAntlrBaseListener.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -0,0 +1,750 @@
+// Generated from D:/Desktop/Master of Science/1. Semester/Concepts of Programming Languages/GruppenProjekt/githubrepo/compiler/src/main/antlr/MainAntlr.g4 by ANTLR 4.13.1
+
+package org.cmjava2023.generated_from_antlr;
+
+
+import org.antlr.v4.runtime.ParserRuleContext;
+import org.antlr.v4.runtime.tree.ErrorNode;
+import org.antlr.v4.runtime.tree.TerminalNode;
+
+/**
+ * This class provides an empty implementation of {@link MainAntlrListener},
+ * which can be extended to create a listener which only needs to handle a subset
+ * of the available methods.
+ */
+@SuppressWarnings("CheckReturnValue")
+public class MainAntlrBaseListener implements MainAntlrListener {
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterStart(MainAntlrParser.StartContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitStart(MainAntlrParser.StartContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterGlobal_scope(MainAntlrParser.Global_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitGlobal_scope(MainAntlrParser.Global_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterClass_scope(MainAntlrParser.Class_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitClass_scope(MainAntlrParser.Class_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFunction_scope(MainAntlrParser.Function_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFunction_scope(MainAntlrParser.Function_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterBlock_scope(MainAntlrParser.Block_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitBlock_scope(MainAntlrParser.Block_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterExpressions(MainAntlrParser.ExpressionsContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitExpressions(MainAntlrParser.ExpressionsContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterVariable_declaration(MainAntlrParser.Variable_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitVariable_declaration(MainAntlrParser.Variable_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterAssignment(MainAntlrParser.AssignmentContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitAssignment(MainAntlrParser.AssignmentContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterExpression(MainAntlrParser.ExpressionContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitExpression(MainAntlrParser.ExpressionContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterExpression_operator(MainAntlrParser.Expression_operatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitExpression_operator(MainAntlrParser.Expression_operatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterExpression_concatinator(MainAntlrParser.Expression_concatinatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitExpression_concatinator(MainAntlrParser.Expression_concatinatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterExpression_suffix(MainAntlrParser.Expression_suffixContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitExpression_suffix(MainAntlrParser.Expression_suffixContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterInstantiation(MainAntlrParser.InstantiationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitInstantiation(MainAntlrParser.InstantiationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterAccess_index(MainAntlrParser.Access_indexContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitAccess_index(MainAntlrParser.Access_indexContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterNumerical_comparison_operator(MainAntlrParser.Numerical_comparison_operatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitNumerical_comparison_operator(MainAntlrParser.Numerical_comparison_operatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterNumerical_prefix(MainAntlrParser.Numerical_prefixContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitNumerical_prefix(MainAntlrParser.Numerical_prefixContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterLogical_prefix(MainAntlrParser.Logical_prefixContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitLogical_prefix(MainAntlrParser.Logical_prefixContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterLogical_comparison_operator(MainAntlrParser.Logical_comparison_operatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitLogical_comparison_operator(MainAntlrParser.Logical_comparison_operatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterBit_comparison_operator(MainAntlrParser.Bit_comparison_operatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitBit_comparison_operator(MainAntlrParser.Bit_comparison_operatorContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterPackage_declaration(MainAntlrParser.Package_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitPackage_declaration(MainAntlrParser.Package_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterClass_declaration(MainAntlrParser.Class_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitClass_declaration(MainAntlrParser.Class_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterEnum_declaration(MainAntlrParser.Enum_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitEnum_declaration(MainAntlrParser.Enum_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterIf_statement(MainAntlrParser.If_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitIf_statement(MainAntlrParser.If_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterElse_statement(MainAntlrParser.Else_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitElse_statement(MainAntlrParser.Else_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterIf_else_statement(MainAntlrParser.If_else_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitIf_else_statement(MainAntlrParser.If_else_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterSwitch_statement(MainAntlrParser.Switch_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitSwitch_statement(MainAntlrParser.Switch_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterSwitch_scope(MainAntlrParser.Switch_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitSwitch_scope(MainAntlrParser.Switch_scopeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterReturn_statement(MainAntlrParser.Return_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitReturn_statement(MainAntlrParser.Return_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterBreak_statement(MainAntlrParser.Break_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitBreak_statement(MainAntlrParser.Break_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterContinue_statement(MainAntlrParser.Continue_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitContinue_statement(MainAntlrParser.Continue_statementContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterIdentifier(MainAntlrParser.IdentifierContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitIdentifier(MainAntlrParser.IdentifierContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterType(MainAntlrParser.TypeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitType(MainAntlrParser.TypeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterIntegral_type(MainAntlrParser.Integral_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitIntegral_type(MainAntlrParser.Integral_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFloating_point_type(MainAntlrParser.Floating_point_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFloating_point_type(MainAntlrParser.Floating_point_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterNumeric_type(MainAntlrParser.Numeric_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitNumeric_type(MainAntlrParser.Numeric_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterPrimitive_type(MainAntlrParser.Primitive_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitPrimitive_type(MainAntlrParser.Primitive_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterReference_type(MainAntlrParser.Reference_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitReference_type(MainAntlrParser.Reference_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterClass_type(MainAntlrParser.Class_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitClass_type(MainAntlrParser.Class_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterType_arguments(MainAntlrParser.Type_argumentsContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitType_arguments(MainAntlrParser.Type_argumentsContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterType_argument_list(MainAntlrParser.Type_argument_listContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitType_argument_list(MainAntlrParser.Type_argument_listContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterType_argument(MainAntlrParser.Type_argumentContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitType_argument(MainAntlrParser.Type_argumentContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterWildcard(MainAntlrParser.WildcardContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitWildcard(MainAntlrParser.WildcardContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterType_variable(MainAntlrParser.Type_variableContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitType_variable(MainAntlrParser.Type_variableContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterArray_type(MainAntlrParser.Array_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitArray_type(MainAntlrParser.Array_typeContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterArray_expression(MainAntlrParser.Array_expressionContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitArray_expression(MainAntlrParser.Array_expressionContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterWhile_loop(MainAntlrParser.While_loopContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitWhile_loop(MainAntlrParser.While_loopContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterDo_while_loop(MainAntlrParser.Do_while_loopContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitDo_while_loop(MainAntlrParser.Do_while_loopContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFor_loop(MainAntlrParser.For_loopContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFor_loop(MainAntlrParser.For_loopContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFor_init(MainAntlrParser.For_initContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFor_init(MainAntlrParser.For_initContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFor_termination(MainAntlrParser.For_terminationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFor_termination(MainAntlrParser.For_terminationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFor_update(MainAntlrParser.For_updateContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFor_update(MainAntlrParser.For_updateContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterCasting(MainAntlrParser.CastingContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitCasting(MainAntlrParser.CastingContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterAccess_modifier(MainAntlrParser.Access_modifierContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitAccess_modifier(MainAntlrParser.Access_modifierContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFunction_declaration(MainAntlrParser.Function_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFunction_declaration(MainAntlrParser.Function_declarationContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFunction_declaration_args(MainAntlrParser.Function_declaration_argsContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFunction_declaration_args(MainAntlrParser.Function_declaration_argsContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFunction_declaration_arg(MainAntlrParser.Function_declaration_argContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFunction_declaration_arg(MainAntlrParser.Function_declaration_argContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFunction_call(MainAntlrParser.Function_callContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFunction_call(MainAntlrParser.Function_callContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFunction_args(MainAntlrParser.Function_argsContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFunction_args(MainAntlrParser.Function_argsContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterFunction_arg(MainAntlrParser.Function_argContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitFunction_arg(MainAntlrParser.Function_argContext ctx) { }
+
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void enterEveryRule(ParserRuleContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void exitEveryRule(ParserRuleContext ctx) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void visitTerminal(TerminalNode node) { }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation does nothing.</p>
+	 */
+	@Override public void visitErrorNode(ErrorNode node) { }
+}
\ No newline at end of file
Index: src/main/gen/MainAntlrBaseVisitor.java
===================================================================
diff --git a/src/main/gen/MainAntlrBaseVisitor.java b/src/main/gen/MainAntlrBaseVisitor.java
new file mode 100644
--- /dev/null	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
+++ b/src/main/gen/MainAntlrBaseVisitor.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -0,0 +1,430 @@
+// Generated from D:/Desktop/Master of Science/1. Semester/Concepts of Programming Languages/GruppenProjekt/githubrepo/compiler/src/main/antlr/MainAntlr.g4 by ANTLR 4.13.1
+
+package org.cmjava2023.generated_from_antlr;
+
+import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;
+
+/**
+ * This class provides an empty implementation of {@link MainAntlrVisitor},
+ * which can be extended to create a visitor which only needs to handle a subset
+ * of the available methods.
+ *
+ * @param <T> The return type of the visit operation. Use {@link Void} for
+ * operations with no return type.
+ */
+@SuppressWarnings("CheckReturnValue")
+public class MainAntlrBaseVisitor<T> extends AbstractParseTreeVisitor<T> implements MainAntlrVisitor<T> {
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitStart(MainAntlrParser.StartContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitGlobal_scope(MainAntlrParser.Global_scopeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitClass_scope(MainAntlrParser.Class_scopeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFunction_scope(MainAntlrParser.Function_scopeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitBlock_scope(MainAntlrParser.Block_scopeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitExpressions(MainAntlrParser.ExpressionsContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitVariable_declaration(MainAntlrParser.Variable_declarationContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitAssignment(MainAntlrParser.AssignmentContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitExpression(MainAntlrParser.ExpressionContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitExpression_operator(MainAntlrParser.Expression_operatorContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitExpression_concatinator(MainAntlrParser.Expression_concatinatorContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitExpression_suffix(MainAntlrParser.Expression_suffixContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitInstantiation(MainAntlrParser.InstantiationContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitAccess_index(MainAntlrParser.Access_indexContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitNumerical_comparison_operator(MainAntlrParser.Numerical_comparison_operatorContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitNumerical_prefix(MainAntlrParser.Numerical_prefixContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitLogical_prefix(MainAntlrParser.Logical_prefixContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitLogical_comparison_operator(MainAntlrParser.Logical_comparison_operatorContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitBit_comparison_operator(MainAntlrParser.Bit_comparison_operatorContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitPackage_declaration(MainAntlrParser.Package_declarationContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitClass_declaration(MainAntlrParser.Class_declarationContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitEnum_declaration(MainAntlrParser.Enum_declarationContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitIf_statement(MainAntlrParser.If_statementContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitElse_statement(MainAntlrParser.Else_statementContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitIf_else_statement(MainAntlrParser.If_else_statementContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitSwitch_statement(MainAntlrParser.Switch_statementContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitSwitch_scope(MainAntlrParser.Switch_scopeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitReturn_statement(MainAntlrParser.Return_statementContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitBreak_statement(MainAntlrParser.Break_statementContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitContinue_statement(MainAntlrParser.Continue_statementContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitIdentifier(MainAntlrParser.IdentifierContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitType(MainAntlrParser.TypeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitIntegral_type(MainAntlrParser.Integral_typeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFloating_point_type(MainAntlrParser.Floating_point_typeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitNumeric_type(MainAntlrParser.Numeric_typeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitPrimitive_type(MainAntlrParser.Primitive_typeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitReference_type(MainAntlrParser.Reference_typeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitClass_type(MainAntlrParser.Class_typeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitType_arguments(MainAntlrParser.Type_argumentsContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitType_argument_list(MainAntlrParser.Type_argument_listContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitType_argument(MainAntlrParser.Type_argumentContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitWildcard(MainAntlrParser.WildcardContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitType_variable(MainAntlrParser.Type_variableContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitArray_type(MainAntlrParser.Array_typeContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitArray_expression(MainAntlrParser.Array_expressionContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitWhile_loop(MainAntlrParser.While_loopContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitDo_while_loop(MainAntlrParser.Do_while_loopContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFor_loop(MainAntlrParser.For_loopContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFor_init(MainAntlrParser.For_initContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFor_termination(MainAntlrParser.For_terminationContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFor_update(MainAntlrParser.For_updateContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitCasting(MainAntlrParser.CastingContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitAccess_modifier(MainAntlrParser.Access_modifierContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFunction_declaration(MainAntlrParser.Function_declarationContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFunction_declaration_args(MainAntlrParser.Function_declaration_argsContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFunction_declaration_arg(MainAntlrParser.Function_declaration_argContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFunction_call(MainAntlrParser.Function_callContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFunction_args(MainAntlrParser.Function_argsContext ctx) { return visitChildren(ctx); }
+	/**
+	 * {@inheritDoc}
+	 *
+	 * <p>The default implementation returns the result of calling
+	 * {@link #visitChildren} on {@code ctx}.</p>
+	 */
+	@Override public T visitFunction_arg(MainAntlrParser.Function_argContext ctx) { return visitChildren(ctx); }
+}
\ No newline at end of file
Index: src/main/gen/MainAntlrLexer.java
===================================================================
diff --git a/src/main/gen/MainAntlrLexer.java b/src/main/gen/MainAntlrLexer.java
new file mode 100644
--- /dev/null	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
+++ b/src/main/gen/MainAntlrLexer.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -0,0 +1,507 @@
+// Generated from D:/Desktop/Master of Science/1. Semester/Concepts of Programming Languages/GruppenProjekt/githubrepo/compiler/src/main/antlr/MainAntlr.g4 by ANTLR 4.13.1
+
+package org.cmjava2023.generated_from_antlr;
+
+import org.antlr.v4.runtime.Lexer;
+import org.antlr.v4.runtime.CharStream;
+import org.antlr.v4.runtime.Token;
+import org.antlr.v4.runtime.TokenStream;
+import org.antlr.v4.runtime.*;
+import org.antlr.v4.runtime.atn.*;
+import org.antlr.v4.runtime.dfa.DFA;
+import org.antlr.v4.runtime.misc.*;
+
+@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue", "this-escape"})
+public class MainAntlrLexer extends Lexer {
+	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }
+
+	protected static final DFA[] _decisionToDFA;
+	protected static final PredictionContextCache _sharedContextCache =
+		new PredictionContextCache();
+	public static final int
+		PACKAGE_KEYWORD=1, CLASS_KEYWORD=2, FALSE=3, TRUE=4, INSTANCE_MODIFIER=5, 
+		BOOLEAN_KEYWORD=6, BYTE_KEYWORD=7, SHORT_KEYWORD=8, INT_KEYWORD=9, LONG_KEYWORD=10, 
+		CHAR_KEYWORD=11, FLOAT_KEYWORD=12, DOUBLE_KEYWORD=13, ENUM_KEYWORD=14, 
+		EXTENDS_KEYWORD=15, SUPER_KEYWORD=16, VOID_KEYWORD=17, PUBLIC_KEYWORD=18, 
+		PRIVATE_KEYWORD=19, PROTECTED_KEYWORD=20, RETURN_KEYWORD=21, INSTANCE_KEYWORD=22, 
+		IF_KEYWORD=23, ELSE_KEYWORD=24, FOR_KEYWORD=25, WHILE_KEYWORD=26, DO_KEYWORD=27, 
+		SWITCH_KEYWORD=28, CASE_KEYWORD=29, BREAK_KEYWORD=30, CONTINUE_KEYWORD=31, 
+		DEFAULT_KEYWORD=32, IDENTIFIER=33, SEMICOLON=34, COLON=35, COMMA=36, DOT=37, 
+		PAREN_OPEN=38, PAREN_CLOSE=39, BRACKET_OPEN=40, BRACKET_CLOSE=41, CURLY_OPEN=42, 
+		CURLY_CLOSE=43, DIAMOND_OPEN=44, DIAMOND_CLOSE=45, EQUALS=46, EQ=47, NEQ=48, 
+		GTE=49, LTE=50, MOD=51, PLUS=52, MINUS=53, MULTIPLICATION=54, DIVISION=55, 
+		INC=56, DEC=57, LAND=58, LOR=59, NOT=60, NOTNOT=61, BAND=62, BOR=63, BIT_SHIFT_L=64, 
+		BIT_SHIFT_R=65, BXOR=66, COMMENT=67, LINE_COMMENT=68, WHITESPACE=69, STRING=70, 
+		CHARACTER=71, FLOAT=72, DECIMAL=73, INTEGER=74, LONG=75, FLOAT_EXPONENT_SUFFIX=76, 
+		FLOATING_POINT_SUFFIX=77, LONG_SUFFIX=78;
+	public static String[] channelNames = {
+		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
+	};
+
+	public static String[] modeNames = {
+		"DEFAULT_MODE"
+	};
+
+	private static String[] makeRuleNames() {
+		return new String[] {
+			"PACKAGE_KEYWORD", "CLASS_KEYWORD", "FALSE", "TRUE", "INSTANCE_MODIFIER", 
+			"BOOLEAN_KEYWORD", "BYTE_KEYWORD", "SHORT_KEYWORD", "INT_KEYWORD", "LONG_KEYWORD", 
+			"CHAR_KEYWORD", "FLOAT_KEYWORD", "DOUBLE_KEYWORD", "ENUM_KEYWORD", "EXTENDS_KEYWORD", 
+			"SUPER_KEYWORD", "VOID_KEYWORD", "PUBLIC_KEYWORD", "PRIVATE_KEYWORD", 
+			"PROTECTED_KEYWORD", "RETURN_KEYWORD", "INSTANCE_KEYWORD", "IF_KEYWORD", 
+			"ELSE_KEYWORD", "FOR_KEYWORD", "WHILE_KEYWORD", "DO_KEYWORD", "SWITCH_KEYWORD", 
+			"CASE_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORD", "DEFAULT_KEYWORD", 
+			"IDENTIFIER", "SEMICOLON", "COLON", "COMMA", "DOT", "PAREN_OPEN", "PAREN_CLOSE", 
+			"BRACKET_OPEN", "BRACKET_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "DIAMOND_OPEN", 
+			"DIAMOND_CLOSE", "EQUALS", "EQ", "NEQ", "GTE", "LTE", "MOD", "PLUS", 
+			"MINUS", "MULTIPLICATION", "DIVISION", "INC", "DEC", "LAND", "LOR", "NOT", 
+			"NOTNOT", "BAND", "BOR", "BIT_SHIFT_L", "BIT_SHIFT_R", "BXOR", "COMMENT", 
+			"LINE_COMMENT", "WHITESPACE", "STRING", "CHARACTER", "FLOAT", "DECIMAL", 
+			"INTEGER", "LONG", "FLOAT_EXPONENT_SUFFIX", "FLOATING_POINT_SUFFIX", 
+			"LONG_SUFFIX", "NAME", "CHAR", "DIGIT"
+		};
+	}
+	public static final String[] ruleNames = makeRuleNames();
+
+	private static String[] makeLiteralNames() {
+		return new String[] {
+			null, "'package'", "'class'", "'false'", "'true'", "'static'", "'boolean'", 
+			"'byte'", "'short'", "'int'", "'long'", "'char'", "'float'", "'double'", 
+			"'enum'", "'extends'", "'super'", "'void'", "'public'", "'private'", 
+			"'protected'", "'return'", "'new'", "'if'", "'else'", "'for'", "'while'", 
+			"'do'", "'switch'", "'case'", "'break'", "'continue'", "'default'", null, 
+			"';'", "':'", "','", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
+			"'<'", "'>'", "'='", "'=='", "'!='", "'>='", "'<='", "'%'", "'+'", "'-'", 
+			"'*'", "'/'", "'++'", "'--'", "'&&'", "'||'", "'!'", "'!!'", "'&'", "'|'", 
+			null, null, "'^'", null, null, null, null, null, null, null, null, null, 
+			"'e'", "'f'", "'L'"
+		};
+	}
+	private static final String[] _LITERAL_NAMES = makeLiteralNames();
+	private static String[] makeSymbolicNames() {
+		return new String[] {
+			null, "PACKAGE_KEYWORD", "CLASS_KEYWORD", "FALSE", "TRUE", "INSTANCE_MODIFIER", 
+			"BOOLEAN_KEYWORD", "BYTE_KEYWORD", "SHORT_KEYWORD", "INT_KEYWORD", "LONG_KEYWORD", 
+			"CHAR_KEYWORD", "FLOAT_KEYWORD", "DOUBLE_KEYWORD", "ENUM_KEYWORD", "EXTENDS_KEYWORD", 
+			"SUPER_KEYWORD", "VOID_KEYWORD", "PUBLIC_KEYWORD", "PRIVATE_KEYWORD", 
+			"PROTECTED_KEYWORD", "RETURN_KEYWORD", "INSTANCE_KEYWORD", "IF_KEYWORD", 
+			"ELSE_KEYWORD", "FOR_KEYWORD", "WHILE_KEYWORD", "DO_KEYWORD", "SWITCH_KEYWORD", 
+			"CASE_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORD", "DEFAULT_KEYWORD", 
+			"IDENTIFIER", "SEMICOLON", "COLON", "COMMA", "DOT", "PAREN_OPEN", "PAREN_CLOSE", 
+			"BRACKET_OPEN", "BRACKET_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "DIAMOND_OPEN", 
+			"DIAMOND_CLOSE", "EQUALS", "EQ", "NEQ", "GTE", "LTE", "MOD", "PLUS", 
+			"MINUS", "MULTIPLICATION", "DIVISION", "INC", "DEC", "LAND", "LOR", "NOT", 
+			"NOTNOT", "BAND", "BOR", "BIT_SHIFT_L", "BIT_SHIFT_R", "BXOR", "COMMENT", 
+			"LINE_COMMENT", "WHITESPACE", "STRING", "CHARACTER", "FLOAT", "DECIMAL", 
+			"INTEGER", "LONG", "FLOAT_EXPONENT_SUFFIX", "FLOATING_POINT_SUFFIX", 
+			"LONG_SUFFIX"
+		};
+	}
+	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
+	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
+
+	/**
+	 * @deprecated Use {@link #VOCABULARY} instead.
+	 */
+	@Deprecated
+	public static final String[] tokenNames;
+	static {
+		tokenNames = new String[_SYMBOLIC_NAMES.length];
+		for (int i = 0; i < tokenNames.length; i++) {
+			tokenNames[i] = VOCABULARY.getLiteralName(i);
+			if (tokenNames[i] == null) {
+				tokenNames[i] = VOCABULARY.getSymbolicName(i);
+			}
+
+			if (tokenNames[i] == null) {
+				tokenNames[i] = "<INVALID>";
+			}
+		}
+	}
+
+	@Override
+	@Deprecated
+	public String[] getTokenNames() {
+		return tokenNames;
+	}
+
+	@Override
+
+	public Vocabulary getVocabulary() {
+		return VOCABULARY;
+	}
+
+
+	public MainAntlrLexer(CharStream input) {
+		super(input);
+		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
+	}
+
+	@Override
+	public String getGrammarFileName() { return "MainAntlr.g4"; }
+
+	@Override
+	public String[] getRuleNames() { return ruleNames; }
+
+	@Override
+	public String getSerializedATN() { return _serializedATN; }
+
+	@Override
+	public String[] getChannelNames() { return channelNames; }
+
+	@Override
+	public String[] getModeNames() { return modeNames; }
+
+	@Override
+	public ATN getATN() { return _ATN; }
+
+	public static final String _serializedATN =
+		"\u0004\u0000N\u022e\u0006\uffff\uffff\u0002\u0000\u0007\u0000\u0002\u0001"+
+		"\u0007\u0001\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004"+
+		"\u0007\u0004\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007"+
+		"\u0007\u0007\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b"+
+		"\u0007\u000b\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002"+
+		"\u000f\u0007\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002"+
+		"\u0012\u0007\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002"+
+		"\u0015\u0007\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002"+
+		"\u0018\u0007\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002"+
+		"\u001b\u0007\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002"+
+		"\u001e\u0007\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007"+
+		"!\u0002\"\u0007\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007"+
+		"&\u0002\'\u0007\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007"+
+		"+\u0002,\u0007,\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u0007"+
+		"0\u00021\u00071\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u0007"+
+		"5\u00026\u00076\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007"+
+		":\u0002;\u0007;\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007"+
+		"?\u0002@\u0007@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007"+
+		"D\u0002E\u0007E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007"+
+		"I\u0002J\u0007J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007"+
+		"N\u0002O\u0007O\u0002P\u0007P\u0001\u0000\u0001\u0000\u0001\u0000\u0001"+
+		"\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0001\u0001"+
+		"\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0001"+
+		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001"+
+		"\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0001\u0004\u0001"+
+		"\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005\u0001"+
+		"\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001"+
+		"\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001"+
+		"\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
+		"\b\u0001\b\u0001\b\u0001\b\u0001\t\u0001\t\u0001\t\u0001\t\u0001\t\u0001"+
+		"\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b"+
+		"\u0001\u000b\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
+		"\f\u0001\f\u0001\f\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\u000e"+
+		"\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
+		"\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f"+
+		"\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
+		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0011"+
+		"\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
+		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013"+
+		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
+		"\u0001\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
+		"\u0001\u0014\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
+		"\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001\u0017"+
+		"\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018"+
+		"\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019"+
+		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b"+
+		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001c\u0001\u001c"+
+		"\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001d"+
+		"\u0001\u001d\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e"+
+		"\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e\u0001\u001e"+
+		"\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f"+
+		"\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001!\u0001!\u0001\"\u0001\"\u0001"+
+		"#\u0001#\u0001$\u0001$\u0001%\u0001%\u0001&\u0001&\u0001\'\u0001\'\u0001"+
+		"(\u0001(\u0001)\u0001)\u0001*\u0001*\u0001+\u0001+\u0001,\u0001,\u0001"+
+		"-\u0001-\u0001.\u0001.\u0001.\u0001/\u0001/\u0001/\u00010\u00010\u0001"+
+		"0\u00011\u00011\u00011\u00012\u00012\u00013\u00013\u00014\u00014\u0001"+
+		"5\u00015\u00016\u00016\u00017\u00017\u00017\u00018\u00018\u00018\u0001"+
+		"9\u00019\u00019\u0001:\u0001:\u0001:\u0001;\u0001;\u0001<\u0001<\u0001"+
+		"<\u0001=\u0001=\u0001>\u0001>\u0001?\u0004?\u01ae\b?\u000b?\f?\u01af\u0001"+
+		"@\u0004@\u01b3\b@\u000b@\f@\u01b4\u0001A\u0001A\u0001B\u0001B\u0001B\u0001"+
+		"B\u0005B\u01bd\bB\nB\fB\u01c0\tB\u0001B\u0001B\u0001B\u0001B\u0001B\u0001"+
+		"C\u0001C\u0001C\u0001C\u0005C\u01cb\bC\nC\fC\u01ce\tC\u0001C\u0001C\u0001"+
+		"D\u0001D\u0001D\u0001D\u0001E\u0001E\u0001E\u0001E\u0005E\u01da\bE\nE"+
+		"\fE\u01dd\tE\u0001E\u0001E\u0001F\u0001F\u0001F\u0001F\u0005F\u01e5\b"+
+		"F\nF\fF\u01e8\tF\u0001F\u0001F\u0001G\u0001G\u0001G\u0001G\u0001G\u0001"+
+		"G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0003G\u01fa"+
+		"\bG\u0001G\u0001G\u0001G\u0001G\u0003G\u0200\bG\u0001G\u0001G\u0003G\u0204"+
+		"\bG\u0001G\u0001G\u0001H\u0001H\u0005H\u020a\bH\nH\fH\u020d\tH\u0001H"+
+		"\u0003H\u0210\bH\u0001H\u0001H\u0001H\u0001I\u0004I\u0216\bI\u000bI\f"+
+		"I\u0217\u0001J\u0001J\u0001J\u0001K\u0001K\u0001L\u0001L\u0001M\u0001"+
+		"M\u0001N\u0001N\u0001N\u0005N\u0226\bN\nN\fN\u0229\tN\u0001O\u0001O\u0001"+
+		"P\u0001P\u0001\u01be\u0000Q\u0001\u0001\u0003\u0002\u0005\u0003\u0007"+
+		"\u0004\t\u0005\u000b\u0006\r\u0007\u000f\b\u0011\t\u0013\n\u0015\u000b"+
+		"\u0017\f\u0019\r\u001b\u000e\u001d\u000f\u001f\u0010!\u0011#\u0012%\u0013"+
+		"\'\u0014)\u0015+\u0016-\u0017/\u00181\u00193\u001a5\u001b7\u001c9\u001d"+
+		";\u001e=\u001f? A!C\"E#G$I%K&M\'O(Q)S*U+W,Y-[.]/_0a1c2e3g4i5k6m7o8q9s"+
+		":u;w<y={>}?\u007f@\u0081A\u0083B\u0085C\u0087D\u0089E\u008bF\u008dG\u008f"+
+		"H\u0091I\u0093J\u0095K\u0097L\u0099M\u009bN\u009d\u0000\u009f\u0000\u00a1"+
+		"\u0000\u0001\u0000\u0007\u0002\u0000\n\n\r\r\u0003\u0000\t\n\r\r  \u0001"+
+		"\u0000\"\"\u0001\u000019\u0001\u000000\u0004\u0000$$AZ__az\u0001\u0000"+
+		"09\u023e\u0000\u0001\u0001\u0000\u0000\u0000\u0000\u0003\u0001\u0000\u0000"+
+		"\u0000\u0000\u0005\u0001\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000"+
+		"\u0000\u0000\t\u0001\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0000"+
+		"\u0000\r\u0001\u0000\u0000\u0000\u0000\u000f\u0001\u0000\u0000\u0000\u0000"+
+		"\u0011\u0001\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0000\u0000"+
+		"\u0015\u0001\u0000\u0000\u0000\u0000\u0017\u0001\u0000\u0000\u0000\u0000"+
+		"\u0019\u0001\u0000\u0000\u0000\u0000\u001b\u0001\u0000\u0000\u0000\u0000"+
+		"\u001d\u0001\u0000\u0000\u0000\u0000\u001f\u0001\u0000\u0000\u0000\u0000"+
+		"!\u0001\u0000\u0000\u0000\u0000#\u0001\u0000\u0000\u0000\u0000%\u0001"+
+		"\u0000\u0000\u0000\u0000\'\u0001\u0000\u0000\u0000\u0000)\u0001\u0000"+
+		"\u0000\u0000\u0000+\u0001\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0000"+
+		"\u0000/\u0001\u0000\u0000\u0000\u00001\u0001\u0000\u0000\u0000\u00003"+
+		"\u0001\u0000\u0000\u0000\u00005\u0001\u0000\u0000\u0000\u00007\u0001\u0000"+
+		"\u0000\u0000\u00009\u0001\u0000\u0000\u0000\u0000;\u0001\u0000\u0000\u0000"+
+		"\u0000=\u0001\u0000\u0000\u0000\u0000?\u0001\u0000\u0000\u0000\u0000A"+
+		"\u0001\u0000\u0000\u0000\u0000C\u0001\u0000\u0000\u0000\u0000E\u0001\u0000"+
+		"\u0000\u0000\u0000G\u0001\u0000\u0000\u0000\u0000I\u0001\u0000\u0000\u0000"+
+		"\u0000K\u0001\u0000\u0000\u0000\u0000M\u0001\u0000\u0000\u0000\u0000O"+
+		"\u0001\u0000\u0000\u0000\u0000Q\u0001\u0000\u0000\u0000\u0000S\u0001\u0000"+
+		"\u0000\u0000\u0000U\u0001\u0000\u0000\u0000\u0000W\u0001\u0000\u0000\u0000"+
+		"\u0000Y\u0001\u0000\u0000\u0000\u0000[\u0001\u0000\u0000\u0000\u0000]"+
+		"\u0001\u0000\u0000\u0000\u0000_\u0001\u0000\u0000\u0000\u0000a\u0001\u0000"+
+		"\u0000\u0000\u0000c\u0001\u0000\u0000\u0000\u0000e\u0001\u0000\u0000\u0000"+
+		"\u0000g\u0001\u0000\u0000\u0000\u0000i\u0001\u0000\u0000\u0000\u0000k"+
+		"\u0001\u0000\u0000\u0000\u0000m\u0001\u0000\u0000\u0000\u0000o\u0001\u0000"+
+		"\u0000\u0000\u0000q\u0001\u0000\u0000\u0000\u0000s\u0001\u0000\u0000\u0000"+
+		"\u0000u\u0001\u0000\u0000\u0000\u0000w\u0001\u0000\u0000\u0000\u0000y"+
+		"\u0001\u0000\u0000\u0000\u0000{\u0001\u0000\u0000\u0000\u0000}\u0001\u0000"+
+		"\u0000\u0000\u0000\u007f\u0001\u0000\u0000\u0000\u0000\u0081\u0001\u0000"+
+		"\u0000\u0000\u0000\u0083\u0001\u0000\u0000\u0000\u0000\u0085\u0001\u0000"+
+		"\u0000\u0000\u0000\u0087\u0001\u0000\u0000\u0000\u0000\u0089\u0001\u0000"+
+		"\u0000\u0000\u0000\u008b\u0001\u0000\u0000\u0000\u0000\u008d\u0001\u0000"+
+		"\u0000\u0000\u0000\u008f\u0001\u0000\u0000\u0000\u0000\u0091\u0001\u0000"+
+		"\u0000\u0000\u0000\u0093\u0001\u0000\u0000\u0000\u0000\u0095\u0001\u0000"+
+		"\u0000\u0000\u0000\u0097\u0001\u0000\u0000\u0000\u0000\u0099\u0001\u0000"+
+		"\u0000\u0000\u0000\u009b\u0001\u0000\u0000\u0000\u0001\u00a3\u0001\u0000"+
+		"\u0000\u0000\u0003\u00ab\u0001\u0000\u0000\u0000\u0005\u00b1\u0001\u0000"+
+		"\u0000\u0000\u0007\u00b7\u0001\u0000\u0000\u0000\t\u00bc\u0001\u0000\u0000"+
+		"\u0000\u000b\u00c3\u0001\u0000\u0000\u0000\r\u00cb\u0001\u0000\u0000\u0000"+
+		"\u000f\u00d0\u0001\u0000\u0000\u0000\u0011\u00d6\u0001\u0000\u0000\u0000"+
+		"\u0013\u00da\u0001\u0000\u0000\u0000\u0015\u00df\u0001\u0000\u0000\u0000"+
+		"\u0017\u00e4\u0001\u0000\u0000\u0000\u0019\u00ea\u0001\u0000\u0000\u0000"+
+		"\u001b\u00f1\u0001\u0000\u0000\u0000\u001d\u00f6\u0001\u0000\u0000\u0000"+
+		"\u001f\u00fe\u0001\u0000\u0000\u0000!\u0104\u0001\u0000\u0000\u0000#\u0109"+
+		"\u0001\u0000\u0000\u0000%\u0110\u0001\u0000\u0000\u0000\'\u0118\u0001"+
+		"\u0000\u0000\u0000)\u0122\u0001\u0000\u0000\u0000+\u0129\u0001\u0000\u0000"+
+		"\u0000-\u012d\u0001\u0000\u0000\u0000/\u0130\u0001\u0000\u0000\u00001"+
+		"\u0135\u0001\u0000\u0000\u00003\u0139\u0001\u0000\u0000\u00005\u013f\u0001"+
+		"\u0000\u0000\u00007\u0142\u0001\u0000\u0000\u00009\u0149\u0001\u0000\u0000"+
+		"\u0000;\u014e\u0001\u0000\u0000\u0000=\u0154\u0001\u0000\u0000\u0000?"+
+		"\u015d\u0001\u0000\u0000\u0000A\u0165\u0001\u0000\u0000\u0000C\u0167\u0001"+
+		"\u0000\u0000\u0000E\u0169\u0001\u0000\u0000\u0000G\u016b\u0001\u0000\u0000"+
+		"\u0000I\u016d\u0001\u0000\u0000\u0000K\u016f\u0001\u0000\u0000\u0000M"+
+		"\u0171\u0001\u0000\u0000\u0000O\u0173\u0001\u0000\u0000\u0000Q\u0175\u0001"+
+		"\u0000\u0000\u0000S\u0177\u0001\u0000\u0000\u0000U\u0179\u0001\u0000\u0000"+
+		"\u0000W\u017b\u0001\u0000\u0000\u0000Y\u017d\u0001\u0000\u0000\u0000["+
+		"\u017f\u0001\u0000\u0000\u0000]\u0181\u0001\u0000\u0000\u0000_\u0184\u0001"+
+		"\u0000\u0000\u0000a\u0187\u0001\u0000\u0000\u0000c\u018a\u0001\u0000\u0000"+
+		"\u0000e\u018d\u0001\u0000\u0000\u0000g\u018f\u0001\u0000\u0000\u0000i"+
+		"\u0191\u0001\u0000\u0000\u0000k\u0193\u0001\u0000\u0000\u0000m\u0195\u0001"+
+		"\u0000\u0000\u0000o\u0197\u0001\u0000\u0000\u0000q\u019a\u0001\u0000\u0000"+
+		"\u0000s\u019d\u0001\u0000\u0000\u0000u\u01a0\u0001\u0000\u0000\u0000w"+
+		"\u01a3\u0001\u0000\u0000\u0000y\u01a5\u0001\u0000\u0000\u0000{\u01a8\u0001"+
+		"\u0000\u0000\u0000}\u01aa\u0001\u0000\u0000\u0000\u007f\u01ad\u0001\u0000"+
+		"\u0000\u0000\u0081\u01b2\u0001\u0000\u0000\u0000\u0083\u01b6\u0001\u0000"+
+		"\u0000\u0000\u0085\u01b8\u0001\u0000\u0000\u0000\u0087\u01c6\u0001\u0000"+
+		"\u0000\u0000\u0089\u01d1\u0001\u0000\u0000\u0000\u008b\u01d5\u0001\u0000"+
+		"\u0000\u0000\u008d\u01e0\u0001\u0000\u0000\u0000\u008f\u0203\u0001\u0000"+
+		"\u0000\u0000\u0091\u020f\u0001\u0000\u0000\u0000\u0093\u0215\u0001\u0000"+
+		"\u0000\u0000\u0095\u0219\u0001\u0000\u0000\u0000\u0097\u021c\u0001\u0000"+
+		"\u0000\u0000\u0099\u021e\u0001\u0000\u0000\u0000\u009b\u0220\u0001\u0000"+
+		"\u0000\u0000\u009d\u0222\u0001\u0000\u0000\u0000\u009f\u022a\u0001\u0000"+
+		"\u0000\u0000\u00a1\u022c\u0001\u0000\u0000\u0000\u00a3\u00a4\u0005p\u0000"+
+		"\u0000\u00a4\u00a5\u0005a\u0000\u0000\u00a5\u00a6\u0005c\u0000\u0000\u00a6"+
+		"\u00a7\u0005k\u0000\u0000\u00a7\u00a8\u0005a\u0000\u0000\u00a8\u00a9\u0005"+
+		"g\u0000\u0000\u00a9\u00aa\u0005e\u0000\u0000\u00aa\u0002\u0001\u0000\u0000"+
+		"\u0000\u00ab\u00ac\u0005c\u0000\u0000\u00ac\u00ad\u0005l\u0000\u0000\u00ad"+
+		"\u00ae\u0005a\u0000\u0000\u00ae\u00af\u0005s\u0000\u0000\u00af\u00b0\u0005"+
+		"s\u0000\u0000\u00b0\u0004\u0001\u0000\u0000\u0000\u00b1\u00b2\u0005f\u0000"+
+		"\u0000\u00b2\u00b3\u0005a\u0000\u0000\u00b3\u00b4\u0005l\u0000\u0000\u00b4"+
+		"\u00b5\u0005s\u0000\u0000\u00b5\u00b6\u0005e\u0000\u0000\u00b6\u0006\u0001"+
+		"\u0000\u0000\u0000\u00b7\u00b8\u0005t\u0000\u0000\u00b8\u00b9\u0005r\u0000"+
+		"\u0000\u00b9\u00ba\u0005u\u0000\u0000\u00ba\u00bb\u0005e\u0000\u0000\u00bb"+
+		"\b\u0001\u0000\u0000\u0000\u00bc\u00bd\u0005s\u0000\u0000\u00bd\u00be"+
+		"\u0005t\u0000\u0000\u00be\u00bf\u0005a\u0000\u0000\u00bf\u00c0\u0005t"+
+		"\u0000\u0000\u00c0\u00c1\u0005i\u0000\u0000\u00c1\u00c2\u0005c\u0000\u0000"+
+		"\u00c2\n\u0001\u0000\u0000\u0000\u00c3\u00c4\u0005b\u0000\u0000\u00c4"+
+		"\u00c5\u0005o\u0000\u0000\u00c5\u00c6\u0005o\u0000\u0000\u00c6\u00c7\u0005"+
+		"l\u0000\u0000\u00c7\u00c8\u0005e\u0000\u0000\u00c8\u00c9\u0005a\u0000"+
+		"\u0000\u00c9\u00ca\u0005n\u0000\u0000\u00ca\f\u0001\u0000\u0000\u0000"+
+		"\u00cb\u00cc\u0005b\u0000\u0000\u00cc\u00cd\u0005y\u0000\u0000\u00cd\u00ce"+
+		"\u0005t\u0000\u0000\u00ce\u00cf\u0005e\u0000\u0000\u00cf\u000e\u0001\u0000"+
+		"\u0000\u0000\u00d0\u00d1\u0005s\u0000\u0000\u00d1\u00d2\u0005h\u0000\u0000"+
+		"\u00d2\u00d3\u0005o\u0000\u0000\u00d3\u00d4\u0005r\u0000\u0000\u00d4\u00d5"+
+		"\u0005t\u0000\u0000\u00d5\u0010\u0001\u0000\u0000\u0000\u00d6\u00d7\u0005"+
+		"i\u0000\u0000\u00d7\u00d8\u0005n\u0000\u0000\u00d8\u00d9\u0005t\u0000"+
+		"\u0000\u00d9\u0012\u0001\u0000\u0000\u0000\u00da\u00db\u0005l\u0000\u0000"+
+		"\u00db\u00dc\u0005o\u0000\u0000\u00dc\u00dd\u0005n\u0000\u0000\u00dd\u00de"+
+		"\u0005g\u0000\u0000\u00de\u0014\u0001\u0000\u0000\u0000\u00df\u00e0\u0005"+
+		"c\u0000\u0000\u00e0\u00e1\u0005h\u0000\u0000\u00e1\u00e2\u0005a\u0000"+
+		"\u0000\u00e2\u00e3\u0005r\u0000\u0000\u00e3\u0016\u0001\u0000\u0000\u0000"+
+		"\u00e4\u00e5\u0005f\u0000\u0000\u00e5\u00e6\u0005l\u0000\u0000\u00e6\u00e7"+
+		"\u0005o\u0000\u0000\u00e7\u00e8\u0005a\u0000\u0000\u00e8\u00e9\u0005t"+
+		"\u0000\u0000\u00e9\u0018\u0001\u0000\u0000\u0000\u00ea\u00eb\u0005d\u0000"+
+		"\u0000\u00eb\u00ec\u0005o\u0000\u0000\u00ec\u00ed\u0005u\u0000\u0000\u00ed"+
+		"\u00ee\u0005b\u0000\u0000\u00ee\u00ef\u0005l\u0000\u0000\u00ef\u00f0\u0005"+
+		"e\u0000\u0000\u00f0\u001a\u0001\u0000\u0000\u0000\u00f1\u00f2\u0005e\u0000"+
+		"\u0000\u00f2\u00f3\u0005n\u0000\u0000\u00f3\u00f4\u0005u\u0000\u0000\u00f4"+
+		"\u00f5\u0005m\u0000\u0000\u00f5\u001c\u0001\u0000\u0000\u0000\u00f6\u00f7"+
+		"\u0005e\u0000\u0000\u00f7\u00f8\u0005x\u0000\u0000\u00f8\u00f9\u0005t"+
+		"\u0000\u0000\u00f9\u00fa\u0005e\u0000\u0000\u00fa\u00fb\u0005n\u0000\u0000"+
+		"\u00fb\u00fc\u0005d\u0000\u0000\u00fc\u00fd\u0005s\u0000\u0000\u00fd\u001e"+
+		"\u0001\u0000\u0000\u0000\u00fe\u00ff\u0005s\u0000\u0000\u00ff\u0100\u0005"+
+		"u\u0000\u0000\u0100\u0101\u0005p\u0000\u0000\u0101\u0102\u0005e\u0000"+
+		"\u0000\u0102\u0103\u0005r\u0000\u0000\u0103 \u0001\u0000\u0000\u0000\u0104"+
+		"\u0105\u0005v\u0000\u0000\u0105\u0106\u0005o\u0000\u0000\u0106\u0107\u0005"+
+		"i\u0000\u0000\u0107\u0108\u0005d\u0000\u0000\u0108\"\u0001\u0000\u0000"+
+		"\u0000\u0109\u010a\u0005p\u0000\u0000\u010a\u010b\u0005u\u0000\u0000\u010b"+
+		"\u010c\u0005b\u0000\u0000\u010c\u010d\u0005l\u0000\u0000\u010d\u010e\u0005"+
+		"i\u0000\u0000\u010e\u010f\u0005c\u0000\u0000\u010f$\u0001\u0000\u0000"+
+		"\u0000\u0110\u0111\u0005p\u0000\u0000\u0111\u0112\u0005r\u0000\u0000\u0112"+
+		"\u0113\u0005i\u0000\u0000\u0113\u0114\u0005v\u0000\u0000\u0114\u0115\u0005"+
+		"a\u0000\u0000\u0115\u0116\u0005t\u0000\u0000\u0116\u0117\u0005e\u0000"+
+		"\u0000\u0117&\u0001\u0000\u0000\u0000\u0118\u0119\u0005p\u0000\u0000\u0119"+
+		"\u011a\u0005r\u0000\u0000\u011a\u011b\u0005o\u0000\u0000\u011b\u011c\u0005"+
+		"t\u0000\u0000\u011c\u011d\u0005e\u0000\u0000\u011d\u011e\u0005c\u0000"+
+		"\u0000\u011e\u011f\u0005t\u0000\u0000\u011f\u0120\u0005e\u0000\u0000\u0120"+
+		"\u0121\u0005d\u0000\u0000\u0121(\u0001\u0000\u0000\u0000\u0122\u0123\u0005"+
+		"r\u0000\u0000\u0123\u0124\u0005e\u0000\u0000\u0124\u0125\u0005t\u0000"+
+		"\u0000\u0125\u0126\u0005u\u0000\u0000\u0126\u0127\u0005r\u0000\u0000\u0127"+
+		"\u0128\u0005n\u0000\u0000\u0128*\u0001\u0000\u0000\u0000\u0129\u012a\u0005"+
+		"n\u0000\u0000\u012a\u012b\u0005e\u0000\u0000\u012b\u012c\u0005w\u0000"+
+		"\u0000\u012c,\u0001\u0000\u0000\u0000\u012d\u012e\u0005i\u0000\u0000\u012e"+
+		"\u012f\u0005f\u0000\u0000\u012f.\u0001\u0000\u0000\u0000\u0130\u0131\u0005"+
+		"e\u0000\u0000\u0131\u0132\u0005l\u0000\u0000\u0132\u0133\u0005s\u0000"+
+		"\u0000\u0133\u0134\u0005e\u0000\u0000\u01340\u0001\u0000\u0000\u0000\u0135"+
+		"\u0136\u0005f\u0000\u0000\u0136\u0137\u0005o\u0000\u0000\u0137\u0138\u0005"+
+		"r\u0000\u0000\u01382\u0001\u0000\u0000\u0000\u0139\u013a\u0005w\u0000"+
+		"\u0000\u013a\u013b\u0005h\u0000\u0000\u013b\u013c\u0005i\u0000\u0000\u013c"+
+		"\u013d\u0005l\u0000\u0000\u013d\u013e\u0005e\u0000\u0000\u013e4\u0001"+
+		"\u0000\u0000\u0000\u013f\u0140\u0005d\u0000\u0000\u0140\u0141\u0005o\u0000"+
+		"\u0000\u01416\u0001\u0000\u0000\u0000\u0142\u0143\u0005s\u0000\u0000\u0143"+
+		"\u0144\u0005w\u0000\u0000\u0144\u0145\u0005i\u0000\u0000\u0145\u0146\u0005"+
+		"t\u0000\u0000\u0146\u0147\u0005c\u0000\u0000\u0147\u0148\u0005h\u0000"+
+		"\u0000\u01488\u0001\u0000\u0000\u0000\u0149\u014a\u0005c\u0000\u0000\u014a"+
+		"\u014b\u0005a\u0000\u0000\u014b\u014c\u0005s\u0000\u0000\u014c\u014d\u0005"+
+		"e\u0000\u0000\u014d:\u0001\u0000\u0000\u0000\u014e\u014f\u0005b\u0000"+
+		"\u0000\u014f\u0150\u0005r\u0000\u0000\u0150\u0151\u0005e\u0000\u0000\u0151"+
+		"\u0152\u0005a\u0000\u0000\u0152\u0153\u0005k\u0000\u0000\u0153<\u0001"+
+		"\u0000\u0000\u0000\u0154\u0155\u0005c\u0000\u0000\u0155\u0156\u0005o\u0000"+
+		"\u0000\u0156\u0157\u0005n\u0000\u0000\u0157\u0158\u0005t\u0000\u0000\u0158"+
+		"\u0159\u0005i\u0000\u0000\u0159\u015a\u0005n\u0000\u0000\u015a\u015b\u0005"+
+		"u\u0000\u0000\u015b\u015c\u0005e\u0000\u0000\u015c>\u0001\u0000\u0000"+
+		"\u0000\u015d\u015e\u0005d\u0000\u0000\u015e\u015f\u0005e\u0000\u0000\u015f"+
+		"\u0160\u0005f\u0000\u0000\u0160\u0161\u0005a\u0000\u0000\u0161\u0162\u0005"+
+		"u\u0000\u0000\u0162\u0163\u0005l\u0000\u0000\u0163\u0164\u0005t\u0000"+
+		"\u0000\u0164@\u0001\u0000\u0000\u0000\u0165\u0166\u0003\u009dN\u0000\u0166"+
+		"B\u0001\u0000\u0000\u0000\u0167\u0168\u0005;\u0000\u0000\u0168D\u0001"+
+		"\u0000\u0000\u0000\u0169\u016a\u0005:\u0000\u0000\u016aF\u0001\u0000\u0000"+
+		"\u0000\u016b\u016c\u0005,\u0000\u0000\u016cH\u0001\u0000\u0000\u0000\u016d"+
+		"\u016e\u0005.\u0000\u0000\u016eJ\u0001\u0000\u0000\u0000\u016f\u0170\u0005"+
+		"(\u0000\u0000\u0170L\u0001\u0000\u0000\u0000\u0171\u0172\u0005)\u0000"+
+		"\u0000\u0172N\u0001\u0000\u0000\u0000\u0173\u0174\u0005[\u0000\u0000\u0174"+
+		"P\u0001\u0000\u0000\u0000\u0175\u0176\u0005]\u0000\u0000\u0176R\u0001"+
+		"\u0000\u0000\u0000\u0177\u0178\u0005{\u0000\u0000\u0178T\u0001\u0000\u0000"+
+		"\u0000\u0179\u017a\u0005}\u0000\u0000\u017aV\u0001\u0000\u0000\u0000\u017b"+
+		"\u017c\u0005<\u0000\u0000\u017cX\u0001\u0000\u0000\u0000\u017d\u017e\u0005"+
+		">\u0000\u0000\u017eZ\u0001\u0000\u0000\u0000\u017f\u0180\u0005=\u0000"+
+		"\u0000\u0180\\\u0001\u0000\u0000\u0000\u0181\u0182\u0005=\u0000\u0000"+
+		"\u0182\u0183\u0005=\u0000\u0000\u0183^\u0001\u0000\u0000\u0000\u0184\u0185"+
+		"\u0005!\u0000\u0000\u0185\u0186\u0005=\u0000\u0000\u0186`\u0001\u0000"+
+		"\u0000\u0000\u0187\u0188\u0005>\u0000\u0000\u0188\u0189\u0005=\u0000\u0000"+
+		"\u0189b\u0001\u0000\u0000\u0000\u018a\u018b\u0005<\u0000\u0000\u018b\u018c"+
+		"\u0005=\u0000\u0000\u018cd\u0001\u0000\u0000\u0000\u018d\u018e\u0005%"+
+		"\u0000\u0000\u018ef\u0001\u0000\u0000\u0000\u018f\u0190\u0005+\u0000\u0000"+
+		"\u0190h\u0001\u0000\u0000\u0000\u0191\u0192\u0005-\u0000\u0000\u0192j"+
+		"\u0001\u0000\u0000\u0000\u0193\u0194\u0005*\u0000\u0000\u0194l\u0001\u0000"+
+		"\u0000\u0000\u0195\u0196\u0005/\u0000\u0000\u0196n\u0001\u0000\u0000\u0000"+
+		"\u0197\u0198\u0005+\u0000\u0000\u0198\u0199\u0005+\u0000\u0000\u0199p"+
+		"\u0001\u0000\u0000\u0000\u019a\u019b\u0005-\u0000\u0000\u019b\u019c\u0005"+
+		"-\u0000\u0000\u019cr\u0001\u0000\u0000\u0000\u019d\u019e\u0005&\u0000"+
+		"\u0000\u019e\u019f\u0005&\u0000\u0000\u019ft\u0001\u0000\u0000\u0000\u01a0"+
+		"\u01a1\u0005|\u0000\u0000\u01a1\u01a2\u0005|\u0000\u0000\u01a2v\u0001"+
+		"\u0000\u0000\u0000\u01a3\u01a4\u0005!\u0000\u0000\u01a4x\u0001\u0000\u0000"+
+		"\u0000\u01a5\u01a6\u0005!\u0000\u0000\u01a6\u01a7\u0005!\u0000\u0000\u01a7"+
+		"z\u0001\u0000\u0000\u0000\u01a8\u01a9\u0005&\u0000\u0000\u01a9|\u0001"+
+		"\u0000\u0000\u0000\u01aa\u01ab\u0005|\u0000\u0000\u01ab~\u0001\u0000\u0000"+
+		"\u0000\u01ac\u01ae\u0005<\u0000\u0000\u01ad\u01ac\u0001\u0000\u0000\u0000"+
+		"\u01ae\u01af\u0001\u0000\u0000\u0000\u01af\u01ad\u0001\u0000\u0000\u0000"+
+		"\u01af\u01b0\u0001\u0000\u0000\u0000\u01b0\u0080\u0001\u0000\u0000\u0000"+
+		"\u01b1\u01b3\u0005>\u0000\u0000\u01b2\u01b1\u0001\u0000\u0000\u0000\u01b3"+
+		"\u01b4\u0001\u0000\u0000\u0000\u01b4\u01b2\u0001\u0000\u0000\u0000\u01b4"+
+		"\u01b5\u0001\u0000\u0000\u0000\u01b5\u0082\u0001\u0000\u0000\u0000\u01b6"+
+		"\u01b7\u0005^\u0000\u0000\u01b7\u0084\u0001\u0000\u0000\u0000\u01b8\u01b9"+
+		"\u0005/\u0000\u0000\u01b9\u01ba\u0005*\u0000\u0000\u01ba\u01be\u0001\u0000"+
+		"\u0000\u0000\u01bb\u01bd\t\u0000\u0000\u0000\u01bc\u01bb\u0001\u0000\u0000"+
+		"\u0000\u01bd\u01c0\u0001\u0000\u0000\u0000\u01be\u01bf\u0001\u0000\u0000"+
+		"\u0000\u01be\u01bc\u0001\u0000\u0000\u0000\u01bf\u01c1\u0001\u0000\u0000"+
+		"\u0000\u01c0\u01be\u0001\u0000\u0000\u0000\u01c1\u01c2\u0005*\u0000\u0000"+
+		"\u01c2\u01c3\u0005/\u0000\u0000\u01c3\u01c4\u0001\u0000\u0000\u0000\u01c4"+
+		"\u01c5\u0006B\u0000\u0000\u01c5\u0086\u0001\u0000\u0000\u0000\u01c6\u01c7"+
+		"\u0005/\u0000\u0000\u01c7\u01c8\u0005/\u0000\u0000\u01c8\u01cc\u0001\u0000"+
+		"\u0000\u0000\u01c9\u01cb\b\u0000\u0000\u0000\u01ca\u01c9\u0001\u0000\u0000"+
+		"\u0000\u01cb\u01ce\u0001\u0000\u0000\u0000\u01cc\u01ca\u0001\u0000\u0000"+
+		"\u0000\u01cc\u01cd\u0001\u0000\u0000\u0000\u01cd\u01cf\u0001\u0000\u0000"+
+		"\u0000\u01ce\u01cc\u0001\u0000\u0000\u0000\u01cf\u01d0\u0006C\u0000\u0000"+
+		"\u01d0\u0088\u0001\u0000\u0000\u0000\u01d1\u01d2\u0007\u0001\u0000\u0000"+
+		"\u01d2\u01d3\u0001\u0000\u0000\u0000\u01d3\u01d4\u0006D\u0000\u0000\u01d4"+
+		"\u008a\u0001\u0000\u0000\u0000\u01d5\u01db\u0005\"\u0000\u0000\u01d6\u01da"+
+		"\b\u0002\u0000\u0000\u01d7\u01d8\u0005/\u0000\u0000\u01d8\u01da\u0005"+
+		"\"\u0000\u0000\u01d9\u01d6\u0001\u0000\u0000\u0000\u01d9\u01d7\u0001\u0000"+
+		"\u0000\u0000\u01da\u01dd\u0001\u0000\u0000\u0000\u01db\u01d9\u0001\u0000"+
+		"\u0000\u0000\u01db\u01dc\u0001\u0000\u0000\u0000\u01dc\u01de\u0001\u0000"+
+		"\u0000\u0000\u01dd\u01db\u0001\u0000\u0000\u0000\u01de\u01df\u0005\"\u0000"+
+		"\u0000\u01df\u008c\u0001\u0000\u0000\u0000\u01e0\u01e6\u0005\'\u0000\u0000"+
+		"\u01e1\u01e5\b\u0002\u0000\u0000\u01e2\u01e3\u0005/\u0000\u0000\u01e3"+
+		"\u01e5\u0005\"\u0000\u0000\u01e4\u01e1\u0001\u0000\u0000\u0000\u01e4\u01e2"+
+		"\u0001\u0000\u0000\u0000\u01e5\u01e8\u0001\u0000\u0000\u0000\u01e6\u01e4"+
+		"\u0001\u0000\u0000\u0000\u01e6\u01e7\u0001\u0000\u0000\u0000\u01e7\u01e9"+
+		"\u0001\u0000\u0000\u0000\u01e8\u01e6\u0001\u0000\u0000\u0000\u01e9\u01ea"+
+		"\u0005\'\u0000\u0000\u01ea\u008e\u0001\u0000\u0000\u0000\u01eb\u01ec\u0003"+
+		"\u0093I\u0000\u01ec\u01ed\u0003I$\u0000\u01ed\u01ee\u0003\u0093I\u0000"+
+		"\u01ee\u0204\u0001\u0000\u0000\u0000\u01ef\u01f0\u0003I$\u0000\u01f0\u01f1"+
+		"\u0003\u0093I\u0000\u01f1\u0204\u0001\u0000\u0000\u0000\u01f2\u01f3\u0003"+
+		"\u0093I\u0000\u01f3\u01f4\u0003I$\u0000\u01f4\u0204\u0001\u0000\u0000"+
+		"\u0000\u01f5\u0204\u0003\u0093I\u0000\u01f6\u01f7\u0003\u0093I\u0000\u01f7"+
+		"\u01f8\u0003I$\u0000\u01f8\u01fa\u0001\u0000\u0000\u0000\u01f9\u01f6\u0001"+
+		"\u0000\u0000\u0000\u01f9\u01fa\u0001\u0000\u0000\u0000\u01fa\u01fb\u0001"+
+		"\u0000\u0000\u0000\u01fb\u01fc\u0003\u0093I\u0000\u01fc\u01ff\u0003\u0097"+
+		"K\u0000\u01fd\u0200\u0003g3\u0000\u01fe\u0200\u0003i4\u0000\u01ff\u01fd"+
+		"\u0001\u0000\u0000\u0000\u01ff\u01fe\u0001\u0000\u0000\u0000\u01ff\u0200"+
+		"\u0001\u0000\u0000\u0000\u0200\u0201\u0001\u0000\u0000\u0000\u0201\u0202"+
+		"\u0003\u0093I\u0000\u0202\u0204\u0001\u0000\u0000\u0000\u0203\u01eb\u0001"+
+		"\u0000\u0000\u0000\u0203\u01ef\u0001\u0000\u0000\u0000\u0203\u01f2\u0001"+
+		"\u0000\u0000\u0000\u0203\u01f5\u0001\u0000\u0000\u0000\u0203\u01f9\u0001"+
+		"\u0000\u0000\u0000\u0204\u0205\u0001\u0000\u0000\u0000\u0205\u0206\u0003"+
+		"\u0099L\u0000\u0206\u0090\u0001\u0000\u0000\u0000\u0207\u020b\u0007\u0003"+
+		"\u0000\u0000\u0208\u020a\u0003\u00a1P\u0000\u0209\u0208\u0001\u0000\u0000"+
+		"\u0000\u020a\u020d\u0001\u0000\u0000\u0000\u020b\u0209\u0001\u0000\u0000"+
+		"\u0000\u020b\u020c\u0001\u0000\u0000\u0000\u020c\u0210\u0001\u0000\u0000"+
+		"\u0000\u020d\u020b\u0001\u0000\u0000\u0000\u020e\u0210\u0007\u0004\u0000"+
+		"\u0000\u020f\u0207\u0001\u0000\u0000\u0000\u020f\u020e\u0001\u0000\u0000"+
+		"\u0000\u0210\u0211\u0001\u0000\u0000\u0000\u0211\u0212\u0003I$\u0000\u0212"+
+		"\u0213\u0003\u0093I\u0000\u0213\u0092\u0001\u0000\u0000\u0000\u0214\u0216"+
+		"\u0003\u00a1P\u0000\u0215\u0214\u0001\u0000\u0000\u0000\u0216\u0217\u0001"+
+		"\u0000\u0000\u0000\u0217\u0215\u0001\u0000\u0000\u0000\u0217\u0218\u0001"+
+		"\u0000\u0000\u0000\u0218\u0094\u0001\u0000\u0000\u0000\u0219\u021a\u0003"+
+		"\u0093I\u0000\u021a\u021b\u0003\u009bM\u0000\u021b\u0096\u0001\u0000\u0000"+
+		"\u0000\u021c\u021d\u0005e\u0000\u0000\u021d\u0098\u0001\u0000\u0000\u0000"+
+		"\u021e\u021f\u0005f\u0000\u0000\u021f\u009a\u0001\u0000\u0000\u0000\u0220"+
+		"\u0221\u0005L\u0000\u0000\u0221\u009c\u0001\u0000\u0000\u0000\u0222\u0227"+
+		"\u0003\u009fO\u0000\u0223\u0226\u0003\u00a1P\u0000\u0224\u0226\u0003\u009f"+
+		"O\u0000\u0225\u0223\u0001\u0000\u0000\u0000\u0225\u0224\u0001\u0000\u0000"+
+		"\u0000\u0226\u0229\u0001\u0000\u0000\u0000\u0227\u0225\u0001\u0000\u0000"+
+		"\u0000\u0227\u0228\u0001\u0000\u0000\u0000\u0228\u009e\u0001\u0000\u0000"+
+		"\u0000\u0229\u0227\u0001\u0000\u0000\u0000\u022a\u022b\u0007\u0005\u0000"+
+		"\u0000\u022b\u00a0\u0001\u0000\u0000\u0000\u022c\u022d\u0007\u0006\u0000"+
+		"\u0000\u022d\u00a2\u0001\u0000\u0000\u0000\u0011\u0000\u01af\u01b4\u01be"+
+		"\u01cc\u01d9\u01db\u01e4\u01e6\u01f9\u01ff\u0203\u020b\u020f\u0217\u0225"+
+		"\u0227\u0001\u0006\u0000\u0000";
+	public static final ATN _ATN =
+		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
+	static {
+		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
+		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
+			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
+		}
+	}
+}
\ No newline at end of file
Index: src/main/gen/MainAntlrListener.java
===================================================================
diff --git a/src/main/gen/MainAntlrListener.java b/src/main/gen/MainAntlrListener.java
new file mode 100644
--- /dev/null	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
+++ b/src/main/gen/MainAntlrListener.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -0,0 +1,602 @@
+// Generated from D:/Desktop/Master of Science/1. Semester/Concepts of Programming Languages/GruppenProjekt/githubrepo/compiler/src/main/antlr/MainAntlr.g4 by ANTLR 4.13.1
+
+package org.cmjava2023.generated_from_antlr;
+
+import org.antlr.v4.runtime.tree.ParseTreeListener;
+
+/**
+ * This interface defines a complete listener for a parse tree produced by
+ * {@link MainAntlrParser}.
+ */
+public interface MainAntlrListener extends ParseTreeListener {
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#start}.
+	 * @param ctx the parse tree
+	 */
+	void enterStart(MainAntlrParser.StartContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#start}.
+	 * @param ctx the parse tree
+	 */
+	void exitStart(MainAntlrParser.StartContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#global_scope}.
+	 * @param ctx the parse tree
+	 */
+	void enterGlobal_scope(MainAntlrParser.Global_scopeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#global_scope}.
+	 * @param ctx the parse tree
+	 */
+	void exitGlobal_scope(MainAntlrParser.Global_scopeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#class_scope}.
+	 * @param ctx the parse tree
+	 */
+	void enterClass_scope(MainAntlrParser.Class_scopeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#class_scope}.
+	 * @param ctx the parse tree
+	 */
+	void exitClass_scope(MainAntlrParser.Class_scopeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#function_scope}.
+	 * @param ctx the parse tree
+	 */
+	void enterFunction_scope(MainAntlrParser.Function_scopeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#function_scope}.
+	 * @param ctx the parse tree
+	 */
+	void exitFunction_scope(MainAntlrParser.Function_scopeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#block_scope}.
+	 * @param ctx the parse tree
+	 */
+	void enterBlock_scope(MainAntlrParser.Block_scopeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#block_scope}.
+	 * @param ctx the parse tree
+	 */
+	void exitBlock_scope(MainAntlrParser.Block_scopeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#expressions}.
+	 * @param ctx the parse tree
+	 */
+	void enterExpressions(MainAntlrParser.ExpressionsContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#expressions}.
+	 * @param ctx the parse tree
+	 */
+	void exitExpressions(MainAntlrParser.ExpressionsContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#variable_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void enterVariable_declaration(MainAntlrParser.Variable_declarationContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#variable_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void exitVariable_declaration(MainAntlrParser.Variable_declarationContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#assignment}.
+	 * @param ctx the parse tree
+	 */
+	void enterAssignment(MainAntlrParser.AssignmentContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#assignment}.
+	 * @param ctx the parse tree
+	 */
+	void exitAssignment(MainAntlrParser.AssignmentContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#expression}.
+	 * @param ctx the parse tree
+	 */
+	void enterExpression(MainAntlrParser.ExpressionContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#expression}.
+	 * @param ctx the parse tree
+	 */
+	void exitExpression(MainAntlrParser.ExpressionContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#expression_operator}.
+	 * @param ctx the parse tree
+	 */
+	void enterExpression_operator(MainAntlrParser.Expression_operatorContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#expression_operator}.
+	 * @param ctx the parse tree
+	 */
+	void exitExpression_operator(MainAntlrParser.Expression_operatorContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#expression_concatinator}.
+	 * @param ctx the parse tree
+	 */
+	void enterExpression_concatinator(MainAntlrParser.Expression_concatinatorContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#expression_concatinator}.
+	 * @param ctx the parse tree
+	 */
+	void exitExpression_concatinator(MainAntlrParser.Expression_concatinatorContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#expression_suffix}.
+	 * @param ctx the parse tree
+	 */
+	void enterExpression_suffix(MainAntlrParser.Expression_suffixContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#expression_suffix}.
+	 * @param ctx the parse tree
+	 */
+	void exitExpression_suffix(MainAntlrParser.Expression_suffixContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#instantiation}.
+	 * @param ctx the parse tree
+	 */
+	void enterInstantiation(MainAntlrParser.InstantiationContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#instantiation}.
+	 * @param ctx the parse tree
+	 */
+	void exitInstantiation(MainAntlrParser.InstantiationContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#access_index}.
+	 * @param ctx the parse tree
+	 */
+	void enterAccess_index(MainAntlrParser.Access_indexContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#access_index}.
+	 * @param ctx the parse tree
+	 */
+	void exitAccess_index(MainAntlrParser.Access_indexContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#numerical_comparison_operator}.
+	 * @param ctx the parse tree
+	 */
+	void enterNumerical_comparison_operator(MainAntlrParser.Numerical_comparison_operatorContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#numerical_comparison_operator}.
+	 * @param ctx the parse tree
+	 */
+	void exitNumerical_comparison_operator(MainAntlrParser.Numerical_comparison_operatorContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#numerical_prefix}.
+	 * @param ctx the parse tree
+	 */
+	void enterNumerical_prefix(MainAntlrParser.Numerical_prefixContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#numerical_prefix}.
+	 * @param ctx the parse tree
+	 */
+	void exitNumerical_prefix(MainAntlrParser.Numerical_prefixContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#logical_prefix}.
+	 * @param ctx the parse tree
+	 */
+	void enterLogical_prefix(MainAntlrParser.Logical_prefixContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#logical_prefix}.
+	 * @param ctx the parse tree
+	 */
+	void exitLogical_prefix(MainAntlrParser.Logical_prefixContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#logical_comparison_operator}.
+	 * @param ctx the parse tree
+	 */
+	void enterLogical_comparison_operator(MainAntlrParser.Logical_comparison_operatorContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#logical_comparison_operator}.
+	 * @param ctx the parse tree
+	 */
+	void exitLogical_comparison_operator(MainAntlrParser.Logical_comparison_operatorContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#bit_comparison_operator}.
+	 * @param ctx the parse tree
+	 */
+	void enterBit_comparison_operator(MainAntlrParser.Bit_comparison_operatorContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#bit_comparison_operator}.
+	 * @param ctx the parse tree
+	 */
+	void exitBit_comparison_operator(MainAntlrParser.Bit_comparison_operatorContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#package_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void enterPackage_declaration(MainAntlrParser.Package_declarationContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#package_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void exitPackage_declaration(MainAntlrParser.Package_declarationContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#class_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void enterClass_declaration(MainAntlrParser.Class_declarationContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#class_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void exitClass_declaration(MainAntlrParser.Class_declarationContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#enum_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void enterEnum_declaration(MainAntlrParser.Enum_declarationContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#enum_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void exitEnum_declaration(MainAntlrParser.Enum_declarationContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#if_statement}.
+	 * @param ctx the parse tree
+	 */
+	void enterIf_statement(MainAntlrParser.If_statementContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#if_statement}.
+	 * @param ctx the parse tree
+	 */
+	void exitIf_statement(MainAntlrParser.If_statementContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#else_statement}.
+	 * @param ctx the parse tree
+	 */
+	void enterElse_statement(MainAntlrParser.Else_statementContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#else_statement}.
+	 * @param ctx the parse tree
+	 */
+	void exitElse_statement(MainAntlrParser.Else_statementContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#if_else_statement}.
+	 * @param ctx the parse tree
+	 */
+	void enterIf_else_statement(MainAntlrParser.If_else_statementContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#if_else_statement}.
+	 * @param ctx the parse tree
+	 */
+	void exitIf_else_statement(MainAntlrParser.If_else_statementContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#switch_statement}.
+	 * @param ctx the parse tree
+	 */
+	void enterSwitch_statement(MainAntlrParser.Switch_statementContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#switch_statement}.
+	 * @param ctx the parse tree
+	 */
+	void exitSwitch_statement(MainAntlrParser.Switch_statementContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#switch_scope}.
+	 * @param ctx the parse tree
+	 */
+	void enterSwitch_scope(MainAntlrParser.Switch_scopeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#switch_scope}.
+	 * @param ctx the parse tree
+	 */
+	void exitSwitch_scope(MainAntlrParser.Switch_scopeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#return_statement}.
+	 * @param ctx the parse tree
+	 */
+	void enterReturn_statement(MainAntlrParser.Return_statementContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#return_statement}.
+	 * @param ctx the parse tree
+	 */
+	void exitReturn_statement(MainAntlrParser.Return_statementContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#break_statement}.
+	 * @param ctx the parse tree
+	 */
+	void enterBreak_statement(MainAntlrParser.Break_statementContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#break_statement}.
+	 * @param ctx the parse tree
+	 */
+	void exitBreak_statement(MainAntlrParser.Break_statementContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#continue_statement}.
+	 * @param ctx the parse tree
+	 */
+	void enterContinue_statement(MainAntlrParser.Continue_statementContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#continue_statement}.
+	 * @param ctx the parse tree
+	 */
+	void exitContinue_statement(MainAntlrParser.Continue_statementContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#identifier}.
+	 * @param ctx the parse tree
+	 */
+	void enterIdentifier(MainAntlrParser.IdentifierContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#identifier}.
+	 * @param ctx the parse tree
+	 */
+	void exitIdentifier(MainAntlrParser.IdentifierContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#type}.
+	 * @param ctx the parse tree
+	 */
+	void enterType(MainAntlrParser.TypeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#type}.
+	 * @param ctx the parse tree
+	 */
+	void exitType(MainAntlrParser.TypeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#integral_type}.
+	 * @param ctx the parse tree
+	 */
+	void enterIntegral_type(MainAntlrParser.Integral_typeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#integral_type}.
+	 * @param ctx the parse tree
+	 */
+	void exitIntegral_type(MainAntlrParser.Integral_typeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#floating_point_type}.
+	 * @param ctx the parse tree
+	 */
+	void enterFloating_point_type(MainAntlrParser.Floating_point_typeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#floating_point_type}.
+	 * @param ctx the parse tree
+	 */
+	void exitFloating_point_type(MainAntlrParser.Floating_point_typeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#numeric_type}.
+	 * @param ctx the parse tree
+	 */
+	void enterNumeric_type(MainAntlrParser.Numeric_typeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#numeric_type}.
+	 * @param ctx the parse tree
+	 */
+	void exitNumeric_type(MainAntlrParser.Numeric_typeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#primitive_type}.
+	 * @param ctx the parse tree
+	 */
+	void enterPrimitive_type(MainAntlrParser.Primitive_typeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#primitive_type}.
+	 * @param ctx the parse tree
+	 */
+	void exitPrimitive_type(MainAntlrParser.Primitive_typeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#reference_type}.
+	 * @param ctx the parse tree
+	 */
+	void enterReference_type(MainAntlrParser.Reference_typeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#reference_type}.
+	 * @param ctx the parse tree
+	 */
+	void exitReference_type(MainAntlrParser.Reference_typeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#class_type}.
+	 * @param ctx the parse tree
+	 */
+	void enterClass_type(MainAntlrParser.Class_typeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#class_type}.
+	 * @param ctx the parse tree
+	 */
+	void exitClass_type(MainAntlrParser.Class_typeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#type_arguments}.
+	 * @param ctx the parse tree
+	 */
+	void enterType_arguments(MainAntlrParser.Type_argumentsContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#type_arguments}.
+	 * @param ctx the parse tree
+	 */
+	void exitType_arguments(MainAntlrParser.Type_argumentsContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#type_argument_list}.
+	 * @param ctx the parse tree
+	 */
+	void enterType_argument_list(MainAntlrParser.Type_argument_listContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#type_argument_list}.
+	 * @param ctx the parse tree
+	 */
+	void exitType_argument_list(MainAntlrParser.Type_argument_listContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#type_argument}.
+	 * @param ctx the parse tree
+	 */
+	void enterType_argument(MainAntlrParser.Type_argumentContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#type_argument}.
+	 * @param ctx the parse tree
+	 */
+	void exitType_argument(MainAntlrParser.Type_argumentContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#wildcard}.
+	 * @param ctx the parse tree
+	 */
+	void enterWildcard(MainAntlrParser.WildcardContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#wildcard}.
+	 * @param ctx the parse tree
+	 */
+	void exitWildcard(MainAntlrParser.WildcardContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#type_variable}.
+	 * @param ctx the parse tree
+	 */
+	void enterType_variable(MainAntlrParser.Type_variableContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#type_variable}.
+	 * @param ctx the parse tree
+	 */
+	void exitType_variable(MainAntlrParser.Type_variableContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#array_type}.
+	 * @param ctx the parse tree
+	 */
+	void enterArray_type(MainAntlrParser.Array_typeContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#array_type}.
+	 * @param ctx the parse tree
+	 */
+	void exitArray_type(MainAntlrParser.Array_typeContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#array_expression}.
+	 * @param ctx the parse tree
+	 */
+	void enterArray_expression(MainAntlrParser.Array_expressionContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#array_expression}.
+	 * @param ctx the parse tree
+	 */
+	void exitArray_expression(MainAntlrParser.Array_expressionContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#while_loop}.
+	 * @param ctx the parse tree
+	 */
+	void enterWhile_loop(MainAntlrParser.While_loopContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#while_loop}.
+	 * @param ctx the parse tree
+	 */
+	void exitWhile_loop(MainAntlrParser.While_loopContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#do_while_loop}.
+	 * @param ctx the parse tree
+	 */
+	void enterDo_while_loop(MainAntlrParser.Do_while_loopContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#do_while_loop}.
+	 * @param ctx the parse tree
+	 */
+	void exitDo_while_loop(MainAntlrParser.Do_while_loopContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#for_loop}.
+	 * @param ctx the parse tree
+	 */
+	void enterFor_loop(MainAntlrParser.For_loopContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#for_loop}.
+	 * @param ctx the parse tree
+	 */
+	void exitFor_loop(MainAntlrParser.For_loopContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#for_init}.
+	 * @param ctx the parse tree
+	 */
+	void enterFor_init(MainAntlrParser.For_initContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#for_init}.
+	 * @param ctx the parse tree
+	 */
+	void exitFor_init(MainAntlrParser.For_initContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#for_termination}.
+	 * @param ctx the parse tree
+	 */
+	void enterFor_termination(MainAntlrParser.For_terminationContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#for_termination}.
+	 * @param ctx the parse tree
+	 */
+	void exitFor_termination(MainAntlrParser.For_terminationContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#for_update}.
+	 * @param ctx the parse tree
+	 */
+	void enterFor_update(MainAntlrParser.For_updateContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#for_update}.
+	 * @param ctx the parse tree
+	 */
+	void exitFor_update(MainAntlrParser.For_updateContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#casting}.
+	 * @param ctx the parse tree
+	 */
+	void enterCasting(MainAntlrParser.CastingContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#casting}.
+	 * @param ctx the parse tree
+	 */
+	void exitCasting(MainAntlrParser.CastingContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#access_modifier}.
+	 * @param ctx the parse tree
+	 */
+	void enterAccess_modifier(MainAntlrParser.Access_modifierContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#access_modifier}.
+	 * @param ctx the parse tree
+	 */
+	void exitAccess_modifier(MainAntlrParser.Access_modifierContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#function_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void enterFunction_declaration(MainAntlrParser.Function_declarationContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#function_declaration}.
+	 * @param ctx the parse tree
+	 */
+	void exitFunction_declaration(MainAntlrParser.Function_declarationContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#function_declaration_args}.
+	 * @param ctx the parse tree
+	 */
+	void enterFunction_declaration_args(MainAntlrParser.Function_declaration_argsContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#function_declaration_args}.
+	 * @param ctx the parse tree
+	 */
+	void exitFunction_declaration_args(MainAntlrParser.Function_declaration_argsContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#function_declaration_arg}.
+	 * @param ctx the parse tree
+	 */
+	void enterFunction_declaration_arg(MainAntlrParser.Function_declaration_argContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#function_declaration_arg}.
+	 * @param ctx the parse tree
+	 */
+	void exitFunction_declaration_arg(MainAntlrParser.Function_declaration_argContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#function_call}.
+	 * @param ctx the parse tree
+	 */
+	void enterFunction_call(MainAntlrParser.Function_callContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#function_call}.
+	 * @param ctx the parse tree
+	 */
+	void exitFunction_call(MainAntlrParser.Function_callContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#function_args}.
+	 * @param ctx the parse tree
+	 */
+	void enterFunction_args(MainAntlrParser.Function_argsContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#function_args}.
+	 * @param ctx the parse tree
+	 */
+	void exitFunction_args(MainAntlrParser.Function_argsContext ctx);
+	/**
+	 * Enter a parse tree produced by {@link MainAntlrParser#function_arg}.
+	 * @param ctx the parse tree
+	 */
+	void enterFunction_arg(MainAntlrParser.Function_argContext ctx);
+	/**
+	 * Exit a parse tree produced by {@link MainAntlrParser#function_arg}.
+	 * @param ctx the parse tree
+	 */
+	void exitFunction_arg(MainAntlrParser.Function_argContext ctx);
+}
\ No newline at end of file
Index: src/main/gen/MainAntlrParser.java
===================================================================
diff --git a/src/main/gen/MainAntlrParser.java b/src/main/gen/MainAntlrParser.java
new file mode 100644
--- /dev/null	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
+++ b/src/main/gen/MainAntlrParser.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -0,0 +1,4668 @@
+// Generated from D:/Desktop/Master of Science/1. Semester/Concepts of Programming Languages/GruppenProjekt/githubrepo/compiler/src/main/antlr/MainAntlr.g4 by ANTLR 4.13.1
+
+package org.cmjava2023.generated_from_antlr;
+
+import org.antlr.v4.runtime.atn.*;
+import org.antlr.v4.runtime.dfa.DFA;
+import org.antlr.v4.runtime.*;
+import org.antlr.v4.runtime.misc.*;
+import org.antlr.v4.runtime.tree.*;
+import java.util.List;
+import java.util.Iterator;
+import java.util.ArrayList;
+
+@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast", "CheckReturnValue"})
+public class MainAntlrParser extends Parser {
+	static { RuntimeMetaData.checkVersion("4.13.1", RuntimeMetaData.VERSION); }
+
+	protected static final DFA[] _decisionToDFA;
+	protected static final PredictionContextCache _sharedContextCache =
+		new PredictionContextCache();
+	public static final int
+		PACKAGE_KEYWORD=1, CLASS_KEYWORD=2, FALSE=3, TRUE=4, INSTANCE_MODIFIER=5, 
+		BOOLEAN_KEYWORD=6, BYTE_KEYWORD=7, SHORT_KEYWORD=8, INT_KEYWORD=9, LONG_KEYWORD=10, 
+		CHAR_KEYWORD=11, FLOAT_KEYWORD=12, DOUBLE_KEYWORD=13, ENUM_KEYWORD=14, 
+		EXTENDS_KEYWORD=15, SUPER_KEYWORD=16, VOID_KEYWORD=17, PUBLIC_KEYWORD=18, 
+		PRIVATE_KEYWORD=19, PROTECTED_KEYWORD=20, RETURN_KEYWORD=21, INSTANCE_KEYWORD=22, 
+		IF_KEYWORD=23, ELSE_KEYWORD=24, FOR_KEYWORD=25, WHILE_KEYWORD=26, DO_KEYWORD=27, 
+		SWITCH_KEYWORD=28, CASE_KEYWORD=29, BREAK_KEYWORD=30, CONTINUE_KEYWORD=31, 
+		DEFAULT_KEYWORD=32, IDENTIFIER=33, SEMICOLON=34, COLON=35, COMMA=36, DOT=37, 
+		PAREN_OPEN=38, PAREN_CLOSE=39, BRACKET_OPEN=40, BRACKET_CLOSE=41, CURLY_OPEN=42, 
+		CURLY_CLOSE=43, DIAMOND_OPEN=44, DIAMOND_CLOSE=45, EQUALS=46, EQ=47, NEQ=48, 
+		GTE=49, LTE=50, MOD=51, PLUS=52, MINUS=53, MULTIPLICATION=54, DIVISION=55, 
+		INC=56, DEC=57, LAND=58, LOR=59, NOT=60, NOTNOT=61, BAND=62, BOR=63, BIT_SHIFT_L=64, 
+		BIT_SHIFT_R=65, BXOR=66, COMMENT=67, LINE_COMMENT=68, WHITESPACE=69, STRING=70, 
+		CHARACTER=71, FLOAT=72, DECIMAL=73, INTEGER=74, LONG=75, FLOAT_EXPONENT_SUFFIX=76, 
+		FLOATING_POINT_SUFFIX=77, LONG_SUFFIX=78;
+	public static final int
+		RULE_start = 0, RULE_global_scope = 1, RULE_class_scope = 2, RULE_function_scope = 3, 
+		RULE_block_scope = 4, RULE_expressions = 5, RULE_variable_declaration = 6, 
+		RULE_assignment = 7, RULE_expression = 8, RULE_expression_operator = 9, 
+		RULE_expression_concatinator = 10, RULE_expression_suffix = 11, RULE_instantiation = 12, 
+		RULE_access_index = 13, RULE_numerical_comparison_operator = 14, RULE_numerical_prefix = 15, 
+		RULE_logical_prefix = 16, RULE_logical_comparison_operator = 17, RULE_bit_comparison_operator = 18, 
+		RULE_package_declaration = 19, RULE_class_declaration = 20, RULE_enum_declaration = 21, 
+		RULE_if_statement = 22, RULE_else_statement = 23, RULE_if_else_statement = 24, 
+		RULE_switch_statement = 25, RULE_switch_scope = 26, RULE_return_statement = 27, 
+		RULE_break_statement = 28, RULE_continue_statement = 29, RULE_identifier = 30, 
+		RULE_type = 31, RULE_integral_type = 32, RULE_floating_point_type = 33, 
+		RULE_numeric_type = 34, RULE_primitive_type = 35, RULE_reference_type = 36, 
+		RULE_class_type = 37, RULE_type_arguments = 38, RULE_type_argument_list = 39, 
+		RULE_type_argument = 40, RULE_wildcard = 41, RULE_type_variable = 42, 
+		RULE_array_type = 43, RULE_array_expression = 44, RULE_while_loop = 45, 
+		RULE_do_while_loop = 46, RULE_for_loop = 47, RULE_for_init = 48, RULE_for_termination = 49, 
+		RULE_for_update = 50, RULE_casting = 51, RULE_access_modifier = 52, RULE_function_declaration = 53, 
+		RULE_function_declaration_args = 54, RULE_function_declaration_arg = 55, 
+		RULE_function_call = 56, RULE_function_args = 57, RULE_function_arg = 58;
+	private static String[] makeRuleNames() {
+		return new String[] {
+			"start", "global_scope", "class_scope", "function_scope", "block_scope", 
+			"expressions", "variable_declaration", "assignment", "expression", "expression_operator", 
+			"expression_concatinator", "expression_suffix", "instantiation", "access_index", 
+			"numerical_comparison_operator", "numerical_prefix", "logical_prefix", 
+			"logical_comparison_operator", "bit_comparison_operator", "package_declaration", 
+			"class_declaration", "enum_declaration", "if_statement", "else_statement", 
+			"if_else_statement", "switch_statement", "switch_scope", "return_statement", 
+			"break_statement", "continue_statement", "identifier", "type", "integral_type", 
+			"floating_point_type", "numeric_type", "primitive_type", "reference_type", 
+			"class_type", "type_arguments", "type_argument_list", "type_argument", 
+			"wildcard", "type_variable", "array_type", "array_expression", "while_loop", 
+			"do_while_loop", "for_loop", "for_init", "for_termination", "for_update", 
+			"casting", "access_modifier", "function_declaration", "function_declaration_args", 
+			"function_declaration_arg", "function_call", "function_args", "function_arg"
+		};
+	}
+	public static final String[] ruleNames = makeRuleNames();
+
+	private static String[] makeLiteralNames() {
+		return new String[] {
+			null, "'package'", "'class'", "'false'", "'true'", "'static'", "'boolean'", 
+			"'byte'", "'short'", "'int'", "'long'", "'char'", "'float'", "'double'", 
+			"'enum'", "'extends'", "'super'", "'void'", "'public'", "'private'", 
+			"'protected'", "'return'", "'new'", "'if'", "'else'", "'for'", "'while'", 
+			"'do'", "'switch'", "'case'", "'break'", "'continue'", "'default'", null, 
+			"';'", "':'", "','", "'.'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
+			"'<'", "'>'", "'='", "'=='", "'!='", "'>='", "'<='", "'%'", "'+'", "'-'", 
+			"'*'", "'/'", "'++'", "'--'", "'&&'", "'||'", "'!'", "'!!'", "'&'", "'|'", 
+			null, null, "'^'", null, null, null, null, null, null, null, null, null, 
+			"'e'", "'f'", "'L'"
+		};
+	}
+	private static final String[] _LITERAL_NAMES = makeLiteralNames();
+	private static String[] makeSymbolicNames() {
+		return new String[] {
+			null, "PACKAGE_KEYWORD", "CLASS_KEYWORD", "FALSE", "TRUE", "INSTANCE_MODIFIER", 
+			"BOOLEAN_KEYWORD", "BYTE_KEYWORD", "SHORT_KEYWORD", "INT_KEYWORD", "LONG_KEYWORD", 
+			"CHAR_KEYWORD", "FLOAT_KEYWORD", "DOUBLE_KEYWORD", "ENUM_KEYWORD", "EXTENDS_KEYWORD", 
+			"SUPER_KEYWORD", "VOID_KEYWORD", "PUBLIC_KEYWORD", "PRIVATE_KEYWORD", 
+			"PROTECTED_KEYWORD", "RETURN_KEYWORD", "INSTANCE_KEYWORD", "IF_KEYWORD", 
+			"ELSE_KEYWORD", "FOR_KEYWORD", "WHILE_KEYWORD", "DO_KEYWORD", "SWITCH_KEYWORD", 
+			"CASE_KEYWORD", "BREAK_KEYWORD", "CONTINUE_KEYWORD", "DEFAULT_KEYWORD", 
+			"IDENTIFIER", "SEMICOLON", "COLON", "COMMA", "DOT", "PAREN_OPEN", "PAREN_CLOSE", 
+			"BRACKET_OPEN", "BRACKET_CLOSE", "CURLY_OPEN", "CURLY_CLOSE", "DIAMOND_OPEN", 
+			"DIAMOND_CLOSE", "EQUALS", "EQ", "NEQ", "GTE", "LTE", "MOD", "PLUS", 
+			"MINUS", "MULTIPLICATION", "DIVISION", "INC", "DEC", "LAND", "LOR", "NOT", 
+			"NOTNOT", "BAND", "BOR", "BIT_SHIFT_L", "BIT_SHIFT_R", "BXOR", "COMMENT", 
+			"LINE_COMMENT", "WHITESPACE", "STRING", "CHARACTER", "FLOAT", "DECIMAL", 
+			"INTEGER", "LONG", "FLOAT_EXPONENT_SUFFIX", "FLOATING_POINT_SUFFIX", 
+			"LONG_SUFFIX"
+		};
+	}
+	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
+	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);
+
+	/**
+	 * @deprecated Use {@link #VOCABULARY} instead.
+	 */
+	@Deprecated
+	public static final String[] tokenNames;
+	static {
+		tokenNames = new String[_SYMBOLIC_NAMES.length];
+		for (int i = 0; i < tokenNames.length; i++) {
+			tokenNames[i] = VOCABULARY.getLiteralName(i);
+			if (tokenNames[i] == null) {
+				tokenNames[i] = VOCABULARY.getSymbolicName(i);
+			}
+
+			if (tokenNames[i] == null) {
+				tokenNames[i] = "<INVALID>";
+			}
+		}
+	}
+
+	@Override
+	@Deprecated
+	public String[] getTokenNames() {
+		return tokenNames;
+	}
+
+	@Override
+
+	public Vocabulary getVocabulary() {
+		return VOCABULARY;
+	}
+
+	@Override
+	public String getGrammarFileName() { return "MainAntlr.g4"; }
+
+	@Override
+	public String[] getRuleNames() { return ruleNames; }
+
+	@Override
+	public String getSerializedATN() { return _serializedATN; }
+
+	@Override
+	public ATN getATN() { return _ATN; }
+
+	public MainAntlrParser(TokenStream input) {
+		super(input);
+		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class StartContext extends ParserRuleContext {
+		public List<Global_scopeContext> global_scope() {
+			return getRuleContexts(Global_scopeContext.class);
+		}
+		public Global_scopeContext global_scope(int i) {
+			return getRuleContext(Global_scopeContext.class,i);
+		}
+		public StartContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_start; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterStart(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitStart(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitStart(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final StartContext start() throws RecognitionException {
+		StartContext _localctx = new StartContext(_ctx, getState());
+		enterRule(_localctx, 0, RULE_start);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(119); 
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			do {
+				{
+				{
+				setState(118);
+				global_scope();
+				}
+				}
+				setState(121); 
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 1835010L) != 0) );
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Global_scopeContext extends ParserRuleContext {
+		public Class_declarationContext class_declaration() {
+			return getRuleContext(Class_declarationContext.class,0);
+		}
+		public Package_declarationContext package_declaration() {
+			return getRuleContext(Package_declarationContext.class,0);
+		}
+		public TerminalNode SEMICOLON() { return getToken(MainAntlrParser.SEMICOLON, 0); }
+		public Global_scopeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_global_scope; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterGlobal_scope(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitGlobal_scope(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitGlobal_scope(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Global_scopeContext global_scope() throws RecognitionException {
+		Global_scopeContext _localctx = new Global_scopeContext(_ctx, getState());
+		enterRule(_localctx, 2, RULE_global_scope);
+		try {
+			setState(127);
+			_errHandler.sync(this);
+			switch (_input.LA(1)) {
+			case PUBLIC_KEYWORD:
+			case PRIVATE_KEYWORD:
+			case PROTECTED_KEYWORD:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(123);
+				class_declaration();
+				}
+				break;
+			case PACKAGE_KEYWORD:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(124);
+				package_declaration();
+				setState(125);
+				match(SEMICOLON);
+				}
+				break;
+			default:
+				throw new NoViableAltException(this);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Class_scopeContext extends ParserRuleContext {
+		public List<Enum_declarationContext> enum_declaration() {
+			return getRuleContexts(Enum_declarationContext.class);
+		}
+		public Enum_declarationContext enum_declaration(int i) {
+			return getRuleContext(Enum_declarationContext.class,i);
+		}
+		public List<Class_declarationContext> class_declaration() {
+			return getRuleContexts(Class_declarationContext.class);
+		}
+		public Class_declarationContext class_declaration(int i) {
+			return getRuleContext(Class_declarationContext.class,i);
+		}
+		public List<Function_declarationContext> function_declaration() {
+			return getRuleContexts(Function_declarationContext.class);
+		}
+		public Function_declarationContext function_declaration(int i) {
+			return getRuleContext(Function_declarationContext.class,i);
+		}
+		public List<TerminalNode> SEMICOLON() { return getTokens(MainAntlrParser.SEMICOLON); }
+		public TerminalNode SEMICOLON(int i) {
+			return getToken(MainAntlrParser.SEMICOLON, i);
+		}
+		public List<Variable_declarationContext> variable_declaration() {
+			return getRuleContexts(Variable_declarationContext.class);
+		}
+		public Variable_declarationContext variable_declaration(int i) {
+			return getRuleContext(Variable_declarationContext.class,i);
+		}
+		public List<AssignmentContext> assignment() {
+			return getRuleContexts(AssignmentContext.class);
+		}
+		public AssignmentContext assignment(int i) {
+			return getRuleContext(AssignmentContext.class,i);
+		}
+		public Class_scopeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_class_scope; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterClass_scope(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitClass_scope(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitClass_scope(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Class_scopeContext class_scope() throws RecognitionException {
+		Class_scopeContext _localctx = new Class_scopeContext(_ctx, getState());
+		enterRule(_localctx, 4, RULE_class_scope);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(140);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8591802304L) != 0)) {
+				{
+				setState(138);
+				_errHandler.sync(this);
+				switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
+				case 1:
+					{
+					setState(129);
+					enum_declaration();
+					}
+					break;
+				case 2:
+					{
+					setState(130);
+					class_declaration();
+					}
+					break;
+				case 3:
+					{
+					setState(131);
+					function_declaration();
+					}
+					break;
+				case 4:
+					{
+					{
+					setState(134);
+					_errHandler.sync(this);
+					switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
+					case 1:
+						{
+						setState(132);
+						variable_declaration();
+						}
+						break;
+					case 2:
+						{
+						setState(133);
+						assignment();
+						}
+						break;
+					}
+					setState(136);
+					match(SEMICOLON);
+					}
+					}
+					break;
+				}
+				}
+				setState(142);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Function_scopeContext extends ParserRuleContext {
+		public List<Enum_declarationContext> enum_declaration() {
+			return getRuleContexts(Enum_declarationContext.class);
+		}
+		public Enum_declarationContext enum_declaration(int i) {
+			return getRuleContext(Enum_declarationContext.class,i);
+		}
+		public List<Block_scopeContext> block_scope() {
+			return getRuleContexts(Block_scopeContext.class);
+		}
+		public Block_scopeContext block_scope(int i) {
+			return getRuleContext(Block_scopeContext.class,i);
+		}
+		public List<TerminalNode> SEMICOLON() { return getTokens(MainAntlrParser.SEMICOLON); }
+		public TerminalNode SEMICOLON(int i) {
+			return getToken(MainAntlrParser.SEMICOLON, i);
+		}
+		public List<ExpressionsContext> expressions() {
+			return getRuleContexts(ExpressionsContext.class);
+		}
+		public ExpressionsContext expressions(int i) {
+			return getRuleContext(ExpressionsContext.class,i);
+		}
+		public List<AssignmentContext> assignment() {
+			return getRuleContexts(AssignmentContext.class);
+		}
+		public AssignmentContext assignment(int i) {
+			return getRuleContext(AssignmentContext.class,i);
+		}
+		public List<Variable_declarationContext> variable_declaration() {
+			return getRuleContexts(Variable_declarationContext.class);
+		}
+		public Variable_declarationContext variable_declaration(int i) {
+			return getRuleContext(Variable_declarationContext.class,i);
+		}
+		public List<Return_statementContext> return_statement() {
+			return getRuleContexts(Return_statementContext.class);
+		}
+		public Return_statementContext return_statement(int i) {
+			return getRuleContext(Return_statementContext.class,i);
+		}
+		public List<Continue_statementContext> continue_statement() {
+			return getRuleContexts(Continue_statementContext.class);
+		}
+		public Continue_statementContext continue_statement(int i) {
+			return getRuleContext(Continue_statementContext.class,i);
+		}
+		public List<Break_statementContext> break_statement() {
+			return getRuleContexts(Break_statementContext.class);
+		}
+		public Break_statementContext break_statement(int i) {
+			return getRuleContext(Break_statementContext.class,i);
+		}
+		public Function_scopeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_function_scope; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFunction_scope(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFunction_scope(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFunction_scope(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Function_scopeContext function_scope() throws RecognitionException {
+		Function_scopeContext _localctx = new Function_scopeContext(_ctx, getState());
+		enterRule(_localctx, 6, RULE_function_scope);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(157);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3472279997956259800L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 63L) != 0)) {
+				{
+				setState(155);
+				_errHandler.sync(this);
+				switch (_input.LA(1)) {
+				case ENUM_KEYWORD:
+					{
+					setState(143);
+					enum_declaration();
+					}
+					break;
+				case IF_KEYWORD:
+				case FOR_KEYWORD:
+				case WHILE_KEYWORD:
+				case DO_KEYWORD:
+				case SWITCH_KEYWORD:
+					{
+					setState(144);
+					block_scope();
+					}
+					break;
+				case FALSE:
+				case TRUE:
+				case BOOLEAN_KEYWORD:
+				case BYTE_KEYWORD:
+				case SHORT_KEYWORD:
+				case INT_KEYWORD:
+				case LONG_KEYWORD:
+				case CHAR_KEYWORD:
+				case FLOAT_KEYWORD:
+				case DOUBLE_KEYWORD:
+				case RETURN_KEYWORD:
+				case INSTANCE_KEYWORD:
+				case BREAK_KEYWORD:
+				case CONTINUE_KEYWORD:
+				case IDENTIFIER:
+				case PAREN_OPEN:
+				case CURLY_OPEN:
+				case PLUS:
+				case MINUS:
+				case NOT:
+				case NOTNOT:
+				case STRING:
+				case CHARACTER:
+				case FLOAT:
+				case DECIMAL:
+				case INTEGER:
+				case LONG:
+					{
+					setState(151);
+					_errHandler.sync(this);
+					switch ( getInterpreter().adaptivePredict(_input,5,_ctx) ) {
+					case 1:
+						{
+						setState(145);
+						expressions();
+						}
+						break;
+					case 2:
+						{
+						setState(146);
+						assignment();
+						}
+						break;
+					case 3:
+						{
+						setState(147);
+						variable_declaration();
+						}
+						break;
+					case 4:
+						{
+						setState(148);
+						return_statement();
+						}
+						break;
+					case 5:
+						{
+						setState(149);
+						continue_statement();
+						}
+						break;
+					case 6:
+						{
+						setState(150);
+						break_statement();
+						}
+						break;
+					}
+					setState(153);
+					match(SEMICOLON);
+					}
+					break;
+				default:
+					throw new NoViableAltException(this);
+				}
+				}
+				setState(159);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Block_scopeContext extends ParserRuleContext {
+		public If_statementContext if_statement() {
+			return getRuleContext(If_statementContext.class,0);
+		}
+		public If_else_statementContext if_else_statement() {
+			return getRuleContext(If_else_statementContext.class,0);
+		}
+		public While_loopContext while_loop() {
+			return getRuleContext(While_loopContext.class,0);
+		}
+		public Do_while_loopContext do_while_loop() {
+			return getRuleContext(Do_while_loopContext.class,0);
+		}
+		public For_loopContext for_loop() {
+			return getRuleContext(For_loopContext.class,0);
+		}
+		public Switch_statementContext switch_statement() {
+			return getRuleContext(Switch_statementContext.class,0);
+		}
+		public Block_scopeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_block_scope; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterBlock_scope(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitBlock_scope(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitBlock_scope(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Block_scopeContext block_scope() throws RecognitionException {
+		Block_scopeContext _localctx = new Block_scopeContext(_ctx, getState());
+		enterRule(_localctx, 8, RULE_block_scope);
+		try {
+			setState(166);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
+			case 1:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(160);
+				if_statement();
+				}
+				break;
+			case 2:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(161);
+				if_else_statement();
+				}
+				break;
+			case 3:
+				enterOuterAlt(_localctx, 3);
+				{
+				setState(162);
+				while_loop();
+				}
+				break;
+			case 4:
+				enterOuterAlt(_localctx, 4);
+				{
+				setState(163);
+				do_while_loop();
+				}
+				break;
+			case 5:
+				enterOuterAlt(_localctx, 5);
+				{
+				setState(164);
+				for_loop();
+				}
+				break;
+			case 6:
+				enterOuterAlt(_localctx, 6);
+				{
+				setState(165);
+				switch_statement();
+				}
+				break;
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class ExpressionsContext extends ParserRuleContext {
+		public List<ExpressionContext> expression() {
+			return getRuleContexts(ExpressionContext.class);
+		}
+		public ExpressionContext expression(int i) {
+			return getRuleContext(ExpressionContext.class,i);
+		}
+		public Expression_operatorContext expression_operator() {
+			return getRuleContext(Expression_operatorContext.class,0);
+		}
+		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_expressions; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterExpressions(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitExpressions(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitExpressions(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final ExpressionsContext expressions() throws RecognitionException {
+		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
+		enterRule(_localctx, 10, RULE_expressions);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(168);
+			expression(0);
+			setState(172);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
+			case 1:
+				{
+				setState(169);
+				expression_operator();
+				setState(170);
+				expression(0);
+				}
+				break;
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Variable_declarationContext extends ParserRuleContext {
+		public TerminalNode IDENTIFIER() { return getToken(MainAntlrParser.IDENTIFIER, 0); }
+		public Primitive_typeContext primitive_type() {
+			return getRuleContext(Primitive_typeContext.class,0);
+		}
+		public Reference_typeContext reference_type() {
+			return getRuleContext(Reference_typeContext.class,0);
+		}
+		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_variable_declaration; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterVariable_declaration(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitVariable_declaration(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitVariable_declaration(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Variable_declarationContext variable_declaration() throws RecognitionException {
+		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
+		enterRule(_localctx, 12, RULE_variable_declaration);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(176);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
+			case 1:
+				{
+				setState(174);
+				primitive_type();
+				}
+				break;
+			case 2:
+				{
+				setState(175);
+				reference_type();
+				}
+				break;
+			}
+			setState(178);
+			match(IDENTIFIER);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class AssignmentContext extends ParserRuleContext {
+		public TerminalNode EQUALS() { return getToken(MainAntlrParser.EQUALS, 0); }
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public Variable_declarationContext variable_declaration() {
+			return getRuleContext(Variable_declarationContext.class,0);
+		}
+		public IdentifierContext identifier() {
+			return getRuleContext(IdentifierContext.class,0);
+		}
+		public AssignmentContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_assignment; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterAssignment(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitAssignment(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitAssignment(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final AssignmentContext assignment() throws RecognitionException {
+		AssignmentContext _localctx = new AssignmentContext(_ctx, getState());
+		enterRule(_localctx, 14, RULE_assignment);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(182);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
+			case 1:
+				{
+				setState(180);
+				variable_declaration();
+				}
+				break;
+			case 2:
+				{
+				setState(181);
+				identifier();
+				}
+				break;
+			}
+			setState(184);
+			match(EQUALS);
+			setState(185);
+			expressions();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class ExpressionContext extends ParserRuleContext {
+		public Function_callContext function_call() {
+			return getRuleContext(Function_callContext.class,0);
+		}
+		public TerminalNode IDENTIFIER() { return getToken(MainAntlrParser.IDENTIFIER, 0); }
+		public TerminalNode STRING() { return getToken(MainAntlrParser.STRING, 0); }
+		public TerminalNode CHARACTER() { return getToken(MainAntlrParser.CHARACTER, 0); }
+		public TerminalNode FLOAT() { return getToken(MainAntlrParser.FLOAT, 0); }
+		public TerminalNode DECIMAL() { return getToken(MainAntlrParser.DECIMAL, 0); }
+		public TerminalNode INTEGER() { return getToken(MainAntlrParser.INTEGER, 0); }
+		public TerminalNode LONG() { return getToken(MainAntlrParser.LONG, 0); }
+		public TerminalNode FALSE() { return getToken(MainAntlrParser.FALSE, 0); }
+		public TerminalNode TRUE() { return getToken(MainAntlrParser.TRUE, 0); }
+		public IdentifierContext identifier() {
+			return getRuleContext(IdentifierContext.class,0);
+		}
+		public CastingContext casting() {
+			return getRuleContext(CastingContext.class,0);
+		}
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public List<ExpressionContext> expression() {
+			return getRuleContexts(ExpressionContext.class);
+		}
+		public ExpressionContext expression(int i) {
+			return getRuleContext(ExpressionContext.class,i);
+		}
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public Array_expressionContext array_expression() {
+			return getRuleContext(Array_expressionContext.class,0);
+		}
+		public InstantiationContext instantiation() {
+			return getRuleContext(InstantiationContext.class,0);
+		}
+		public Access_indexContext access_index() {
+			return getRuleContext(Access_indexContext.class,0);
+		}
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public Numerical_prefixContext numerical_prefix() {
+			return getRuleContext(Numerical_prefixContext.class,0);
+		}
+		public Logical_prefixContext logical_prefix() {
+			return getRuleContext(Logical_prefixContext.class,0);
+		}
+		public Expression_concatinatorContext expression_concatinator() {
+			return getRuleContext(Expression_concatinatorContext.class,0);
+		}
+		public Expression_suffixContext expression_suffix() {
+			return getRuleContext(Expression_suffixContext.class,0);
+		}
+		public ExpressionContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_expression; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterExpression(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitExpression(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitExpression(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final ExpressionContext expression() throws RecognitionException {
+		return expression(0);
+	}
+
+	private ExpressionContext expression(int _p) throws RecognitionException {
+		ParserRuleContext _parentctx = _ctx;
+		int _parentState = getState();
+		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
+		ExpressionContext _prevctx = _localctx;
+		int _startState = 16;
+		enterRecursionRule(_localctx, 16, RULE_expression, _p);
+		try {
+			int _alt;
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(213);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,13,_ctx) ) {
+			case 1:
+				{
+				setState(188);
+				function_call();
+				}
+				break;
+			case 2:
+				{
+				setState(189);
+				match(IDENTIFIER);
+				}
+				break;
+			case 3:
+				{
+				setState(190);
+				match(STRING);
+				}
+				break;
+			case 4:
+				{
+				setState(191);
+				match(CHARACTER);
+				}
+				break;
+			case 5:
+				{
+				setState(192);
+				match(FLOAT);
+				}
+				break;
+			case 6:
+				{
+				setState(193);
+				match(DECIMAL);
+				}
+				break;
+			case 7:
+				{
+				setState(194);
+				match(INTEGER);
+				}
+				break;
+			case 8:
+				{
+				setState(195);
+				match(LONG);
+				}
+				break;
+			case 9:
+				{
+				setState(196);
+				match(FALSE);
+				}
+				break;
+			case 10:
+				{
+				setState(197);
+				match(TRUE);
+				}
+				break;
+			case 11:
+				{
+				setState(198);
+				identifier();
+				}
+				break;
+			case 12:
+				{
+				setState(199);
+				casting();
+				}
+				break;
+			case 13:
+				{
+				setState(200);
+				match(PAREN_OPEN);
+				setState(201);
+				expression(0);
+				setState(202);
+				match(PAREN_CLOSE);
+				}
+				break;
+			case 14:
+				{
+				setState(204);
+				array_expression();
+				}
+				break;
+			case 15:
+				{
+				setState(205);
+				instantiation();
+				}
+				break;
+			case 16:
+				{
+				setState(206);
+				access_index();
+				}
+				break;
+			case 17:
+				{
+				setState(209);
+				_errHandler.sync(this);
+				switch (_input.LA(1)) {
+				case PLUS:
+				case MINUS:
+					{
+					setState(207);
+					numerical_prefix();
+					}
+					break;
+				case NOT:
+				case NOTNOT:
+					{
+					setState(208);
+					logical_prefix();
+					}
+					break;
+				default:
+					throw new NoViableAltException(this);
+				}
+				setState(211);
+				expressions();
+				}
+				break;
+			}
+			_ctx.stop = _input.LT(-1);
+			setState(223);
+			_errHandler.sync(this);
+			_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
+			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
+				if ( _alt==1 ) {
+					if ( _parseListeners!=null ) triggerExitRuleEvent();
+					_prevctx = _localctx;
+					{
+					setState(221);
+					_errHandler.sync(this);
+					switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
+					case 1:
+						{
+						_localctx = new ExpressionContext(_parentctx, _parentState);
+						pushNewRecursionContext(_localctx, _startState, RULE_expression);
+						setState(215);
+						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
+						setState(216);
+						expression_concatinator();
+						setState(217);
+						expression(7);
+						}
+						break;
+					case 2:
+						{
+						_localctx = new ExpressionContext(_parentctx, _parentState);
+						pushNewRecursionContext(_localctx, _startState, RULE_expression);
+						setState(219);
+						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
+						setState(220);
+						expression_suffix();
+						}
+						break;
+					}
+					} 
+				}
+				setState(225);
+				_errHandler.sync(this);
+				_alt = getInterpreter().adaptivePredict(_input,15,_ctx);
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			unrollRecursionContexts(_parentctx);
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Expression_operatorContext extends ParserRuleContext {
+		public Logical_comparison_operatorContext logical_comparison_operator() {
+			return getRuleContext(Logical_comparison_operatorContext.class,0);
+		}
+		public Numerical_comparison_operatorContext numerical_comparison_operator() {
+			return getRuleContext(Numerical_comparison_operatorContext.class,0);
+		}
+		public Bit_comparison_operatorContext bit_comparison_operator() {
+			return getRuleContext(Bit_comparison_operatorContext.class,0);
+		}
+		public Expression_operatorContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_expression_operator; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterExpression_operator(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitExpression_operator(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitExpression_operator(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Expression_operatorContext expression_operator() throws RecognitionException {
+		Expression_operatorContext _localctx = new Expression_operatorContext(_ctx, getState());
+		enterRule(_localctx, 18, RULE_expression_operator);
+		try {
+			setState(229);
+			_errHandler.sync(this);
+			switch (_input.LA(1)) {
+			case LAND:
+			case LOR:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(226);
+				logical_comparison_operator();
+				}
+				break;
+			case DIAMOND_OPEN:
+			case DIAMOND_CLOSE:
+			case EQ:
+			case NEQ:
+			case GTE:
+			case LTE:
+			case MOD:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(227);
+				numerical_comparison_operator();
+				}
+				break;
+			case BAND:
+			case BOR:
+			case BIT_SHIFT_L:
+			case BIT_SHIFT_R:
+			case BXOR:
+				enterOuterAlt(_localctx, 3);
+				{
+				setState(228);
+				bit_comparison_operator();
+				}
+				break;
+			default:
+				throw new NoViableAltException(this);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Expression_concatinatorContext extends ParserRuleContext {
+		public TerminalNode PLUS() { return getToken(MainAntlrParser.PLUS, 0); }
+		public TerminalNode DIVISION() { return getToken(MainAntlrParser.DIVISION, 0); }
+		public TerminalNode MULTIPLICATION() { return getToken(MainAntlrParser.MULTIPLICATION, 0); }
+		public TerminalNode MINUS() { return getToken(MainAntlrParser.MINUS, 0); }
+		public TerminalNode MOD() { return getToken(MainAntlrParser.MOD, 0); }
+		public TerminalNode DOT() { return getToken(MainAntlrParser.DOT, 0); }
+		public Expression_concatinatorContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_expression_concatinator; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterExpression_concatinator(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitExpression_concatinator(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitExpression_concatinator(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Expression_concatinatorContext expression_concatinator() throws RecognitionException {
+		Expression_concatinatorContext _localctx = new Expression_concatinatorContext(_ctx, getState());
+		enterRule(_localctx, 20, RULE_expression_concatinator);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(231);
+			_la = _input.LA(1);
+			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 69805931663196160L) != 0)) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Expression_suffixContext extends ParserRuleContext {
+		public TerminalNode DEC() { return getToken(MainAntlrParser.DEC, 0); }
+		public TerminalNode INC() { return getToken(MainAntlrParser.INC, 0); }
+		public Expression_suffixContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_expression_suffix; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterExpression_suffix(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitExpression_suffix(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitExpression_suffix(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Expression_suffixContext expression_suffix() throws RecognitionException {
+		Expression_suffixContext _localctx = new Expression_suffixContext(_ctx, getState());
+		enterRule(_localctx, 22, RULE_expression_suffix);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(233);
+			_la = _input.LA(1);
+			if ( !(_la==INC || _la==DEC) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class InstantiationContext extends ParserRuleContext {
+		public TerminalNode INSTANCE_KEYWORD() { return getToken(MainAntlrParser.INSTANCE_KEYWORD, 0); }
+		public TypeContext type() {
+			return getRuleContext(TypeContext.class,0);
+		}
+		public List<TerminalNode> BRACKET_OPEN() { return getTokens(MainAntlrParser.BRACKET_OPEN); }
+		public TerminalNode BRACKET_OPEN(int i) {
+			return getToken(MainAntlrParser.BRACKET_OPEN, i);
+		}
+		public List<TerminalNode> INTEGER() { return getTokens(MainAntlrParser.INTEGER); }
+		public TerminalNode INTEGER(int i) {
+			return getToken(MainAntlrParser.INTEGER, i);
+		}
+		public List<TerminalNode> BRACKET_CLOSE() { return getTokens(MainAntlrParser.BRACKET_CLOSE); }
+		public TerminalNode BRACKET_CLOSE(int i) {
+			return getToken(MainAntlrParser.BRACKET_CLOSE, i);
+		}
+		public InstantiationContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_instantiation; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterInstantiation(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitInstantiation(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitInstantiation(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final InstantiationContext instantiation() throws RecognitionException {
+		InstantiationContext _localctx = new InstantiationContext(_ctx, getState());
+		enterRule(_localctx, 24, RULE_instantiation);
+		try {
+			int _alt;
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(235);
+			match(INSTANCE_KEYWORD);
+			setState(245);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,18,_ctx) ) {
+			case 1:
+				{
+				setState(236);
+				type();
+				setState(240); 
+				_errHandler.sync(this);
+				_alt = 1;
+				do {
+					switch (_alt) {
+					case 1:
+						{
+						{
+						setState(237);
+						match(BRACKET_OPEN);
+						setState(238);
+						match(INTEGER);
+						setState(239);
+						match(BRACKET_CLOSE);
+						}
+						}
+						break;
+					default:
+						throw new NoViableAltException(this);
+					}
+					setState(242); 
+					_errHandler.sync(this);
+					_alt = getInterpreter().adaptivePredict(_input,17,_ctx);
+				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
+				}
+				break;
+			case 2:
+				{
+				setState(244);
+				type();
+				}
+				break;
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Access_indexContext extends ParserRuleContext {
+		public TerminalNode IDENTIFIER() { return getToken(MainAntlrParser.IDENTIFIER, 0); }
+		public List<TerminalNode> BRACKET_OPEN() { return getTokens(MainAntlrParser.BRACKET_OPEN); }
+		public TerminalNode BRACKET_OPEN(int i) {
+			return getToken(MainAntlrParser.BRACKET_OPEN, i);
+		}
+		public List<TerminalNode> INTEGER() { return getTokens(MainAntlrParser.INTEGER); }
+		public TerminalNode INTEGER(int i) {
+			return getToken(MainAntlrParser.INTEGER, i);
+		}
+		public List<TerminalNode> BRACKET_CLOSE() { return getTokens(MainAntlrParser.BRACKET_CLOSE); }
+		public TerminalNode BRACKET_CLOSE(int i) {
+			return getToken(MainAntlrParser.BRACKET_CLOSE, i);
+		}
+		public Access_indexContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_access_index; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterAccess_index(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitAccess_index(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitAccess_index(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Access_indexContext access_index() throws RecognitionException {
+		Access_indexContext _localctx = new Access_indexContext(_ctx, getState());
+		enterRule(_localctx, 26, RULE_access_index);
+		try {
+			int _alt;
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(247);
+			match(IDENTIFIER);
+			setState(251); 
+			_errHandler.sync(this);
+			_alt = 1;
+			do {
+				switch (_alt) {
+				case 1:
+					{
+					{
+					setState(248);
+					match(BRACKET_OPEN);
+					setState(249);
+					match(INTEGER);
+					setState(250);
+					match(BRACKET_CLOSE);
+					}
+					}
+					break;
+				default:
+					throw new NoViableAltException(this);
+				}
+				setState(253); 
+				_errHandler.sync(this);
+				_alt = getInterpreter().adaptivePredict(_input,19,_ctx);
+			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Numerical_comparison_operatorContext extends ParserRuleContext {
+		public TerminalNode DIAMOND_OPEN() { return getToken(MainAntlrParser.DIAMOND_OPEN, 0); }
+		public TerminalNode DIAMOND_CLOSE() { return getToken(MainAntlrParser.DIAMOND_CLOSE, 0); }
+		public TerminalNode NEQ() { return getToken(MainAntlrParser.NEQ, 0); }
+		public TerminalNode EQ() { return getToken(MainAntlrParser.EQ, 0); }
+		public TerminalNode LTE() { return getToken(MainAntlrParser.LTE, 0); }
+		public TerminalNode GTE() { return getToken(MainAntlrParser.GTE, 0); }
+		public TerminalNode MOD() { return getToken(MainAntlrParser.MOD, 0); }
+		public Numerical_comparison_operatorContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_numerical_comparison_operator; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterNumerical_comparison_operator(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitNumerical_comparison_operator(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitNumerical_comparison_operator(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Numerical_comparison_operatorContext numerical_comparison_operator() throws RecognitionException {
+		Numerical_comparison_operatorContext _localctx = new Numerical_comparison_operatorContext(_ctx, getState());
+		enterRule(_localctx, 28, RULE_numerical_comparison_operator);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(255);
+			_la = _input.LA(1);
+			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4415638697148416L) != 0)) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Numerical_prefixContext extends ParserRuleContext {
+		public TerminalNode PLUS() { return getToken(MainAntlrParser.PLUS, 0); }
+		public TerminalNode MINUS() { return getToken(MainAntlrParser.MINUS, 0); }
+		public Numerical_prefixContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_numerical_prefix; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterNumerical_prefix(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitNumerical_prefix(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitNumerical_prefix(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Numerical_prefixContext numerical_prefix() throws RecognitionException {
+		Numerical_prefixContext _localctx = new Numerical_prefixContext(_ctx, getState());
+		enterRule(_localctx, 30, RULE_numerical_prefix);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(257);
+			_la = _input.LA(1);
+			if ( !(_la==PLUS || _la==MINUS) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Logical_prefixContext extends ParserRuleContext {
+		public TerminalNode NOT() { return getToken(MainAntlrParser.NOT, 0); }
+		public TerminalNode NOTNOT() { return getToken(MainAntlrParser.NOTNOT, 0); }
+		public Logical_prefixContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_logical_prefix; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterLogical_prefix(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitLogical_prefix(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitLogical_prefix(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Logical_prefixContext logical_prefix() throws RecognitionException {
+		Logical_prefixContext _localctx = new Logical_prefixContext(_ctx, getState());
+		enterRule(_localctx, 32, RULE_logical_prefix);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(259);
+			_la = _input.LA(1);
+			if ( !(_la==NOT || _la==NOTNOT) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Logical_comparison_operatorContext extends ParserRuleContext {
+		public TerminalNode LAND() { return getToken(MainAntlrParser.LAND, 0); }
+		public TerminalNode LOR() { return getToken(MainAntlrParser.LOR, 0); }
+		public Logical_comparison_operatorContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_logical_comparison_operator; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterLogical_comparison_operator(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitLogical_comparison_operator(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitLogical_comparison_operator(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Logical_comparison_operatorContext logical_comparison_operator() throws RecognitionException {
+		Logical_comparison_operatorContext _localctx = new Logical_comparison_operatorContext(_ctx, getState());
+		enterRule(_localctx, 34, RULE_logical_comparison_operator);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(261);
+			_la = _input.LA(1);
+			if ( !(_la==LAND || _la==LOR) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Bit_comparison_operatorContext extends ParserRuleContext {
+		public TerminalNode BAND() { return getToken(MainAntlrParser.BAND, 0); }
+		public TerminalNode BOR() { return getToken(MainAntlrParser.BOR, 0); }
+		public TerminalNode BXOR() { return getToken(MainAntlrParser.BXOR, 0); }
+		public TerminalNode BIT_SHIFT_L() { return getToken(MainAntlrParser.BIT_SHIFT_L, 0); }
+		public TerminalNode BIT_SHIFT_R() { return getToken(MainAntlrParser.BIT_SHIFT_R, 0); }
+		public Bit_comparison_operatorContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_bit_comparison_operator; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterBit_comparison_operator(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitBit_comparison_operator(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitBit_comparison_operator(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Bit_comparison_operatorContext bit_comparison_operator() throws RecognitionException {
+		Bit_comparison_operatorContext _localctx = new Bit_comparison_operatorContext(_ctx, getState());
+		enterRule(_localctx, 36, RULE_bit_comparison_operator);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(263);
+			_la = _input.LA(1);
+			if ( !(((((_la - 62)) & ~0x3f) == 0 && ((1L << (_la - 62)) & 31L) != 0)) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Package_declarationContext extends ParserRuleContext {
+		public TerminalNode PACKAGE_KEYWORD() { return getToken(MainAntlrParser.PACKAGE_KEYWORD, 0); }
+		public IdentifierContext identifier() {
+			return getRuleContext(IdentifierContext.class,0);
+		}
+		public Package_declarationContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_package_declaration; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterPackage_declaration(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitPackage_declaration(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitPackage_declaration(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Package_declarationContext package_declaration() throws RecognitionException {
+		Package_declarationContext _localctx = new Package_declarationContext(_ctx, getState());
+		enterRule(_localctx, 38, RULE_package_declaration);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(265);
+			match(PACKAGE_KEYWORD);
+			setState(266);
+			identifier();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Class_declarationContext extends ParserRuleContext {
+		public Access_modifierContext access_modifier() {
+			return getRuleContext(Access_modifierContext.class,0);
+		}
+		public TerminalNode CLASS_KEYWORD() { return getToken(MainAntlrParser.CLASS_KEYWORD, 0); }
+		public TerminalNode IDENTIFIER() { return getToken(MainAntlrParser.IDENTIFIER, 0); }
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public Class_scopeContext class_scope() {
+			return getRuleContext(Class_scopeContext.class,0);
+		}
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public Class_declarationContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_class_declaration; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterClass_declaration(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitClass_declaration(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitClass_declaration(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Class_declarationContext class_declaration() throws RecognitionException {
+		Class_declarationContext _localctx = new Class_declarationContext(_ctx, getState());
+		enterRule(_localctx, 40, RULE_class_declaration);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(268);
+			access_modifier();
+			setState(269);
+			match(CLASS_KEYWORD);
+			setState(270);
+			match(IDENTIFIER);
+			setState(271);
+			match(CURLY_OPEN);
+			setState(272);
+			class_scope();
+			setState(273);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Enum_declarationContext extends ParserRuleContext {
+		public TerminalNode ENUM_KEYWORD() { return getToken(MainAntlrParser.ENUM_KEYWORD, 0); }
+		public List<TerminalNode> IDENTIFIER() { return getTokens(MainAntlrParser.IDENTIFIER); }
+		public TerminalNode IDENTIFIER(int i) {
+			return getToken(MainAntlrParser.IDENTIFIER, i);
+		}
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public List<TerminalNode> COMMA() { return getTokens(MainAntlrParser.COMMA); }
+		public TerminalNode COMMA(int i) {
+			return getToken(MainAntlrParser.COMMA, i);
+		}
+		public Enum_declarationContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_enum_declaration; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterEnum_declaration(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitEnum_declaration(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitEnum_declaration(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Enum_declarationContext enum_declaration() throws RecognitionException {
+		Enum_declarationContext _localctx = new Enum_declarationContext(_ctx, getState());
+		enterRule(_localctx, 42, RULE_enum_declaration);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(275);
+			match(ENUM_KEYWORD);
+			setState(276);
+			match(IDENTIFIER);
+			setState(277);
+			match(CURLY_OPEN);
+			setState(278);
+			match(IDENTIFIER);
+			setState(283);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			while (_la==COMMA) {
+				{
+				{
+				setState(279);
+				match(COMMA);
+				setState(280);
+				match(IDENTIFIER);
+				}
+				}
+				setState(285);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			}
+			setState(286);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class If_statementContext extends ParserRuleContext {
+		public TerminalNode IF_KEYWORD() { return getToken(MainAntlrParser.IF_KEYWORD, 0); }
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public Function_scopeContext function_scope() {
+			return getRuleContext(Function_scopeContext.class,0);
+		}
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public If_statementContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_if_statement; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterIf_statement(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitIf_statement(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitIf_statement(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final If_statementContext if_statement() throws RecognitionException {
+		If_statementContext _localctx = new If_statementContext(_ctx, getState());
+		enterRule(_localctx, 44, RULE_if_statement);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(288);
+			match(IF_KEYWORD);
+			setState(289);
+			match(PAREN_OPEN);
+			setState(290);
+			expressions();
+			setState(291);
+			match(PAREN_CLOSE);
+			setState(292);
+			match(CURLY_OPEN);
+			setState(293);
+			function_scope();
+			setState(294);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Else_statementContext extends ParserRuleContext {
+		public TerminalNode ELSE_KEYWORD() { return getToken(MainAntlrParser.ELSE_KEYWORD, 0); }
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public Function_scopeContext function_scope() {
+			return getRuleContext(Function_scopeContext.class,0);
+		}
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public Else_statementContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_else_statement; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterElse_statement(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitElse_statement(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitElse_statement(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Else_statementContext else_statement() throws RecognitionException {
+		Else_statementContext _localctx = new Else_statementContext(_ctx, getState());
+		enterRule(_localctx, 46, RULE_else_statement);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(296);
+			match(ELSE_KEYWORD);
+			setState(297);
+			match(CURLY_OPEN);
+			setState(298);
+			function_scope();
+			setState(299);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class If_else_statementContext extends ParserRuleContext {
+		public If_statementContext if_statement() {
+			return getRuleContext(If_statementContext.class,0);
+		}
+		public Else_statementContext else_statement() {
+			return getRuleContext(Else_statementContext.class,0);
+		}
+		public If_else_statementContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_if_else_statement; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterIf_else_statement(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitIf_else_statement(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitIf_else_statement(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final If_else_statementContext if_else_statement() throws RecognitionException {
+		If_else_statementContext _localctx = new If_else_statementContext(_ctx, getState());
+		enterRule(_localctx, 48, RULE_if_else_statement);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(301);
+			if_statement();
+			setState(302);
+			else_statement();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Switch_statementContext extends ParserRuleContext {
+		public TerminalNode SWITCH_KEYWORD() { return getToken(MainAntlrParser.SWITCH_KEYWORD, 0); }
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public Switch_scopeContext switch_scope() {
+			return getRuleContext(Switch_scopeContext.class,0);
+		}
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public Switch_statementContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_switch_statement; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterSwitch_statement(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitSwitch_statement(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitSwitch_statement(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Switch_statementContext switch_statement() throws RecognitionException {
+		Switch_statementContext _localctx = new Switch_statementContext(_ctx, getState());
+		enterRule(_localctx, 50, RULE_switch_statement);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(304);
+			match(SWITCH_KEYWORD);
+			setState(305);
+			match(PAREN_OPEN);
+			setState(306);
+			expressions();
+			setState(307);
+			match(PAREN_CLOSE);
+			setState(308);
+			match(CURLY_OPEN);
+			setState(309);
+			switch_scope();
+			setState(310);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Switch_scopeContext extends ParserRuleContext {
+		public TerminalNode DEFAULT_KEYWORD() { return getToken(MainAntlrParser.DEFAULT_KEYWORD, 0); }
+		public List<TerminalNode> COLON() { return getTokens(MainAntlrParser.COLON); }
+		public TerminalNode COLON(int i) {
+			return getToken(MainAntlrParser.COLON, i);
+		}
+		public List<Function_scopeContext> function_scope() {
+			return getRuleContexts(Function_scopeContext.class);
+		}
+		public Function_scopeContext function_scope(int i) {
+			return getRuleContext(Function_scopeContext.class,i);
+		}
+		public List<TerminalNode> CASE_KEYWORD() { return getTokens(MainAntlrParser.CASE_KEYWORD); }
+		public TerminalNode CASE_KEYWORD(int i) {
+			return getToken(MainAntlrParser.CASE_KEYWORD, i);
+		}
+		public List<ExpressionsContext> expressions() {
+			return getRuleContexts(ExpressionsContext.class);
+		}
+		public ExpressionsContext expressions(int i) {
+			return getRuleContext(ExpressionsContext.class,i);
+		}
+		public Switch_scopeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_switch_scope; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterSwitch_scope(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitSwitch_scope(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitSwitch_scope(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Switch_scopeContext switch_scope() throws RecognitionException {
+		Switch_scopeContext _localctx = new Switch_scopeContext(_ctx, getState());
+		enterRule(_localctx, 52, RULE_switch_scope);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(320);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			while (_la==CASE_KEYWORD) {
+				{
+				{
+				{
+				setState(312);
+				match(CASE_KEYWORD);
+				{
+				setState(313);
+				expressions();
+				}
+				}
+				setState(315);
+				match(COLON);
+				setState(316);
+				function_scope();
+				}
+				}
+				setState(322);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			}
+			setState(323);
+			match(DEFAULT_KEYWORD);
+			setState(324);
+			match(COLON);
+			setState(325);
+			function_scope();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Return_statementContext extends ParserRuleContext {
+		public TerminalNode RETURN_KEYWORD() { return getToken(MainAntlrParser.RETURN_KEYWORD, 0); }
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public Return_statementContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_return_statement; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterReturn_statement(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitReturn_statement(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitReturn_statement(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Return_statementContext return_statement() throws RecognitionException {
+		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
+		enterRule(_localctx, 54, RULE_return_statement);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(327);
+			match(RETURN_KEYWORD);
+			setState(328);
+			expressions();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Break_statementContext extends ParserRuleContext {
+		public TerminalNode BREAK_KEYWORD() { return getToken(MainAntlrParser.BREAK_KEYWORD, 0); }
+		public Break_statementContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_break_statement; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterBreak_statement(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitBreak_statement(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitBreak_statement(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Break_statementContext break_statement() throws RecognitionException {
+		Break_statementContext _localctx = new Break_statementContext(_ctx, getState());
+		enterRule(_localctx, 56, RULE_break_statement);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(330);
+			match(BREAK_KEYWORD);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Continue_statementContext extends ParserRuleContext {
+		public TerminalNode CONTINUE_KEYWORD() { return getToken(MainAntlrParser.CONTINUE_KEYWORD, 0); }
+		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_continue_statement; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterContinue_statement(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitContinue_statement(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitContinue_statement(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Continue_statementContext continue_statement() throws RecognitionException {
+		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
+		enterRule(_localctx, 58, RULE_continue_statement);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(332);
+			match(CONTINUE_KEYWORD);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class IdentifierContext extends ParserRuleContext {
+		public List<TerminalNode> IDENTIFIER() { return getTokens(MainAntlrParser.IDENTIFIER); }
+		public TerminalNode IDENTIFIER(int i) {
+			return getToken(MainAntlrParser.IDENTIFIER, i);
+		}
+		public List<TerminalNode> DOT() { return getTokens(MainAntlrParser.DOT); }
+		public TerminalNode DOT(int i) {
+			return getToken(MainAntlrParser.DOT, i);
+		}
+		public IdentifierContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_identifier; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterIdentifier(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitIdentifier(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitIdentifier(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final IdentifierContext identifier() throws RecognitionException {
+		IdentifierContext _localctx = new IdentifierContext(_ctx, getState());
+		enterRule(_localctx, 60, RULE_identifier);
+		try {
+			int _alt;
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(334);
+			match(IDENTIFIER);
+			setState(339);
+			_errHandler.sync(this);
+			_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
+			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
+				if ( _alt==1 ) {
+					{
+					{
+					setState(335);
+					match(DOT);
+					setState(336);
+					match(IDENTIFIER);
+					}
+					} 
+				}
+				setState(341);
+				_errHandler.sync(this);
+				_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class TypeContext extends ParserRuleContext {
+		public TerminalNode VOID_KEYWORD() { return getToken(MainAntlrParser.VOID_KEYWORD, 0); }
+		public Primitive_typeContext primitive_type() {
+			return getRuleContext(Primitive_typeContext.class,0);
+		}
+		public Array_typeContext array_type() {
+			return getRuleContext(Array_typeContext.class,0);
+		}
+		public Reference_typeContext reference_type() {
+			return getRuleContext(Reference_typeContext.class,0);
+		}
+		public TypeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_type; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterType(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitType(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitType(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final TypeContext type() throws RecognitionException {
+		TypeContext _localctx = new TypeContext(_ctx, getState());
+		enterRule(_localctx, 62, RULE_type);
+		try {
+			setState(346);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
+			case 1:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(342);
+				match(VOID_KEYWORD);
+				}
+				break;
+			case 2:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(343);
+				primitive_type();
+				}
+				break;
+			case 3:
+				enterOuterAlt(_localctx, 3);
+				{
+				setState(344);
+				array_type();
+				}
+				break;
+			case 4:
+				enterOuterAlt(_localctx, 4);
+				{
+				setState(345);
+				reference_type();
+				}
+				break;
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Integral_typeContext extends ParserRuleContext {
+		public TerminalNode BYTE_KEYWORD() { return getToken(MainAntlrParser.BYTE_KEYWORD, 0); }
+		public TerminalNode SHORT_KEYWORD() { return getToken(MainAntlrParser.SHORT_KEYWORD, 0); }
+		public TerminalNode INT_KEYWORD() { return getToken(MainAntlrParser.INT_KEYWORD, 0); }
+		public TerminalNode LONG_KEYWORD() { return getToken(MainAntlrParser.LONG_KEYWORD, 0); }
+		public TerminalNode CHAR_KEYWORD() { return getToken(MainAntlrParser.CHAR_KEYWORD, 0); }
+		public Integral_typeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_integral_type; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterIntegral_type(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitIntegral_type(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitIntegral_type(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Integral_typeContext integral_type() throws RecognitionException {
+		Integral_typeContext _localctx = new Integral_typeContext(_ctx, getState());
+		enterRule(_localctx, 64, RULE_integral_type);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(348);
+			_la = _input.LA(1);
+			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3968L) != 0)) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Floating_point_typeContext extends ParserRuleContext {
+		public TerminalNode FLOAT_KEYWORD() { return getToken(MainAntlrParser.FLOAT_KEYWORD, 0); }
+		public TerminalNode DOUBLE_KEYWORD() { return getToken(MainAntlrParser.DOUBLE_KEYWORD, 0); }
+		public Floating_point_typeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_floating_point_type; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFloating_point_type(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFloating_point_type(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFloating_point_type(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Floating_point_typeContext floating_point_type() throws RecognitionException {
+		Floating_point_typeContext _localctx = new Floating_point_typeContext(_ctx, getState());
+		enterRule(_localctx, 66, RULE_floating_point_type);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(350);
+			_la = _input.LA(1);
+			if ( !(_la==FLOAT_KEYWORD || _la==DOUBLE_KEYWORD) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Numeric_typeContext extends ParserRuleContext {
+		public Integral_typeContext integral_type() {
+			return getRuleContext(Integral_typeContext.class,0);
+		}
+		public Floating_point_typeContext floating_point_type() {
+			return getRuleContext(Floating_point_typeContext.class,0);
+		}
+		public Numeric_typeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_numeric_type; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterNumeric_type(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitNumeric_type(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitNumeric_type(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Numeric_typeContext numeric_type() throws RecognitionException {
+		Numeric_typeContext _localctx = new Numeric_typeContext(_ctx, getState());
+		enterRule(_localctx, 68, RULE_numeric_type);
+		try {
+			setState(354);
+			_errHandler.sync(this);
+			switch (_input.LA(1)) {
+			case BYTE_KEYWORD:
+			case SHORT_KEYWORD:
+			case INT_KEYWORD:
+			case LONG_KEYWORD:
+			case CHAR_KEYWORD:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(352);
+				integral_type();
+				}
+				break;
+			case FLOAT_KEYWORD:
+			case DOUBLE_KEYWORD:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(353);
+				floating_point_type();
+				}
+				break;
+			default:
+				throw new NoViableAltException(this);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Primitive_typeContext extends ParserRuleContext {
+		public Numeric_typeContext numeric_type() {
+			return getRuleContext(Numeric_typeContext.class,0);
+		}
+		public TerminalNode BOOLEAN_KEYWORD() { return getToken(MainAntlrParser.BOOLEAN_KEYWORD, 0); }
+		public Primitive_typeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_primitive_type; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterPrimitive_type(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitPrimitive_type(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitPrimitive_type(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Primitive_typeContext primitive_type() throws RecognitionException {
+		Primitive_typeContext _localctx = new Primitive_typeContext(_ctx, getState());
+		enterRule(_localctx, 70, RULE_primitive_type);
+		try {
+			setState(358);
+			_errHandler.sync(this);
+			switch (_input.LA(1)) {
+			case BYTE_KEYWORD:
+			case SHORT_KEYWORD:
+			case INT_KEYWORD:
+			case LONG_KEYWORD:
+			case CHAR_KEYWORD:
+			case FLOAT_KEYWORD:
+			case DOUBLE_KEYWORD:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(356);
+				numeric_type();
+				}
+				break;
+			case BOOLEAN_KEYWORD:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(357);
+				match(BOOLEAN_KEYWORD);
+				}
+				break;
+			default:
+				throw new NoViableAltException(this);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Reference_typeContext extends ParserRuleContext {
+		public Class_typeContext class_type() {
+			return getRuleContext(Class_typeContext.class,0);
+		}
+		public Type_variableContext type_variable() {
+			return getRuleContext(Type_variableContext.class,0);
+		}
+		public Array_typeContext array_type() {
+			return getRuleContext(Array_typeContext.class,0);
+		}
+		public Reference_typeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_reference_type; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterReference_type(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitReference_type(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitReference_type(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Reference_typeContext reference_type() throws RecognitionException {
+		Reference_typeContext _localctx = new Reference_typeContext(_ctx, getState());
+		enterRule(_localctx, 72, RULE_reference_type);
+		try {
+			setState(363);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
+			case 1:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(360);
+				class_type();
+				}
+				break;
+			case 2:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(361);
+				type_variable();
+				}
+				break;
+			case 3:
+				enterOuterAlt(_localctx, 3);
+				{
+				setState(362);
+				array_type();
+				}
+				break;
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Class_typeContext extends ParserRuleContext {
+		public TerminalNode IDENTIFIER() { return getToken(MainAntlrParser.IDENTIFIER, 0); }
+		public Type_argumentsContext type_arguments() {
+			return getRuleContext(Type_argumentsContext.class,0);
+		}
+		public Class_typeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_class_type; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterClass_type(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitClass_type(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitClass_type(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Class_typeContext class_type() throws RecognitionException {
+		Class_typeContext _localctx = new Class_typeContext(_ctx, getState());
+		enterRule(_localctx, 74, RULE_class_type);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(365);
+			match(IDENTIFIER);
+			setState(367);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
+			case 1:
+				{
+				setState(366);
+				type_arguments();
+				}
+				break;
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Type_argumentsContext extends ParserRuleContext {
+		public TerminalNode DIAMOND_OPEN() { return getToken(MainAntlrParser.DIAMOND_OPEN, 0); }
+		public Type_argument_listContext type_argument_list() {
+			return getRuleContext(Type_argument_listContext.class,0);
+		}
+		public TerminalNode DIAMOND_CLOSE() { return getToken(MainAntlrParser.DIAMOND_CLOSE, 0); }
+		public Type_argumentsContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_type_arguments; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterType_arguments(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitType_arguments(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitType_arguments(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Type_argumentsContext type_arguments() throws RecognitionException {
+		Type_argumentsContext _localctx = new Type_argumentsContext(_ctx, getState());
+		enterRule(_localctx, 76, RULE_type_arguments);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(369);
+			match(DIAMOND_OPEN);
+			setState(370);
+			type_argument_list();
+			setState(371);
+			match(DIAMOND_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Type_argument_listContext extends ParserRuleContext {
+		public List<Type_argumentContext> type_argument() {
+			return getRuleContexts(Type_argumentContext.class);
+		}
+		public Type_argumentContext type_argument(int i) {
+			return getRuleContext(Type_argumentContext.class,i);
+		}
+		public List<TerminalNode> COMMA() { return getTokens(MainAntlrParser.COMMA); }
+		public TerminalNode COMMA(int i) {
+			return getToken(MainAntlrParser.COMMA, i);
+		}
+		public Type_argument_listContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_type_argument_list; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterType_argument_list(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitType_argument_list(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitType_argument_list(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Type_argument_listContext type_argument_list() throws RecognitionException {
+		Type_argument_listContext _localctx = new Type_argument_listContext(_ctx, getState());
+		enterRule(_localctx, 78, RULE_type_argument_list);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(373);
+			type_argument();
+			setState(378);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			while (_la==COMMA) {
+				{
+				{
+				setState(374);
+				match(COMMA);
+				setState(375);
+				type_argument();
+				}
+				}
+				setState(380);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Type_argumentContext extends ParserRuleContext {
+		public Reference_typeContext reference_type() {
+			return getRuleContext(Reference_typeContext.class,0);
+		}
+		public WildcardContext wildcard() {
+			return getRuleContext(WildcardContext.class,0);
+		}
+		public Type_argumentContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_type_argument; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterType_argument(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitType_argument(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitType_argument(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Type_argumentContext type_argument() throws RecognitionException {
+		Type_argumentContext _localctx = new Type_argumentContext(_ctx, getState());
+		enterRule(_localctx, 80, RULE_type_argument);
+		try {
+			setState(383);
+			_errHandler.sync(this);
+			switch (_input.LA(1)) {
+			case BOOLEAN_KEYWORD:
+			case BYTE_KEYWORD:
+			case SHORT_KEYWORD:
+			case INT_KEYWORD:
+			case LONG_KEYWORD:
+			case CHAR_KEYWORD:
+			case FLOAT_KEYWORD:
+			case DOUBLE_KEYWORD:
+			case IDENTIFIER:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(381);
+				reference_type();
+				}
+				break;
+			case EXTENDS_KEYWORD:
+			case SUPER_KEYWORD:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(382);
+				wildcard();
+				}
+				break;
+			default:
+				throw new NoViableAltException(this);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class WildcardContext extends ParserRuleContext {
+		public TerminalNode EXTENDS_KEYWORD() { return getToken(MainAntlrParser.EXTENDS_KEYWORD, 0); }
+		public Reference_typeContext reference_type() {
+			return getRuleContext(Reference_typeContext.class,0);
+		}
+		public TerminalNode SUPER_KEYWORD() { return getToken(MainAntlrParser.SUPER_KEYWORD, 0); }
+		public WildcardContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_wildcard; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterWildcard(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitWildcard(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitWildcard(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final WildcardContext wildcard() throws RecognitionException {
+		WildcardContext _localctx = new WildcardContext(_ctx, getState());
+		enterRule(_localctx, 82, RULE_wildcard);
+		try {
+			setState(389);
+			_errHandler.sync(this);
+			switch (_input.LA(1)) {
+			case EXTENDS_KEYWORD:
+				enterOuterAlt(_localctx, 1);
+				{
+				setState(385);
+				match(EXTENDS_KEYWORD);
+				setState(386);
+				reference_type();
+				}
+				break;
+			case SUPER_KEYWORD:
+				enterOuterAlt(_localctx, 2);
+				{
+				setState(387);
+				match(SUPER_KEYWORD);
+				setState(388);
+				reference_type();
+				}
+				break;
+			default:
+				throw new NoViableAltException(this);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Type_variableContext extends ParserRuleContext {
+		public TerminalNode IDENTIFIER() { return getToken(MainAntlrParser.IDENTIFIER, 0); }
+		public Type_variableContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_type_variable; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterType_variable(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitType_variable(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitType_variable(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Type_variableContext type_variable() throws RecognitionException {
+		Type_variableContext _localctx = new Type_variableContext(_ctx, getState());
+		enterRule(_localctx, 84, RULE_type_variable);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(391);
+			match(IDENTIFIER);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Array_typeContext extends ParserRuleContext {
+		public Primitive_typeContext primitive_type() {
+			return getRuleContext(Primitive_typeContext.class,0);
+		}
+		public Class_typeContext class_type() {
+			return getRuleContext(Class_typeContext.class,0);
+		}
+		public Type_variableContext type_variable() {
+			return getRuleContext(Type_variableContext.class,0);
+		}
+		public List<TerminalNode> BRACKET_OPEN() { return getTokens(MainAntlrParser.BRACKET_OPEN); }
+		public TerminalNode BRACKET_OPEN(int i) {
+			return getToken(MainAntlrParser.BRACKET_OPEN, i);
+		}
+		public List<TerminalNode> BRACKET_CLOSE() { return getTokens(MainAntlrParser.BRACKET_CLOSE); }
+		public TerminalNode BRACKET_CLOSE(int i) {
+			return getToken(MainAntlrParser.BRACKET_CLOSE, i);
+		}
+		public Array_typeContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_array_type; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterArray_type(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitArray_type(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitArray_type(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Array_typeContext array_type() throws RecognitionException {
+		Array_typeContext _localctx = new Array_typeContext(_ctx, getState());
+		enterRule(_localctx, 86, RULE_array_type);
+		try {
+			int _alt;
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(396);
+			_errHandler.sync(this);
+			switch ( getInterpreter().adaptivePredict(_input,31,_ctx) ) {
+			case 1:
+				{
+				setState(393);
+				primitive_type();
+				}
+				break;
+			case 2:
+				{
+				setState(394);
+				class_type();
+				}
+				break;
+			case 3:
+				{
+				setState(395);
+				type_variable();
+				}
+				break;
+			}
+			setState(400); 
+			_errHandler.sync(this);
+			_alt = 1;
+			do {
+				switch (_alt) {
+				case 1:
+					{
+					{
+					setState(398);
+					match(BRACKET_OPEN);
+					setState(399);
+					match(BRACKET_CLOSE);
+					}
+					}
+					break;
+				default:
+					throw new NoViableAltException(this);
+				}
+				setState(402); 
+				_errHandler.sync(this);
+				_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
+			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Array_expressionContext extends ParserRuleContext {
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public List<ExpressionsContext> expressions() {
+			return getRuleContexts(ExpressionsContext.class);
+		}
+		public ExpressionsContext expressions(int i) {
+			return getRuleContext(ExpressionsContext.class,i);
+		}
+		public List<TerminalNode> COMMA() { return getTokens(MainAntlrParser.COMMA); }
+		public TerminalNode COMMA(int i) {
+			return getToken(MainAntlrParser.COMMA, i);
+		}
+		public Array_expressionContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_array_expression; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterArray_expression(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitArray_expression(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitArray_expression(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Array_expressionContext array_expression() throws RecognitionException {
+		Array_expressionContext _localctx = new Array_expressionContext(_ctx, getState());
+		enterRule(_localctx, 88, RULE_array_expression);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(404);
+			match(CURLY_OPEN);
+			{
+			{
+			setState(405);
+			expressions();
+			setState(410);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			while (_la==COMMA) {
+				{
+				{
+				setState(406);
+				match(COMMA);
+				setState(407);
+				expressions();
+				}
+				}
+				setState(412);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			}
+			}
+			}
+			setState(413);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class While_loopContext extends ParserRuleContext {
+		public TerminalNode WHILE_KEYWORD() { return getToken(MainAntlrParser.WHILE_KEYWORD, 0); }
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public Function_scopeContext function_scope() {
+			return getRuleContext(Function_scopeContext.class,0);
+		}
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public While_loopContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_while_loop; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterWhile_loop(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitWhile_loop(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitWhile_loop(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final While_loopContext while_loop() throws RecognitionException {
+		While_loopContext _localctx = new While_loopContext(_ctx, getState());
+		enterRule(_localctx, 90, RULE_while_loop);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(415);
+			match(WHILE_KEYWORD);
+			setState(416);
+			match(PAREN_OPEN);
+			setState(417);
+			expressions();
+			setState(418);
+			match(PAREN_CLOSE);
+			setState(419);
+			match(CURLY_OPEN);
+			setState(420);
+			function_scope();
+			setState(421);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Do_while_loopContext extends ParserRuleContext {
+		public TerminalNode DO_KEYWORD() { return getToken(MainAntlrParser.DO_KEYWORD, 0); }
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public Function_scopeContext function_scope() {
+			return getRuleContext(Function_scopeContext.class,0);
+		}
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public TerminalNode WHILE_KEYWORD() { return getToken(MainAntlrParser.WHILE_KEYWORD, 0); }
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public Do_while_loopContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_do_while_loop; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterDo_while_loop(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitDo_while_loop(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitDo_while_loop(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Do_while_loopContext do_while_loop() throws RecognitionException {
+		Do_while_loopContext _localctx = new Do_while_loopContext(_ctx, getState());
+		enterRule(_localctx, 92, RULE_do_while_loop);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(423);
+			match(DO_KEYWORD);
+			setState(424);
+			match(CURLY_OPEN);
+			setState(425);
+			function_scope();
+			setState(426);
+			match(CURLY_CLOSE);
+			setState(427);
+			match(WHILE_KEYWORD);
+			setState(428);
+			match(PAREN_OPEN);
+			setState(429);
+			expressions();
+			setState(430);
+			match(PAREN_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class For_loopContext extends ParserRuleContext {
+		public TerminalNode FOR_KEYWORD() { return getToken(MainAntlrParser.FOR_KEYWORD, 0); }
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public For_initContext for_init() {
+			return getRuleContext(For_initContext.class,0);
+		}
+		public List<TerminalNode> SEMICOLON() { return getTokens(MainAntlrParser.SEMICOLON); }
+		public TerminalNode SEMICOLON(int i) {
+			return getToken(MainAntlrParser.SEMICOLON, i);
+		}
+		public For_terminationContext for_termination() {
+			return getRuleContext(For_terminationContext.class,0);
+		}
+		public For_updateContext for_update() {
+			return getRuleContext(For_updateContext.class,0);
+		}
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public Function_scopeContext function_scope() {
+			return getRuleContext(Function_scopeContext.class,0);
+		}
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public For_loopContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_for_loop; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFor_loop(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFor_loop(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFor_loop(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final For_loopContext for_loop() throws RecognitionException {
+		For_loopContext _localctx = new For_loopContext(_ctx, getState());
+		enterRule(_localctx, 94, RULE_for_loop);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(432);
+			match(FOR_KEYWORD);
+			setState(433);
+			match(PAREN_OPEN);
+			setState(434);
+			for_init();
+			setState(435);
+			match(SEMICOLON);
+			setState(436);
+			for_termination();
+			setState(437);
+			match(SEMICOLON);
+			setState(438);
+			for_update();
+			setState(439);
+			match(PAREN_CLOSE);
+			setState(440);
+			match(CURLY_OPEN);
+			setState(441);
+			function_scope();
+			setState(442);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class For_initContext extends ParserRuleContext {
+		public AssignmentContext assignment() {
+			return getRuleContext(AssignmentContext.class,0);
+		}
+		public For_initContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_for_init; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFor_init(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFor_init(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFor_init(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final For_initContext for_init() throws RecognitionException {
+		For_initContext _localctx = new For_initContext(_ctx, getState());
+		enterRule(_localctx, 96, RULE_for_init);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(444);
+			assignment();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class For_terminationContext extends ParserRuleContext {
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public For_terminationContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_for_termination; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFor_termination(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFor_termination(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFor_termination(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final For_terminationContext for_termination() throws RecognitionException {
+		For_terminationContext _localctx = new For_terminationContext(_ctx, getState());
+		enterRule(_localctx, 98, RULE_for_termination);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(446);
+			expressions();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class For_updateContext extends ParserRuleContext {
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public For_updateContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_for_update; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFor_update(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFor_update(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFor_update(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final For_updateContext for_update() throws RecognitionException {
+		For_updateContext _localctx = new For_updateContext(_ctx, getState());
+		enterRule(_localctx, 100, RULE_for_update);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(448);
+			expressions();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class CastingContext extends ParserRuleContext {
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public TypeContext type() {
+			return getRuleContext(TypeContext.class,0);
+		}
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public CastingContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_casting; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterCasting(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitCasting(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitCasting(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final CastingContext casting() throws RecognitionException {
+		CastingContext _localctx = new CastingContext(_ctx, getState());
+		enterRule(_localctx, 102, RULE_casting);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(450);
+			match(PAREN_OPEN);
+			setState(451);
+			type();
+			setState(452);
+			match(PAREN_CLOSE);
+			setState(453);
+			expressions();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Access_modifierContext extends ParserRuleContext {
+		public TerminalNode PRIVATE_KEYWORD() { return getToken(MainAntlrParser.PRIVATE_KEYWORD, 0); }
+		public TerminalNode PUBLIC_KEYWORD() { return getToken(MainAntlrParser.PUBLIC_KEYWORD, 0); }
+		public TerminalNode PROTECTED_KEYWORD() { return getToken(MainAntlrParser.PROTECTED_KEYWORD, 0); }
+		public Access_modifierContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_access_modifier; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterAccess_modifier(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitAccess_modifier(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitAccess_modifier(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Access_modifierContext access_modifier() throws RecognitionException {
+		Access_modifierContext _localctx = new Access_modifierContext(_ctx, getState());
+		enterRule(_localctx, 104, RULE_access_modifier);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(455);
+			_la = _input.LA(1);
+			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1835008L) != 0)) ) {
+			_errHandler.recoverInline(this);
+			}
+			else {
+				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
+				_errHandler.reportMatch(this);
+				consume();
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Function_declarationContext extends ParserRuleContext {
+		public Access_modifierContext access_modifier() {
+			return getRuleContext(Access_modifierContext.class,0);
+		}
+		public TypeContext type() {
+			return getRuleContext(TypeContext.class,0);
+		}
+		public TerminalNode IDENTIFIER() { return getToken(MainAntlrParser.IDENTIFIER, 0); }
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public TerminalNode CURLY_OPEN() { return getToken(MainAntlrParser.CURLY_OPEN, 0); }
+		public Function_scopeContext function_scope() {
+			return getRuleContext(Function_scopeContext.class,0);
+		}
+		public TerminalNode CURLY_CLOSE() { return getToken(MainAntlrParser.CURLY_CLOSE, 0); }
+		public TerminalNode INSTANCE_MODIFIER() { return getToken(MainAntlrParser.INSTANCE_MODIFIER, 0); }
+		public Function_declaration_argsContext function_declaration_args() {
+			return getRuleContext(Function_declaration_argsContext.class,0);
+		}
+		public Function_declarationContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_function_declaration; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFunction_declaration(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFunction_declaration(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFunction_declaration(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Function_declarationContext function_declaration() throws RecognitionException {
+		Function_declarationContext _localctx = new Function_declarationContext(_ctx, getState());
+		enterRule(_localctx, 106, RULE_function_declaration);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(457);
+			access_modifier();
+			setState(459);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			if (_la==INSTANCE_MODIFIER) {
+				{
+				setState(458);
+				match(INSTANCE_MODIFIER);
+				}
+			}
+
+			setState(461);
+			type();
+			setState(462);
+			match(IDENTIFIER);
+			setState(463);
+			match(PAREN_OPEN);
+			setState(465);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8590081984L) != 0)) {
+				{
+				setState(464);
+				function_declaration_args();
+				}
+			}
+
+			setState(467);
+			match(PAREN_CLOSE);
+			setState(468);
+			match(CURLY_OPEN);
+			setState(469);
+			function_scope();
+			setState(470);
+			match(CURLY_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Function_declaration_argsContext extends ParserRuleContext {
+		public List<Function_declaration_argContext> function_declaration_arg() {
+			return getRuleContexts(Function_declaration_argContext.class);
+		}
+		public Function_declaration_argContext function_declaration_arg(int i) {
+			return getRuleContext(Function_declaration_argContext.class,i);
+		}
+		public List<TerminalNode> COMMA() { return getTokens(MainAntlrParser.COMMA); }
+		public TerminalNode COMMA(int i) {
+			return getToken(MainAntlrParser.COMMA, i);
+		}
+		public Function_declaration_argsContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_function_declaration_args; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFunction_declaration_args(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFunction_declaration_args(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFunction_declaration_args(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Function_declaration_argsContext function_declaration_args() throws RecognitionException {
+		Function_declaration_argsContext _localctx = new Function_declaration_argsContext(_ctx, getState());
+		enterRule(_localctx, 108, RULE_function_declaration_args);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(472);
+			function_declaration_arg();
+			setState(477);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			while (_la==COMMA) {
+				{
+				{
+				setState(473);
+				match(COMMA);
+				setState(474);
+				function_declaration_arg();
+				}
+				}
+				setState(479);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Function_declaration_argContext extends ParserRuleContext {
+		public TypeContext type() {
+			return getRuleContext(TypeContext.class,0);
+		}
+		public TerminalNode IDENTIFIER() { return getToken(MainAntlrParser.IDENTIFIER, 0); }
+		public Function_declaration_argContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_function_declaration_arg; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFunction_declaration_arg(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFunction_declaration_arg(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFunction_declaration_arg(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Function_declaration_argContext function_declaration_arg() throws RecognitionException {
+		Function_declaration_argContext _localctx = new Function_declaration_argContext(_ctx, getState());
+		enterRule(_localctx, 110, RULE_function_declaration_arg);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(480);
+			type();
+			setState(481);
+			match(IDENTIFIER);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Function_callContext extends ParserRuleContext {
+		public IdentifierContext identifier() {
+			return getRuleContext(IdentifierContext.class,0);
+		}
+		public TerminalNode PAREN_OPEN() { return getToken(MainAntlrParser.PAREN_OPEN, 0); }
+		public TerminalNode PAREN_CLOSE() { return getToken(MainAntlrParser.PAREN_CLOSE, 0); }
+		public Function_argsContext function_args() {
+			return getRuleContext(Function_argsContext.class,0);
+		}
+		public Function_callContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_function_call; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFunction_call(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFunction_call(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFunction_call(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Function_callContext function_call() throws RecognitionException {
+		Function_callContext _localctx = new Function_callContext(_ctx, getState());
+		enterRule(_localctx, 112, RULE_function_call);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(483);
+			identifier();
+			setState(484);
+			match(PAREN_OPEN);
+			setState(486);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 3472279994221199384L) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & 63L) != 0)) {
+				{
+				setState(485);
+				function_args();
+				}
+			}
+
+			setState(488);
+			match(PAREN_CLOSE);
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Function_argsContext extends ParserRuleContext {
+		public List<Function_argContext> function_arg() {
+			return getRuleContexts(Function_argContext.class);
+		}
+		public Function_argContext function_arg(int i) {
+			return getRuleContext(Function_argContext.class,i);
+		}
+		public List<TerminalNode> COMMA() { return getTokens(MainAntlrParser.COMMA); }
+		public TerminalNode COMMA(int i) {
+			return getToken(MainAntlrParser.COMMA, i);
+		}
+		public Function_argsContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_function_args; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFunction_args(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFunction_args(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFunction_args(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Function_argsContext function_args() throws RecognitionException {
+		Function_argsContext _localctx = new Function_argsContext(_ctx, getState());
+		enterRule(_localctx, 114, RULE_function_args);
+		int _la;
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(490);
+			function_arg();
+			setState(495);
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			while (_la==COMMA) {
+				{
+				{
+				setState(491);
+				match(COMMA);
+				setState(492);
+				function_arg();
+				}
+				}
+				setState(497);
+				_errHandler.sync(this);
+				_la = _input.LA(1);
+			}
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	@SuppressWarnings("CheckReturnValue")
+	public static class Function_argContext extends ParserRuleContext {
+		public ExpressionsContext expressions() {
+			return getRuleContext(ExpressionsContext.class,0);
+		}
+		public Function_argContext(ParserRuleContext parent, int invokingState) {
+			super(parent, invokingState);
+		}
+		@Override public int getRuleIndex() { return RULE_function_arg; }
+		@Override
+		public void enterRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).enterFunction_arg(this);
+		}
+		@Override
+		public void exitRule(ParseTreeListener listener) {
+			if ( listener instanceof MainAntlrListener ) ((MainAntlrListener)listener).exitFunction_arg(this);
+		}
+		@Override
+		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
+			if ( visitor instanceof MainAntlrVisitor ) return ((MainAntlrVisitor<? extends T>)visitor).visitFunction_arg(this);
+			else return visitor.visitChildren(this);
+		}
+	}
+
+	public final Function_argContext function_arg() throws RecognitionException {
+		Function_argContext _localctx = new Function_argContext(_ctx, getState());
+		enterRule(_localctx, 116, RULE_function_arg);
+		try {
+			enterOuterAlt(_localctx, 1);
+			{
+			setState(498);
+			expressions();
+			}
+		}
+		catch (RecognitionException re) {
+			_localctx.exception = re;
+			_errHandler.reportError(this, re);
+			_errHandler.recover(this, re);
+		}
+		finally {
+			exitRule();
+		}
+		return _localctx;
+	}
+
+	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
+		switch (ruleIndex) {
+		case 8:
+			return expression_sempred((ExpressionContext)_localctx, predIndex);
+		}
+		return true;
+	}
+	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
+		switch (predIndex) {
+		case 0:
+			return precpred(_ctx, 6);
+		case 1:
+			return precpred(_ctx, 1);
+		}
+		return true;
+	}
+
+	public static final String _serializedATN =
+		"\u0004\u0001N\u01f5\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002"+
+		"\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002"+
+		"\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002"+
+		"\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002"+
+		"\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007\u000f"+
+		"\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007\u0012"+
+		"\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007\u0015"+
+		"\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018"+
+		"\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b"+
+		"\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e"+
+		"\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007\"\u0002"+
+		"#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007\'\u0002"+
+		"(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007,\u0002"+
+		"-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u00071\u0002"+
+		"2\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u00076\u0002"+
+		"7\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0001\u0000\u0004\u0000"+
+		"x\b\u0000\u000b\u0000\f\u0000y\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
+		"\u0001\u0003\u0001\u0080\b\u0001\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
+		"\u0002\u0001\u0002\u0003\u0002\u0087\b\u0002\u0001\u0002\u0001\u0002\u0005"+
+		"\u0002\u008b\b\u0002\n\u0002\f\u0002\u008e\t\u0002\u0001\u0003\u0001\u0003"+
+		"\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
+		"\u0003\u0003\u0098\b\u0003\u0001\u0003\u0001\u0003\u0005\u0003\u009c\b"+
+		"\u0003\n\u0003\f\u0003\u009f\t\u0003\u0001\u0004\u0001\u0004\u0001\u0004"+
+		"\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u00a7\b\u0004\u0001\u0005"+
+		"\u0001\u0005\u0001\u0005\u0001\u0005\u0003\u0005\u00ad\b\u0005\u0001\u0006"+
+		"\u0001\u0006\u0003\u0006\u00b1\b\u0006\u0001\u0006\u0001\u0006\u0001\u0007"+
+		"\u0001\u0007\u0003\u0007\u00b7\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
+		"\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
+		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001"+
+		"\b\u0001\b\u0001\b\u0001\b\u0001\b\u0003\b\u00d2\b\b\u0001\b\u0001\b\u0003"+
+		"\b\u00d6\b\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0001\b\u0005\b\u00de"+
+		"\b\b\n\b\f\b\u00e1\t\b\u0001\t\u0001\t\u0001\t\u0003\t\u00e6\b\t\u0001"+
+		"\n\u0001\n\u0001\u000b\u0001\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
+		"\f\u0004\f\u00f1\b\f\u000b\f\f\f\u00f2\u0001\f\u0003\f\u00f6\b\f\u0001"+
+		"\r\u0001\r\u0001\r\u0001\r\u0004\r\u00fc\b\r\u000b\r\f\r\u00fd\u0001\u000e"+
+		"\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u0010\u0001\u0010\u0001\u0011"+
+		"\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0013\u0001\u0013\u0001\u0013"+
+		"\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
+		"\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015"+
+		"\u0001\u0015\u0005\u0015\u011a\b\u0015\n\u0015\f\u0015\u011d\t\u0015\u0001"+
+		"\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
+		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0017\u0001\u0017\u0001"+
+		"\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001"+
+		"\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001"+
+		"\u0019\u0001\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001"+
+		"\u001a\u0001\u001a\u0005\u001a\u013f\b\u001a\n\u001a\f\u001a\u0142\t\u001a"+
+		"\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b"+
+		"\u0001\u001b\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001e"+
+		"\u0001\u001e\u0001\u001e\u0005\u001e\u0152\b\u001e\n\u001e\f\u001e\u0155"+
+		"\t\u001e\u0001\u001f\u0001\u001f\u0001\u001f\u0001\u001f\u0003\u001f\u015b"+
+		"\b\u001f\u0001 \u0001 \u0001!\u0001!\u0001\"\u0001\"\u0003\"\u0163\b\""+
+		"\u0001#\u0001#\u0003#\u0167\b#\u0001$\u0001$\u0001$\u0003$\u016c\b$\u0001"+
+		"%\u0001%\u0003%\u0170\b%\u0001&\u0001&\u0001&\u0001&\u0001\'\u0001\'\u0001"+
+		"\'\u0005\'\u0179\b\'\n\'\f\'\u017c\t\'\u0001(\u0001(\u0003(\u0180\b(\u0001"+
+		")\u0001)\u0001)\u0001)\u0003)\u0186\b)\u0001*\u0001*\u0001+\u0001+\u0001"+
+		"+\u0003+\u018d\b+\u0001+\u0001+\u0004+\u0191\b+\u000b+\f+\u0192\u0001"+
+		",\u0001,\u0001,\u0001,\u0005,\u0199\b,\n,\f,\u019c\t,\u0001,\u0001,\u0001"+
+		"-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001-\u0001.\u0001.\u0001"+
+		".\u0001.\u0001.\u0001.\u0001.\u0001.\u0001.\u0001/\u0001/\u0001/\u0001"+
+		"/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u00010\u0001"+
+		"0\u00011\u00011\u00012\u00012\u00013\u00013\u00013\u00013\u00013\u0001"+
+		"4\u00014\u00015\u00015\u00035\u01cc\b5\u00015\u00015\u00015\u00015\u0003"+
+		"5\u01d2\b5\u00015\u00015\u00015\u00015\u00015\u00016\u00016\u00016\u0005"+
+		"6\u01dc\b6\n6\f6\u01df\t6\u00017\u00017\u00017\u00018\u00018\u00018\u0003"+
+		"8\u01e7\b8\u00018\u00018\u00019\u00019\u00019\u00059\u01ee\b9\n9\f9\u01f1"+
+		"\t9\u0001:\u0001:\u0001:\u0000\u0001\u0010;\u0000\u0002\u0004\u0006\b"+
+		"\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02"+
+		"468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprt\u0000\n\u0002\u0000%%37\u0001\u0000"+
+		"89\u0002\u0000,-/3\u0001\u000045\u0001\u0000<=\u0001\u0000:;\u0001\u0000"+
+		">B\u0001\u0000\u0007\u000b\u0001\u0000\f\r\u0001\u0000\u0012\u0014\u01ff"+
+		"\u0000w\u0001\u0000\u0000\u0000\u0002\u007f\u0001\u0000\u0000\u0000\u0004"+
+		"\u008c\u0001\u0000\u0000\u0000\u0006\u009d\u0001\u0000\u0000\u0000\b\u00a6"+
+		"\u0001\u0000\u0000\u0000\n\u00a8\u0001\u0000\u0000\u0000\f\u00b0\u0001"+
+		"\u0000\u0000\u0000\u000e\u00b6\u0001\u0000\u0000\u0000\u0010\u00d5\u0001"+
+		"\u0000\u0000\u0000\u0012\u00e5\u0001\u0000\u0000\u0000\u0014\u00e7\u0001"+
+		"\u0000\u0000\u0000\u0016\u00e9\u0001\u0000\u0000\u0000\u0018\u00eb\u0001"+
+		"\u0000\u0000\u0000\u001a\u00f7\u0001\u0000\u0000\u0000\u001c\u00ff\u0001"+
+		"\u0000\u0000\u0000\u001e\u0101\u0001\u0000\u0000\u0000 \u0103\u0001\u0000"+
+		"\u0000\u0000\"\u0105\u0001\u0000\u0000\u0000$\u0107\u0001\u0000\u0000"+
+		"\u0000&\u0109\u0001\u0000\u0000\u0000(\u010c\u0001\u0000\u0000\u0000*"+
+		"\u0113\u0001\u0000\u0000\u0000,\u0120\u0001\u0000\u0000\u0000.\u0128\u0001"+
+		"\u0000\u0000\u00000\u012d\u0001\u0000\u0000\u00002\u0130\u0001\u0000\u0000"+
+		"\u00004\u0140\u0001\u0000\u0000\u00006\u0147\u0001\u0000\u0000\u00008"+
+		"\u014a\u0001\u0000\u0000\u0000:\u014c\u0001\u0000\u0000\u0000<\u014e\u0001"+
+		"\u0000\u0000\u0000>\u015a\u0001\u0000\u0000\u0000@\u015c\u0001\u0000\u0000"+
+		"\u0000B\u015e\u0001\u0000\u0000\u0000D\u0162\u0001\u0000\u0000\u0000F"+
+		"\u0166\u0001\u0000\u0000\u0000H\u016b\u0001\u0000\u0000\u0000J\u016d\u0001"+
+		"\u0000\u0000\u0000L\u0171\u0001\u0000\u0000\u0000N\u0175\u0001\u0000\u0000"+
+		"\u0000P\u017f\u0001\u0000\u0000\u0000R\u0185\u0001\u0000\u0000\u0000T"+
+		"\u0187\u0001\u0000\u0000\u0000V\u018c\u0001\u0000\u0000\u0000X\u0194\u0001"+
+		"\u0000\u0000\u0000Z\u019f\u0001\u0000\u0000\u0000\\\u01a7\u0001\u0000"+
+		"\u0000\u0000^\u01b0\u0001\u0000\u0000\u0000`\u01bc\u0001\u0000\u0000\u0000"+
+		"b\u01be\u0001\u0000\u0000\u0000d\u01c0\u0001\u0000\u0000\u0000f\u01c2"+
+		"\u0001\u0000\u0000\u0000h\u01c7\u0001\u0000\u0000\u0000j\u01c9\u0001\u0000"+
+		"\u0000\u0000l\u01d8\u0001\u0000\u0000\u0000n\u01e0\u0001\u0000\u0000\u0000"+
+		"p\u01e3\u0001\u0000\u0000\u0000r\u01ea\u0001\u0000\u0000\u0000t\u01f2"+
+		"\u0001\u0000\u0000\u0000vx\u0003\u0002\u0001\u0000wv\u0001\u0000\u0000"+
+		"\u0000xy\u0001\u0000\u0000\u0000yw\u0001\u0000\u0000\u0000yz\u0001\u0000"+
+		"\u0000\u0000z\u0001\u0001\u0000\u0000\u0000{\u0080\u0003(\u0014\u0000"+
+		"|}\u0003&\u0013\u0000}~\u0005\"\u0000\u0000~\u0080\u0001\u0000\u0000\u0000"+
+		"\u007f{\u0001\u0000\u0000\u0000\u007f|\u0001\u0000\u0000\u0000\u0080\u0003"+
+		"\u0001\u0000\u0000\u0000\u0081\u008b\u0003*\u0015\u0000\u0082\u008b\u0003"+
+		"(\u0014\u0000\u0083\u008b\u0003j5\u0000\u0084\u0087\u0003\f\u0006\u0000"+
+		"\u0085\u0087\u0003\u000e\u0007\u0000\u0086\u0084\u0001\u0000\u0000\u0000"+
+		"\u0086\u0085\u0001\u0000\u0000\u0000\u0087\u0088\u0001\u0000\u0000\u0000"+
+		"\u0088\u0089\u0005\"\u0000\u0000\u0089\u008b\u0001\u0000\u0000\u0000\u008a"+
+		"\u0081\u0001\u0000\u0000\u0000\u008a\u0082\u0001\u0000\u0000\u0000\u008a"+
+		"\u0083\u0001\u0000\u0000\u0000\u008a\u0086\u0001\u0000\u0000\u0000\u008b"+
+		"\u008e\u0001\u0000\u0000\u0000\u008c\u008a\u0001\u0000\u0000\u0000\u008c"+
+		"\u008d\u0001\u0000\u0000\u0000\u008d\u0005\u0001\u0000\u0000\u0000\u008e"+
+		"\u008c\u0001\u0000\u0000\u0000\u008f\u009c\u0003*\u0015\u0000\u0090\u009c"+
+		"\u0003\b\u0004\u0000\u0091\u0098\u0003\n\u0005\u0000\u0092\u0098\u0003"+
+		"\u000e\u0007\u0000\u0093\u0098\u0003\f\u0006\u0000\u0094\u0098\u00036"+
+		"\u001b\u0000\u0095\u0098\u0003:\u001d\u0000\u0096\u0098\u00038\u001c\u0000"+
+		"\u0097\u0091\u0001\u0000\u0000\u0000\u0097\u0092\u0001\u0000\u0000\u0000"+
+		"\u0097\u0093\u0001\u0000\u0000\u0000\u0097\u0094\u0001\u0000\u0000\u0000"+
+		"\u0097\u0095\u0001\u0000\u0000\u0000\u0097\u0096\u0001\u0000\u0000\u0000"+
+		"\u0098\u0099\u0001\u0000\u0000\u0000\u0099\u009a\u0005\"\u0000\u0000\u009a"+
+		"\u009c\u0001\u0000\u0000\u0000\u009b\u008f\u0001\u0000\u0000\u0000\u009b"+
+		"\u0090\u0001\u0000\u0000\u0000\u009b\u0097\u0001\u0000\u0000\u0000\u009c"+
+		"\u009f\u0001\u0000\u0000\u0000\u009d\u009b\u0001\u0000\u0000\u0000\u009d"+
+		"\u009e\u0001\u0000\u0000\u0000\u009e\u0007\u0001\u0000\u0000\u0000\u009f"+
+		"\u009d\u0001\u0000\u0000\u0000\u00a0\u00a7\u0003,\u0016\u0000\u00a1\u00a7"+
+		"\u00030\u0018\u0000\u00a2\u00a7\u0003Z-\u0000\u00a3\u00a7\u0003\\.\u0000"+
+		"\u00a4\u00a7\u0003^/\u0000\u00a5\u00a7\u00032\u0019\u0000\u00a6\u00a0"+
+		"\u0001\u0000\u0000\u0000\u00a6\u00a1\u0001\u0000\u0000\u0000\u00a6\u00a2"+
+		"\u0001\u0000\u0000\u0000\u00a6\u00a3\u0001\u0000\u0000\u0000\u00a6\u00a4"+
+		"\u0001\u0000\u0000\u0000\u00a6\u00a5\u0001\u0000\u0000\u0000\u00a7\t\u0001"+
+		"\u0000\u0000\u0000\u00a8\u00ac\u0003\u0010\b\u0000\u00a9\u00aa\u0003\u0012"+
+		"\t\u0000\u00aa\u00ab\u0003\u0010\b\u0000\u00ab\u00ad\u0001\u0000\u0000"+
+		"\u0000\u00ac\u00a9\u0001\u0000\u0000\u0000\u00ac\u00ad\u0001\u0000\u0000"+
+		"\u0000\u00ad\u000b\u0001\u0000\u0000\u0000\u00ae\u00b1\u0003F#\u0000\u00af"+
+		"\u00b1\u0003H$\u0000\u00b0\u00ae\u0001\u0000\u0000\u0000\u00b0\u00af\u0001"+
+		"\u0000\u0000\u0000\u00b1\u00b2\u0001\u0000\u0000\u0000\u00b2\u00b3\u0005"+
+		"!\u0000\u0000\u00b3\r\u0001\u0000\u0000\u0000\u00b4\u00b7\u0003\f\u0006"+
+		"\u0000\u00b5\u00b7\u0003<\u001e\u0000\u00b6\u00b4\u0001\u0000\u0000\u0000"+
+		"\u00b6\u00b5\u0001\u0000\u0000\u0000\u00b7\u00b8\u0001\u0000\u0000\u0000"+
+		"\u00b8\u00b9\u0005.\u0000\u0000\u00b9\u00ba\u0003\n\u0005\u0000\u00ba"+
+		"\u000f\u0001\u0000\u0000\u0000\u00bb\u00bc\u0006\b\uffff\uffff\u0000\u00bc"+
+		"\u00d6\u0003p8\u0000\u00bd\u00d6\u0005!\u0000\u0000\u00be\u00d6\u0005"+
+		"F\u0000\u0000\u00bf\u00d6\u0005G\u0000\u0000\u00c0\u00d6\u0005H\u0000"+
+		"\u0000\u00c1\u00d6\u0005I\u0000\u0000\u00c2\u00d6\u0005J\u0000\u0000\u00c3"+
+		"\u00d6\u0005K\u0000\u0000\u00c4\u00d6\u0005\u0003\u0000\u0000\u00c5\u00d6"+
+		"\u0005\u0004\u0000\u0000\u00c6\u00d6\u0003<\u001e\u0000\u00c7\u00d6\u0003"+
+		"f3\u0000\u00c8\u00c9\u0005&\u0000\u0000\u00c9\u00ca\u0003\u0010\b\u0000"+
+		"\u00ca\u00cb\u0005\'\u0000\u0000\u00cb\u00d6\u0001\u0000\u0000\u0000\u00cc"+
+		"\u00d6\u0003X,\u0000\u00cd\u00d6\u0003\u0018\f\u0000\u00ce\u00d6\u0003"+
+		"\u001a\r\u0000\u00cf\u00d2\u0003\u001e\u000f\u0000\u00d0\u00d2\u0003 "+
+		"\u0010\u0000\u00d1\u00cf\u0001\u0000\u0000\u0000\u00d1\u00d0\u0001\u0000"+
+		"\u0000\u0000\u00d2\u00d3\u0001\u0000\u0000\u0000\u00d3\u00d4\u0003\n\u0005"+
+		"\u0000\u00d4\u00d6\u0001\u0000\u0000\u0000\u00d5\u00bb\u0001\u0000\u0000"+
+		"\u0000\u00d5\u00bd\u0001\u0000\u0000\u0000\u00d5\u00be\u0001\u0000\u0000"+
+		"\u0000\u00d5\u00bf\u0001\u0000\u0000\u0000\u00d5\u00c0\u0001\u0000\u0000"+
+		"\u0000\u00d5\u00c1\u0001\u0000\u0000\u0000\u00d5\u00c2\u0001\u0000\u0000"+
+		"\u0000\u00d5\u00c3\u0001\u0000\u0000\u0000\u00d5\u00c4\u0001\u0000\u0000"+
+		"\u0000\u00d5\u00c5\u0001\u0000\u0000\u0000\u00d5\u00c6\u0001\u0000\u0000"+
+		"\u0000\u00d5\u00c7\u0001\u0000\u0000\u0000\u00d5\u00c8\u0001\u0000\u0000"+
+		"\u0000\u00d5\u00cc\u0001\u0000\u0000\u0000\u00d5\u00cd\u0001\u0000\u0000"+
+		"\u0000\u00d5\u00ce\u0001\u0000\u0000\u0000\u00d5\u00d1\u0001\u0000\u0000"+
+		"\u0000\u00d6\u00df\u0001\u0000\u0000\u0000\u00d7\u00d8\n\u0006\u0000\u0000"+
+		"\u00d8\u00d9\u0003\u0014\n\u0000\u00d9\u00da\u0003\u0010\b\u0007\u00da"+
+		"\u00de\u0001\u0000\u0000\u0000\u00db\u00dc\n\u0001\u0000\u0000\u00dc\u00de"+
+		"\u0003\u0016\u000b\u0000\u00dd\u00d7\u0001\u0000\u0000\u0000\u00dd\u00db"+
+		"\u0001\u0000\u0000\u0000\u00de\u00e1\u0001\u0000\u0000\u0000\u00df\u00dd"+
+		"\u0001\u0000\u0000\u0000\u00df\u00e0\u0001\u0000\u0000\u0000\u00e0\u0011"+
+		"\u0001\u0000\u0000\u0000\u00e1\u00df\u0001\u0000\u0000\u0000\u00e2\u00e6"+
+		"\u0003\"\u0011\u0000\u00e3\u00e6\u0003\u001c\u000e\u0000\u00e4\u00e6\u0003"+
+		"$\u0012\u0000\u00e5\u00e2\u0001\u0000\u0000\u0000\u00e5\u00e3\u0001\u0000"+
+		"\u0000\u0000\u00e5\u00e4\u0001\u0000\u0000\u0000\u00e6\u0013\u0001\u0000"+
+		"\u0000\u0000\u00e7\u00e8\u0007\u0000\u0000\u0000\u00e8\u0015\u0001\u0000"+
+		"\u0000\u0000\u00e9\u00ea\u0007\u0001\u0000\u0000\u00ea\u0017\u0001\u0000"+
+		"\u0000\u0000\u00eb\u00f5\u0005\u0016\u0000\u0000\u00ec\u00f0\u0003>\u001f"+
+		"\u0000\u00ed\u00ee\u0005(\u0000\u0000\u00ee\u00ef\u0005J\u0000\u0000\u00ef"+
+		"\u00f1\u0005)\u0000\u0000\u00f0\u00ed\u0001\u0000\u0000\u0000\u00f1\u00f2"+
+		"\u0001\u0000\u0000\u0000\u00f2\u00f0\u0001\u0000\u0000\u0000\u00f2\u00f3"+
+		"\u0001\u0000\u0000\u0000\u00f3\u00f6\u0001\u0000\u0000\u0000\u00f4\u00f6"+
+		"\u0003>\u001f\u0000\u00f5\u00ec\u0001\u0000\u0000\u0000\u00f5\u00f4\u0001"+
+		"\u0000\u0000\u0000\u00f6\u0019\u0001\u0000\u0000\u0000\u00f7\u00fb\u0005"+
+		"!\u0000\u0000\u00f8\u00f9\u0005(\u0000\u0000\u00f9\u00fa\u0005J\u0000"+
+		"\u0000\u00fa\u00fc\u0005)\u0000\u0000\u00fb\u00f8\u0001\u0000\u0000\u0000"+
+		"\u00fc\u00fd\u0001\u0000\u0000\u0000\u00fd\u00fb\u0001\u0000\u0000\u0000"+
+		"\u00fd\u00fe\u0001\u0000\u0000\u0000\u00fe\u001b\u0001\u0000\u0000\u0000"+
+		"\u00ff\u0100\u0007\u0002\u0000\u0000\u0100\u001d\u0001\u0000\u0000\u0000"+
+		"\u0101\u0102\u0007\u0003\u0000\u0000\u0102\u001f\u0001\u0000\u0000\u0000"+
+		"\u0103\u0104\u0007\u0004\u0000\u0000\u0104!\u0001\u0000\u0000\u0000\u0105"+
+		"\u0106\u0007\u0005\u0000\u0000\u0106#\u0001\u0000\u0000\u0000\u0107\u0108"+
+		"\u0007\u0006\u0000\u0000\u0108%\u0001\u0000\u0000\u0000\u0109\u010a\u0005"+
+		"\u0001\u0000\u0000\u010a\u010b\u0003<\u001e\u0000\u010b\'\u0001\u0000"+
+		"\u0000\u0000\u010c\u010d\u0003h4\u0000\u010d\u010e\u0005\u0002\u0000\u0000"+
+		"\u010e\u010f\u0005!\u0000\u0000\u010f\u0110\u0005*\u0000\u0000\u0110\u0111"+
+		"\u0003\u0004\u0002\u0000\u0111\u0112\u0005+\u0000\u0000\u0112)\u0001\u0000"+
+		"\u0000\u0000\u0113\u0114\u0005\u000e\u0000\u0000\u0114\u0115\u0005!\u0000"+
+		"\u0000\u0115\u0116\u0005*\u0000\u0000\u0116\u011b\u0005!\u0000\u0000\u0117"+
+		"\u0118\u0005$\u0000\u0000\u0118\u011a\u0005!\u0000\u0000\u0119\u0117\u0001"+
+		"\u0000\u0000\u0000\u011a\u011d\u0001\u0000\u0000\u0000\u011b\u0119\u0001"+
+		"\u0000\u0000\u0000\u011b\u011c\u0001\u0000\u0000\u0000\u011c\u011e\u0001"+
+		"\u0000\u0000\u0000\u011d\u011b\u0001\u0000\u0000\u0000\u011e\u011f\u0005"+
+		"+\u0000\u0000\u011f+\u0001\u0000\u0000\u0000\u0120\u0121\u0005\u0017\u0000"+
+		"\u0000\u0121\u0122\u0005&\u0000\u0000\u0122\u0123\u0003\n\u0005\u0000"+
+		"\u0123\u0124\u0005\'\u0000\u0000\u0124\u0125\u0005*\u0000\u0000\u0125"+
+		"\u0126\u0003\u0006\u0003\u0000\u0126\u0127\u0005+\u0000\u0000\u0127-\u0001"+
+		"\u0000\u0000\u0000\u0128\u0129\u0005\u0018\u0000\u0000\u0129\u012a\u0005"+
+		"*\u0000\u0000\u012a\u012b\u0003\u0006\u0003\u0000\u012b\u012c\u0005+\u0000"+
+		"\u0000\u012c/\u0001\u0000\u0000\u0000\u012d\u012e\u0003,\u0016\u0000\u012e"+
+		"\u012f\u0003.\u0017\u0000\u012f1\u0001\u0000\u0000\u0000\u0130\u0131\u0005"+
+		"\u001c\u0000\u0000\u0131\u0132\u0005&\u0000\u0000\u0132\u0133\u0003\n"+
+		"\u0005\u0000\u0133\u0134\u0005\'\u0000\u0000\u0134\u0135\u0005*\u0000"+
+		"\u0000\u0135\u0136\u00034\u001a\u0000\u0136\u0137\u0005+\u0000\u0000\u0137"+
+		"3\u0001\u0000\u0000\u0000\u0138\u0139\u0005\u001d\u0000\u0000\u0139\u013a"+
+		"\u0003\n\u0005\u0000\u013a\u013b\u0001\u0000\u0000\u0000\u013b\u013c\u0005"+
+		"#\u0000\u0000\u013c\u013d\u0003\u0006\u0003\u0000\u013d\u013f\u0001\u0000"+
+		"\u0000\u0000\u013e\u0138\u0001\u0000\u0000\u0000\u013f\u0142\u0001\u0000"+
+		"\u0000\u0000\u0140\u013e\u0001\u0000\u0000\u0000\u0140\u0141\u0001\u0000"+
+		"\u0000\u0000\u0141\u0143\u0001\u0000\u0000\u0000\u0142\u0140\u0001\u0000"+
+		"\u0000\u0000\u0143\u0144\u0005 \u0000\u0000\u0144\u0145\u0005#\u0000\u0000"+
+		"\u0145\u0146\u0003\u0006\u0003\u0000\u01465\u0001\u0000\u0000\u0000\u0147"+
+		"\u0148\u0005\u0015\u0000\u0000\u0148\u0149\u0003\n\u0005\u0000\u01497"+
+		"\u0001\u0000\u0000\u0000\u014a\u014b\u0005\u001e\u0000\u0000\u014b9\u0001"+
+		"\u0000\u0000\u0000\u014c\u014d\u0005\u001f\u0000\u0000\u014d;\u0001\u0000"+
+		"\u0000\u0000\u014e\u0153\u0005!\u0000\u0000\u014f\u0150\u0005%\u0000\u0000"+
+		"\u0150\u0152\u0005!\u0000\u0000\u0151\u014f\u0001\u0000\u0000\u0000\u0152"+
+		"\u0155\u0001\u0000\u0000\u0000\u0153\u0151\u0001\u0000\u0000\u0000\u0153"+
+		"\u0154\u0001\u0000\u0000\u0000\u0154=\u0001\u0000\u0000\u0000\u0155\u0153"+
+		"\u0001\u0000\u0000\u0000\u0156\u015b\u0005\u0011\u0000\u0000\u0157\u015b"+
+		"\u0003F#\u0000\u0158\u015b\u0003V+\u0000\u0159\u015b\u0003H$\u0000\u015a"+
+		"\u0156\u0001\u0000\u0000\u0000\u015a\u0157\u0001\u0000\u0000\u0000\u015a"+
+		"\u0158\u0001\u0000\u0000\u0000\u015a\u0159\u0001\u0000\u0000\u0000\u015b"+
+		"?\u0001\u0000\u0000\u0000\u015c\u015d\u0007\u0007\u0000\u0000\u015dA\u0001"+
+		"\u0000\u0000\u0000\u015e\u015f\u0007\b\u0000\u0000\u015fC\u0001\u0000"+
+		"\u0000\u0000\u0160\u0163\u0003@ \u0000\u0161\u0163\u0003B!\u0000\u0162"+
+		"\u0160\u0001\u0000\u0000\u0000\u0162\u0161\u0001\u0000\u0000\u0000\u0163"+
+		"E\u0001\u0000\u0000\u0000\u0164\u0167\u0003D\"\u0000\u0165\u0167\u0005"+
+		"\u0006\u0000\u0000\u0166\u0164\u0001\u0000\u0000\u0000\u0166\u0165\u0001"+
+		"\u0000\u0000\u0000\u0167G\u0001\u0000\u0000\u0000\u0168\u016c\u0003J%"+
+		"\u0000\u0169\u016c\u0003T*\u0000\u016a\u016c\u0003V+\u0000\u016b\u0168"+
+		"\u0001\u0000\u0000\u0000\u016b\u0169\u0001\u0000\u0000\u0000\u016b\u016a"+
+		"\u0001\u0000\u0000\u0000\u016cI\u0001\u0000\u0000\u0000\u016d\u016f\u0005"+
+		"!\u0000\u0000\u016e\u0170\u0003L&\u0000\u016f\u016e\u0001\u0000\u0000"+
+		"\u0000\u016f\u0170\u0001\u0000\u0000\u0000\u0170K\u0001\u0000\u0000\u0000"+
+		"\u0171\u0172\u0005,\u0000\u0000\u0172\u0173\u0003N\'\u0000\u0173\u0174"+
+		"\u0005-\u0000\u0000\u0174M\u0001\u0000\u0000\u0000\u0175\u017a\u0003P"+
+		"(\u0000\u0176\u0177\u0005$\u0000\u0000\u0177\u0179\u0003P(\u0000\u0178"+
+		"\u0176\u0001\u0000\u0000\u0000\u0179\u017c\u0001\u0000\u0000\u0000\u017a"+
+		"\u0178\u0001\u0000\u0000\u0000\u017a\u017b\u0001\u0000\u0000\u0000\u017b"+
+		"O\u0001\u0000\u0000\u0000\u017c\u017a\u0001\u0000\u0000\u0000\u017d\u0180"+
+		"\u0003H$\u0000\u017e\u0180\u0003R)\u0000\u017f\u017d\u0001\u0000\u0000"+
+		"\u0000\u017f\u017e\u0001\u0000\u0000\u0000\u0180Q\u0001\u0000\u0000\u0000"+
+		"\u0181\u0182\u0005\u000f\u0000\u0000\u0182\u0186\u0003H$\u0000\u0183\u0184"+
+		"\u0005\u0010\u0000\u0000\u0184\u0186\u0003H$\u0000\u0185\u0181\u0001\u0000"+
+		"\u0000\u0000\u0185\u0183\u0001\u0000\u0000\u0000\u0186S\u0001\u0000\u0000"+
+		"\u0000\u0187\u0188\u0005!\u0000\u0000\u0188U\u0001\u0000\u0000\u0000\u0189"+
+		"\u018d\u0003F#\u0000\u018a\u018d\u0003J%\u0000\u018b\u018d\u0003T*\u0000"+
+		"\u018c\u0189\u0001\u0000\u0000\u0000\u018c\u018a\u0001\u0000\u0000\u0000"+
+		"\u018c\u018b\u0001\u0000\u0000\u0000\u018d\u0190\u0001\u0000\u0000\u0000"+
+		"\u018e\u018f\u0005(\u0000\u0000\u018f\u0191\u0005)\u0000\u0000\u0190\u018e"+
+		"\u0001\u0000\u0000\u0000\u0191\u0192\u0001\u0000\u0000\u0000\u0192\u0190"+
+		"\u0001\u0000\u0000\u0000\u0192\u0193\u0001\u0000\u0000\u0000\u0193W\u0001"+
+		"\u0000\u0000\u0000\u0194\u0195\u0005*\u0000\u0000\u0195\u019a\u0003\n"+
+		"\u0005\u0000\u0196\u0197\u0005$\u0000\u0000\u0197\u0199\u0003\n\u0005"+
+		"\u0000\u0198\u0196\u0001\u0000\u0000\u0000\u0199\u019c\u0001\u0000\u0000"+
+		"\u0000\u019a\u0198\u0001\u0000\u0000\u0000\u019a\u019b\u0001\u0000\u0000"+
+		"\u0000\u019b\u019d\u0001\u0000\u0000\u0000\u019c\u019a\u0001\u0000\u0000"+
+		"\u0000\u019d\u019e\u0005+\u0000\u0000\u019eY\u0001\u0000\u0000\u0000\u019f"+
+		"\u01a0\u0005\u001a\u0000\u0000\u01a0\u01a1\u0005&\u0000\u0000\u01a1\u01a2"+
+		"\u0003\n\u0005\u0000\u01a2\u01a3\u0005\'\u0000\u0000\u01a3\u01a4\u0005"+
+		"*\u0000\u0000\u01a4\u01a5\u0003\u0006\u0003\u0000\u01a5\u01a6\u0005+\u0000"+
+		"\u0000\u01a6[\u0001\u0000\u0000\u0000\u01a7\u01a8\u0005\u001b\u0000\u0000"+
+		"\u01a8\u01a9\u0005*\u0000\u0000\u01a9\u01aa\u0003\u0006\u0003\u0000\u01aa"+
+		"\u01ab\u0005+\u0000\u0000\u01ab\u01ac\u0005\u001a\u0000\u0000\u01ac\u01ad"+
+		"\u0005&\u0000\u0000\u01ad\u01ae\u0003\n\u0005\u0000\u01ae\u01af\u0005"+
+		"\'\u0000\u0000\u01af]\u0001\u0000\u0000\u0000\u01b0\u01b1\u0005\u0019"+
+		"\u0000\u0000\u01b1\u01b2\u0005&\u0000\u0000\u01b2\u01b3\u0003`0\u0000"+
+		"\u01b3\u01b4\u0005\"\u0000\u0000\u01b4\u01b5\u0003b1\u0000\u01b5\u01b6"+
+		"\u0005\"\u0000\u0000\u01b6\u01b7\u0003d2\u0000\u01b7\u01b8\u0005\'\u0000"+
+		"\u0000\u01b8\u01b9\u0005*\u0000\u0000\u01b9\u01ba\u0003\u0006\u0003\u0000"+
+		"\u01ba\u01bb\u0005+\u0000\u0000\u01bb_\u0001\u0000\u0000\u0000\u01bc\u01bd"+
+		"\u0003\u000e\u0007\u0000\u01bda\u0001\u0000\u0000\u0000\u01be\u01bf\u0003"+
+		"\n\u0005\u0000\u01bfc\u0001\u0000\u0000\u0000\u01c0\u01c1\u0003\n\u0005"+
+		"\u0000\u01c1e\u0001\u0000\u0000\u0000\u01c2\u01c3\u0005&\u0000\u0000\u01c3"+
+		"\u01c4\u0003>\u001f\u0000\u01c4\u01c5\u0005\'\u0000\u0000\u01c5\u01c6"+
+		"\u0003\n\u0005\u0000\u01c6g\u0001\u0000\u0000\u0000\u01c7\u01c8\u0007"+
+		"\t\u0000\u0000\u01c8i\u0001\u0000\u0000\u0000\u01c9\u01cb\u0003h4\u0000"+
+		"\u01ca\u01cc\u0005\u0005\u0000\u0000\u01cb\u01ca\u0001\u0000\u0000\u0000"+
+		"\u01cb\u01cc\u0001\u0000\u0000\u0000\u01cc\u01cd\u0001\u0000\u0000\u0000"+
+		"\u01cd\u01ce\u0003>\u001f\u0000\u01ce\u01cf\u0005!\u0000\u0000\u01cf\u01d1"+
+		"\u0005&\u0000\u0000\u01d0\u01d2\u0003l6\u0000\u01d1\u01d0\u0001\u0000"+
+		"\u0000\u0000\u01d1\u01d2\u0001\u0000\u0000\u0000\u01d2\u01d3\u0001\u0000"+
+		"\u0000\u0000\u01d3\u01d4\u0005\'\u0000\u0000\u01d4\u01d5\u0005*\u0000"+
+		"\u0000\u01d5\u01d6\u0003\u0006\u0003\u0000\u01d6\u01d7\u0005+\u0000\u0000"+
+		"\u01d7k\u0001\u0000\u0000\u0000\u01d8\u01dd\u0003n7\u0000\u01d9\u01da"+
+		"\u0005$\u0000\u0000\u01da\u01dc\u0003n7\u0000\u01db\u01d9\u0001\u0000"+
+		"\u0000\u0000\u01dc\u01df\u0001\u0000\u0000\u0000\u01dd\u01db\u0001\u0000"+
+		"\u0000\u0000\u01dd\u01de\u0001\u0000\u0000\u0000\u01dem\u0001\u0000\u0000"+
+		"\u0000\u01df\u01dd\u0001\u0000\u0000\u0000\u01e0\u01e1\u0003>\u001f\u0000"+
+		"\u01e1\u01e2\u0005!\u0000\u0000\u01e2o\u0001\u0000\u0000\u0000\u01e3\u01e4"+
+		"\u0003<\u001e\u0000\u01e4\u01e6\u0005&\u0000\u0000\u01e5\u01e7\u0003r"+
+		"9\u0000\u01e6\u01e5\u0001\u0000\u0000\u0000\u01e6\u01e7\u0001\u0000\u0000"+
+		"\u0000\u01e7\u01e8\u0001\u0000\u0000\u0000\u01e8\u01e9\u0005\'\u0000\u0000"+
+		"\u01e9q\u0001\u0000\u0000\u0000\u01ea\u01ef\u0003t:\u0000\u01eb\u01ec"+
+		"\u0005$\u0000\u0000\u01ec\u01ee\u0003t:\u0000\u01ed\u01eb\u0001\u0000"+
+		"\u0000\u0000\u01ee\u01f1\u0001\u0000\u0000\u0000\u01ef\u01ed\u0001\u0000"+
+		"\u0000\u0000\u01ef\u01f0\u0001\u0000\u0000\u0000\u01f0s\u0001\u0000\u0000"+
+		"\u0000\u01f1\u01ef\u0001\u0000\u0000\u0000\u01f2\u01f3\u0003\n\u0005\u0000"+
+		"\u01f3u\u0001\u0000\u0000\u0000\'y\u007f\u0086\u008a\u008c\u0097\u009b"+
+		"\u009d\u00a6\u00ac\u00b0\u00b6\u00d1\u00d5\u00dd\u00df\u00e5\u00f2\u00f5"+
+		"\u00fd\u011b\u0140\u0153\u015a\u0162\u0166\u016b\u016f\u017a\u017f\u0185"+
+		"\u018c\u0192\u019a\u01cb\u01d1\u01dd\u01e6\u01ef";
+	public static final ATN _ATN =
+		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
+	static {
+		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
+		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
+			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
+		}
+	}
+}
\ No newline at end of file
Index: src/main/gen/MainAntlrVisitor.java
===================================================================
diff --git a/src/main/gen/MainAntlrVisitor.java b/src/main/gen/MainAntlrVisitor.java
new file mode 100644
--- /dev/null	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
+++ b/src/main/gen/MainAntlrVisitor.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -0,0 +1,369 @@
+// Generated from D:/Desktop/Master of Science/1. Semester/Concepts of Programming Languages/GruppenProjekt/githubrepo/compiler/src/main/antlr/MainAntlr.g4 by ANTLR 4.13.1
+
+package org.cmjava2023.generated_from_antlr;
+
+import org.antlr.v4.runtime.tree.ParseTreeVisitor;
+
+/**
+ * This interface defines a complete generic visitor for a parse tree produced
+ * by {@link MainAntlrParser}.
+ *
+ * @param <T> The return type of the visit operation. Use {@link Void} for
+ * operations with no return type.
+ */
+public interface MainAntlrVisitor<T> extends ParseTreeVisitor<T> {
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#start}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitStart(MainAntlrParser.StartContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#global_scope}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitGlobal_scope(MainAntlrParser.Global_scopeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#class_scope}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitClass_scope(MainAntlrParser.Class_scopeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#function_scope}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFunction_scope(MainAntlrParser.Function_scopeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#block_scope}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitBlock_scope(MainAntlrParser.Block_scopeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#expressions}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitExpressions(MainAntlrParser.ExpressionsContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#variable_declaration}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitVariable_declaration(MainAntlrParser.Variable_declarationContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#assignment}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitAssignment(MainAntlrParser.AssignmentContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#expression}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitExpression(MainAntlrParser.ExpressionContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#expression_operator}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitExpression_operator(MainAntlrParser.Expression_operatorContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#expression_concatinator}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitExpression_concatinator(MainAntlrParser.Expression_concatinatorContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#expression_suffix}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitExpression_suffix(MainAntlrParser.Expression_suffixContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#instantiation}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitInstantiation(MainAntlrParser.InstantiationContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#access_index}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitAccess_index(MainAntlrParser.Access_indexContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#numerical_comparison_operator}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitNumerical_comparison_operator(MainAntlrParser.Numerical_comparison_operatorContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#numerical_prefix}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitNumerical_prefix(MainAntlrParser.Numerical_prefixContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#logical_prefix}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitLogical_prefix(MainAntlrParser.Logical_prefixContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#logical_comparison_operator}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitLogical_comparison_operator(MainAntlrParser.Logical_comparison_operatorContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#bit_comparison_operator}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitBit_comparison_operator(MainAntlrParser.Bit_comparison_operatorContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#package_declaration}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitPackage_declaration(MainAntlrParser.Package_declarationContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#class_declaration}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitClass_declaration(MainAntlrParser.Class_declarationContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#enum_declaration}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitEnum_declaration(MainAntlrParser.Enum_declarationContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#if_statement}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitIf_statement(MainAntlrParser.If_statementContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#else_statement}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitElse_statement(MainAntlrParser.Else_statementContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#if_else_statement}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitIf_else_statement(MainAntlrParser.If_else_statementContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#switch_statement}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitSwitch_statement(MainAntlrParser.Switch_statementContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#switch_scope}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitSwitch_scope(MainAntlrParser.Switch_scopeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#return_statement}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitReturn_statement(MainAntlrParser.Return_statementContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#break_statement}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitBreak_statement(MainAntlrParser.Break_statementContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#continue_statement}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitContinue_statement(MainAntlrParser.Continue_statementContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#identifier}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitIdentifier(MainAntlrParser.IdentifierContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#type}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitType(MainAntlrParser.TypeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#integral_type}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitIntegral_type(MainAntlrParser.Integral_typeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#floating_point_type}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFloating_point_type(MainAntlrParser.Floating_point_typeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#numeric_type}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitNumeric_type(MainAntlrParser.Numeric_typeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#primitive_type}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitPrimitive_type(MainAntlrParser.Primitive_typeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#reference_type}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitReference_type(MainAntlrParser.Reference_typeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#class_type}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitClass_type(MainAntlrParser.Class_typeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#type_arguments}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitType_arguments(MainAntlrParser.Type_argumentsContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#type_argument_list}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitType_argument_list(MainAntlrParser.Type_argument_listContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#type_argument}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitType_argument(MainAntlrParser.Type_argumentContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#wildcard}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitWildcard(MainAntlrParser.WildcardContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#type_variable}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitType_variable(MainAntlrParser.Type_variableContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#array_type}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitArray_type(MainAntlrParser.Array_typeContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#array_expression}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitArray_expression(MainAntlrParser.Array_expressionContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#while_loop}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitWhile_loop(MainAntlrParser.While_loopContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#do_while_loop}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitDo_while_loop(MainAntlrParser.Do_while_loopContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#for_loop}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFor_loop(MainAntlrParser.For_loopContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#for_init}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFor_init(MainAntlrParser.For_initContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#for_termination}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFor_termination(MainAntlrParser.For_terminationContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#for_update}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFor_update(MainAntlrParser.For_updateContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#casting}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitCasting(MainAntlrParser.CastingContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#access_modifier}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitAccess_modifier(MainAntlrParser.Access_modifierContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#function_declaration}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFunction_declaration(MainAntlrParser.Function_declarationContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#function_declaration_args}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFunction_declaration_args(MainAntlrParser.Function_declaration_argsContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#function_declaration_arg}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFunction_declaration_arg(MainAntlrParser.Function_declaration_argContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#function_call}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFunction_call(MainAntlrParser.Function_callContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#function_args}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFunction_args(MainAntlrParser.Function_argsContext ctx);
+	/**
+	 * Visit a parse tree produced by {@link MainAntlrParser#function_arg}.
+	 * @param ctx the parse tree
+	 * @return the visitor result
+	 */
+	T visitFunction_arg(MainAntlrParser.Function_argContext ctx);
+}
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/AST.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,90 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: controlFlow
+   |     L  2: break_test
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 1
+               |     |- name: i
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               L  1 (field of type WhileLoopNode)
+                  |- expression (field of type ValueNode)
+                  |  L  value: true
+                  L  body
+                     |- 0 (field of type FunctionCallNode)
+                     |  |- function (field of type Function)
+                     |  |  |- accessModifier: PUBLIC
+                     |  |  |- instanceModifier: null
+                     |  |  |- name: System.out.println
+                     |  |  L  type (field of type BuiltIn)
+                     |  |     L  name: void
+                     |  L  values
+                     |     L  0 (field of type VariableCallNode)
+                     |        L  symbol (field of type Variable)
+                     |           |- initialExpression (field of type ValueNode)
+                     |           |  L  value: 1
+                     |           |- name: i
+                     |           L  type (field of type BuiltIn)
+                     |              L  name: int
+                     |- 1 (field of type IfBlockNode)
+                     |  |- ifNodes
+                     |  |  L  0 (field of type IfNode)
+                     |  |     |- expression (field of type ComparisonNode)
+                     |  |     |  |- leftExpression (field of type VariableCallNode)
+                     |  |     |  |  L  symbol (field of type Variable)
+                     |  |     |  |     |- initialExpression (field of type ValueNode)
+                     |  |     |  |     |  L  value: 1
+                     |  |     |  |     |- name: i
+                     |  |     |  |     L  type (field of type BuiltIn)
+                     |  |     |  |        L  name: int
+                     |  |     |  |- comparisonOperator: EQ
+                     |  |     |  L  rightExpression (field of type ValueNode)
+                     |  |     |     L  value: 5
+                     |  |     L  statements
+                     |  |        L  0 (field of type BreakNode)
+                     |  L  elseNode: null
+                     L  2 (field of type UnarySuffixNode)
+                        |- operator: INC
+                        L  Expression (field of type VariableCallNode)
+                           L  symbol (field of type Variable)
+                              |- initialExpression (field of type ValueNode)
+                              |  L  value: 1
+                              |- name: i
+                              L  type (field of type BuiltIn)
+                                 L  name: int
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/break/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/break/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/Main.java
rename from src/test/resources/java-test-files/cmjava2023/controlFlow/break/Main.java
rename to src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/Main.java
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/break/Main.java	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/Main.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -1,4 +1,4 @@
-package cmjava2023.controlFlow.break;
+package cmjava2023.controlFlow.break_test;
 
 public class Main {
     public static void main(String[] args) {
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/AST.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,99 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: controlFlow
+   |     L  2: continue_test
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               L  0 (field of type ForLoopNode)
+                  |- loopVariable (field of type VariableNode)
+                  |  L  variableSymbol (field of type Variable)
+                  |     |- initialExpression (field of type ValueNode)
+                  |     |  L  value: 1
+                  |     |- name: i
+                  |     L  type (field of type BuiltIn)
+                  |        L  name: int
+                  |- termination (field of type ComparisonNode)
+                  |  |- leftExpression (field of type VariableCallNode)
+                  |  |  L  symbol (field of type Variable)
+                  |  |     |- initialExpression (field of type ValueNode)
+                  |  |     |  L  value: 1
+                  |  |     |- name: i
+                  |  |     L  type (field of type BuiltIn)
+                  |  |        L  name: int
+                  |  |- comparisonOperator: LTE
+                  |  L  rightExpression (field of type ValueNode)
+                  |     L  value: 5
+                  |- increment (field of type UnarySuffixNode)
+                  |  |- operator: INC
+                  |  L  Expression (field of type VariableCallNode)
+                  |     L  symbol (field of type Variable)
+                  |        |- initialExpression (field of type ValueNode)
+                  |        |  L  value: 1
+                  |        |- name: i
+                  |        L  type (field of type BuiltIn)
+                  |           L  name: int
+                  L  body
+                     |- 0 (field of type IfBlockNode)
+                     |  |- ifNodes
+                     |  |  L  0 (field of type IfNode)
+                     |  |     |- expression (field of type ComparisonNode)
+                     |  |     |  |- leftExpression (field of type VariableCallNode)
+                     |  |     |  |  L  symbol (field of type Variable)
+                     |  |     |  |     |- initialExpression (field of type ValueNode)
+                     |  |     |  |     |  L  value: 1
+                     |  |     |  |     |- name: i
+                     |  |     |  |     L  type (field of type BuiltIn)
+                     |  |     |  |        L  name: int
+                     |  |     |  |- comparisonOperator: EQ
+                     |  |     |  L  rightExpression (field of type ValueNode)
+                     |  |     |     L  value: 3
+                     |  |     L  statements
+                     |  |        L  0 (field of type ContinueNode)
+                     |  L  elseNode: null
+                     L  1 (field of type FunctionCallNode)
+                        |- function (field of type Function)
+                        |  |- accessModifier: PUBLIC
+                        |  |- instanceModifier: null
+                        |  |- name: System.out.println
+                        |  L  type (field of type BuiltIn)
+                        |     L  name: void
+                        L  values
+                           L  0 (field of type VariableCallNode)
+                              L  symbol (field of type Variable)
+                                 |- initialExpression (field of type ValueNode)
+                                 |  L  value: 1
+                                 |- name: i
+                                 L  type (field of type BuiltIn)
+                                    L  name: int
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/continue/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/continue/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/Main.java
rename from src/test/resources/java-test-files/cmjava2023/controlFlow/continue/Main.java
rename to src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/Main.java
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/continue/Main.java	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/Main.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -1,4 +1,4 @@
-package cmjava2023.controlFlow.continue;
+package cmjava2023.controlFlow.continue_test;
 
 public class Main {
     public static void main(String[] args) {
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/AST.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,82 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: controlFlow
+   |     L  2: do_while_test
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 1
+               |     |- name: count
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               L  1 (field of type DoWhileLoopNode)
+                  |- expression (field of type ComparisonNode)
+                  |  |- leftExpression (field of type VariableCallNode)
+                  |  |  L  symbol (field of type Variable)
+                  |  |     |- initialExpression (field of type ValueNode)
+                  |  |     |  L  value: 1
+                  |  |     |- name: count
+                  |  |     L  type (field of type BuiltIn)
+                  |  |        L  name: int
+                  |  |- comparisonOperator: DIAMOND_OPEN
+                  |  L  rightExpression (field of type ValueNode)
+                  |     L  value: 11
+                  L  body
+                     |- 0 (field of type FunctionCallNode)
+                     |  |- function (field of type Function)
+                     |  |  |- accessModifier: PUBLIC
+                     |  |  |- instanceModifier: null
+                     |  |  |- name: System.out.println
+                     |  |  L  type (field of type BuiltIn)
+                     |  |     L  name: void
+                     |  L  values
+                     |     L  0 (field of type VariableCallNode)
+                     |        L  symbol (field of type Variable)
+                     |           |- initialExpression (field of type ValueNode)
+                     |           |  L  value: 1
+                     |           |- name: count
+                     |           L  type (field of type BuiltIn)
+                     |              L  name: int
+                     L  1 (field of type UnarySuffixNode)
+                        |- operator: INC
+                        L  Expression (field of type VariableCallNode)
+                           L  symbol (field of type Variable)
+                              |- initialExpression (field of type ValueNode)
+                              |  L  value: 1
+                              |- name: count
+                              L  type (field of type BuiltIn)
+                                 L  name: int
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/do-while/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/do-while/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/Main.java
rename from src/test/resources/java-test-files/cmjava2023/controlFlow/do-while/Main.java
rename to src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/Main.java
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/do-while/Main.java	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/Main.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -1,4 +1,4 @@
-package cmjava2023.controlFlow.do-while;
+package cmjava2023.controlFlow.do_while_test;
 
 public class Main {
     public static void main(String[] args) {
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/AST.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,160 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: controlFlow
+   |     L  2: for_test
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type ForLoopNode)
+               |  |- loopVariable (field of type VariableNode)
+               |  |  L  variableSymbol (field of type Variable)
+               |  |     |- initialExpression (field of type ValueNode)
+               |  |     |  L  value: 1
+               |  |     |- name: i
+               |  |     L  type (field of type BuiltIn)
+               |  |        L  name: int
+               |  |- termination (field of type ComparisonNode)
+               |  |  |- leftExpression (field of type VariableCallNode)
+               |  |  |  L  symbol (field of type Variable)
+               |  |  |     |- initialExpression (field of type ValueNode)
+               |  |  |     |  L  value: 1
+               |  |  |     |- name: i
+               |  |  |     L  type (field of type BuiltIn)
+               |  |  |        L  name: int
+               |  |  |- comparisonOperator: DIAMOND_OPEN
+               |  |  L  rightExpression (field of type ValueNode)
+               |  |     L  value: 11
+               |  |- increment (field of type UnarySuffixNode)
+               |  |  |- operator: INC
+               |  |  L  Expression (field of type VariableCallNode)
+               |  |     L  symbol (field of type Variable)
+               |  |        |- initialExpression (field of type ValueNode)
+               |  |        |  L  value: 1
+               |  |        |- name: i
+               |  |        L  type (field of type BuiltIn)
+               |  |           L  name: int
+               |  L  body
+               |     L  0 (field of type FunctionCallNode)
+               |        |- function (field of type Function)
+               |        |  |- accessModifier: PUBLIC
+               |        |  |- instanceModifier: null
+               |        |  |- name: System.out.println
+               |        |  L  type (field of type BuiltIn)
+               |        |     L  name: void
+               |        L  values
+               |           L  0 (field of type VariableCallNode)
+               |              L  symbol (field of type Variable)
+               |                 |- initialExpression (field of type ValueNode)
+               |                 |  L  value: 1
+               |                 |- name: i
+               |                 L  type (field of type BuiltIn)
+               |                    L  name: int
+               |- 1 (field of type ForLoopNode)
+               |  |- loopVariable (field of type VariableNode)
+               |  |  L  variableSymbol (field of type Variable)
+               |  |     |- initialExpression (field of type ValueNode)
+               |  |     |  L  value: 0
+               |  |     |- name: i
+               |  |     L  type (field of type BuiltIn)
+               |  |        L  name: int
+               |  |- termination (field of type ComparisonNode)
+               |  |  |- leftExpression (field of type VariableCallNode)
+               |  |  |  L  symbol (field of type Variable)
+               |  |  |     |- initialExpression (field of type ValueNode)
+               |  |  |     |  L  value: 0
+               |  |  |     |- name: i
+               |  |  |     L  type (field of type BuiltIn)
+               |  |  |        L  name: int
+               |  |  |- comparisonOperator: DIAMOND_OPEN
+               |  |  L  rightExpression (field of type ValueNode)
+               |  |     L  value: 10
+               |  |- increment (field of type InfixNode)
+               |  |  |- leftExpression (field of type VariableCallNode)
+               |  |  |  L  symbol (field of type Variable)
+               |  |  |     |- initialExpression (field of type ValueNode)
+               |  |  |     |  L  value: 0
+               |  |  |     |- name: i
+               |  |  |     L  type (field of type BuiltIn)
+               |  |  |        L  name: int
+               |  |  |- operator: PLUS
+               |  |  L  rightExpression (field of type ValueNode)
+               |  |     L  value: 2
+               |  L  body
+               |     L  0 (field of type FunctionCallNode)
+               |        |- function (field of type Function)
+               |        |  |- accessModifier: PUBLIC
+               |        |  |- instanceModifier: null
+               |        |  |- name: System.out.println
+               |        |  L  type (field of type BuiltIn)
+               |        |     L  name: void
+               |        L  values
+               |           L  0 (field of type VariableCallNode)
+               |              L  symbol (field of type Variable)
+               |                 |- initialExpression (field of type ValueNode)
+               |                 |  L  value: 0
+               |                 |- name: i
+               |                 L  type (field of type BuiltIn)
+               |                    L  name: int
+               |- 2 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ArrayInstantiationWithValuesNode)
+               |     |  L  expressions
+               |     |     |- 0 (field of type ValueNode)
+               |     |     |  L  value: 1
+               |     |     |- 1 (field of type ValueNode)
+               |     |     |  L  value: 2
+               |     |     |- 2 (field of type ValueNode)
+               |     |     |  L  value: 3
+               |     |     |- 3 (field of type ValueNode)
+               |     |     |  L  value: 4
+               |     |     |- 4 (field of type ValueNode)
+               |     |     |  L  value: 5
+               |     |     |- 5 (field of type ValueNode)
+               |     |     |  L  value: 6
+               |     |     |- 6 (field of type ValueNode)
+               |     |     |  L  value: 7
+               |     |     |- 7 (field of type ValueNode)
+               |     |     |  L  value: 8
+               |     |     |- 8 (field of type ValueNode)
+               |     |     |  L  value: 9
+               |     |     L  9 (field of type ValueNode)
+               |     |        L  value: 10
+               |     |- name: numbers
+               |     L  type (field of type ArrayType)
+               |        |- arrayType (field of type BuiltIn)
+               |        |  |- name: int
+               |        |  L  type (field of type BuiltIn)
+               |        |     L  name: int
+               |        L  dimensions: 1
+               L  3: null
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/for/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/for/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/Main.java
rename from src/test/resources/java-test-files/cmjava2023/controlFlow/for/Main.java
rename to src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/Main.java
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/for/Main.java	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/Main.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -1,4 +1,4 @@
-package cmjava2023.controlFlow.for;
+package cmjava2023.controlFlow.for_test;
 
 public class Main {
     public static void main(String[] args) {
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/AST.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,237 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: controlFlow
+   |     L  2: if_test
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: true
+               |     |- name: isMoving
+               |     L  type (field of type BuiltIn)
+               |        L  name: boolean
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 5
+               |     |- name: currentSpeed
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 2 (field of type IfBlockNode)
+               |  |- ifNodes
+               |  |  L  0 (field of type IfNode)
+               |  |     |- expression (field of type VariableCallNode)
+               |  |     |  L  symbol (field of type Variable)
+               |  |     |     |- initialExpression (field of type ValueNode)
+               |  |     |     |  L  value: true
+               |  |     |     |- name: isMoving
+               |  |     |     L  type (field of type BuiltIn)
+               |  |     |        L  name: boolean
+               |  |     L  statements
+               |  |        L  0 (field of type UnarySuffixNode)
+               |  |           |- operator: DEC
+               |  |           L  Expression (field of type VariableCallNode)
+               |  |              L  symbol (field of type Variable)
+               |  |                 |- initialExpression (field of type ValueNode)
+               |  |                 |  L  value: 5
+               |  |                 |- name: currentSpeed
+               |  |                 L  type (field of type BuiltIn)
+               |  |                    L  name: int
+               |  L  elseNode: null
+               |- 3 (field of type VariableAssignmentNode)
+               |  |- variable (field of type Variable)
+               |  |  |- initialExpression (field of type ValueNode)
+               |  |  |  L  value: true
+               |  |  |- name: isMoving
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: boolean
+               |  L  expression (field of type ValueNode)
+               |     L  value: false
+               |- 4 (field of type IfBlockNode)
+               |  |- ifNodes
+               |  |  L  0 (field of type IfNode)
+               |  |     |- expression (field of type VariableCallNode)
+               |  |     |  L  symbol (field of type Variable)
+               |  |     |     |- initialExpression (field of type ValueNode)
+               |  |     |     |  L  value: true
+               |  |     |     |- name: isMoving
+               |  |     |     L  type (field of type BuiltIn)
+               |  |     |        L  name: boolean
+               |  |     L  statements
+               |  |        L  0 (field of type UnarySuffixNode)
+               |  |           |- operator: DEC
+               |  |           L  Expression (field of type VariableCallNode)
+               |  |              L  symbol (field of type Variable)
+               |  |                 |- initialExpression (field of type ValueNode)
+               |  |                 |  L  value: 5
+               |  |                 |- name: currentSpeed
+               |  |                 L  type (field of type BuiltIn)
+               |  |                    L  name: int
+               |  L  elseNode (field of type ElseNode)
+               |     L  statements
+               |        L  0 (field of type FunctionCallNode)
+               |           |- function (field of type Function)
+               |           |  |- accessModifier: PUBLIC
+               |           |  |- instanceModifier: null
+               |           |  |- name: System.out.println
+               |           |  L  type (field of type BuiltIn)
+               |           |     L  name: void
+               |           L  values
+               |              L  0 (field of type ValueNode)
+               |                 L  value: The bicycle has already stopped!
+               |- 5 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 76
+               |     |- name: testscore
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression: null
+               |     |- name: grade
+               |     L  type (field of type BuiltIn)
+               |        L  name: char
+               |- 7 (field of type IfBlockNode)
+               |  |- ifNodes
+               |  |  |- 0 (field of type IfNode)
+               |  |  |  |- expression (field of type ComparisonNode)
+               |  |  |  |  |- leftExpression (field of type VariableCallNode)
+               |  |  |  |  |  L  symbol (field of type Variable)
+               |  |  |  |  |     |- initialExpression (field of type ValueNode)
+               |  |  |  |  |     |  L  value: 76
+               |  |  |  |  |     |- name: testscore
+               |  |  |  |  |     L  type (field of type BuiltIn)
+               |  |  |  |  |        L  name: int
+               |  |  |  |  |- comparisonOperator: GTE
+               |  |  |  |  L  rightExpression (field of type ValueNode)
+               |  |  |  |     L  value: 90
+               |  |  |  L  statements
+               |  |  |     L  0 (field of type VariableAssignmentNode)
+               |  |  |        |- variable (field of type Variable)
+               |  |  |        |  |- initialExpression: null
+               |  |  |        |  |- name: grade
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: char
+               |  |  |        L  expression (field of type ValueNode)
+               |  |  |           L  value: A
+               |  |  |- 1 (field of type IfNode)
+               |  |  |  |- expression (field of type ComparisonNode)
+               |  |  |  |  |- leftExpression (field of type VariableCallNode)
+               |  |  |  |  |  L  symbol (field of type Variable)
+               |  |  |  |  |     |- initialExpression (field of type ValueNode)
+               |  |  |  |  |     |  L  value: 76
+               |  |  |  |  |     |- name: testscore
+               |  |  |  |  |     L  type (field of type BuiltIn)
+               |  |  |  |  |        L  name: int
+               |  |  |  |  |- comparisonOperator: GTE
+               |  |  |  |  L  rightExpression (field of type ValueNode)
+               |  |  |  |     L  value: 80
+               |  |  |  L  statements
+               |  |  |     L  0 (field of type VariableAssignmentNode)
+               |  |  |        |- variable (field of type Variable)
+               |  |  |        |  |- initialExpression: null
+               |  |  |        |  |- name: grade
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: char
+               |  |  |        L  expression (field of type ValueNode)
+               |  |  |           L  value: B
+               |  |  |- 2 (field of type IfNode)
+               |  |  |  |- expression (field of type ComparisonNode)
+               |  |  |  |  |- leftExpression (field of type VariableCallNode)
+               |  |  |  |  |  L  symbol (field of type Variable)
+               |  |  |  |  |     |- initialExpression (field of type ValueNode)
+               |  |  |  |  |     |  L  value: 76
+               |  |  |  |  |     |- name: testscore
+               |  |  |  |  |     L  type (field of type BuiltIn)
+               |  |  |  |  |        L  name: int
+               |  |  |  |  |- comparisonOperator: GTE
+               |  |  |  |  L  rightExpression (field of type ValueNode)
+               |  |  |  |     L  value: 70
+               |  |  |  L  statements
+               |  |  |     L  0 (field of type VariableAssignmentNode)
+               |  |  |        |- variable (field of type Variable)
+               |  |  |        |  |- initialExpression: null
+               |  |  |        |  |- name: grade
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: char
+               |  |  |        L  expression (field of type ValueNode)
+               |  |  |           L  value: C
+               |  |  L  3 (field of type IfNode)
+               |  |     |- expression (field of type ComparisonNode)
+               |  |     |  |- leftExpression (field of type VariableCallNode)
+               |  |     |  |  L  symbol (field of type Variable)
+               |  |     |  |     |- initialExpression (field of type ValueNode)
+               |  |     |  |     |  L  value: 76
+               |  |     |  |     |- name: testscore
+               |  |     |  |     L  type (field of type BuiltIn)
+               |  |     |  |        L  name: int
+               |  |     |  |- comparisonOperator: GTE
+               |  |     |  L  rightExpression (field of type ValueNode)
+               |  |     |     L  value: 60
+               |  |     L  statements
+               |  |        L  0 (field of type VariableAssignmentNode)
+               |  |           |- variable (field of type Variable)
+               |  |           |  |- initialExpression: null
+               |  |           |  |- name: grade
+               |  |           |  L  type (field of type BuiltIn)
+               |  |           |     L  name: char
+               |  |           L  expression (field of type ValueNode)
+               |  |              L  value: D
+               |  L  elseNode (field of type ElseNode)
+               |     L  statements
+               |        L  0 (field of type VariableAssignmentNode)
+               |           |- variable (field of type Variable)
+               |           |  |- initialExpression: null
+               |           |  |- name: grade
+               |           |  L  type (field of type BuiltIn)
+               |           |     L  name: char
+               |           L  expression (field of type ValueNode)
+               |              L  value: F
+               L  8 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type VariableCallNode)
+                        L  symbol (field of type Variable)
+                           |- initialExpression: null
+                           |- name: grade
+                           L  type (field of type BuiltIn)
+                              L  name: char
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/if/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/if/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/Main.java
rename from src/test/resources/java-test-files/cmjava2023/controlFlow/if/Main.java
rename to src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/Main.java
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/if/Main.java	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/Main.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -1,4 +1,4 @@
-package cmjava2023.controlFlow.if;
+package cmjava2023.controlFlow.if_test;
 
 public class Main {
     public static void main(String[] args) {
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/AST.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,214 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: controlFlow
+   |     L  2: return_test
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         |- 0 (field of type FunctionNode)
+         |  |- functionSymbol (field of type Function)
+         |  |  |- accessModifier: PUBLIC
+         |  |  |- instanceModifier: STATIC
+         |  |  |- name: main
+         |  |  L  type (field of type BuiltIn)
+         |  |     L  name: void
+         |  |- parameters
+         |  |  L  0 (field of type ParameterNode)
+         |  |     L  parameterSymbol (field of type Parameter)
+         |  |        |- name: args
+         |  |        L  type (field of type ArrayType)
+         |  |           |- arrayType (field of type BuiltIn)
+         |  |           |  |- name: String
+         |  |           |  L  type (field of type BuiltIn)
+         |  |           |     L  name: String
+         |  |           L  dimensions: 1
+         |  |- exception: null
+         |  L  body
+         |     |- 0 (field of type VariableNode)
+         |     |  L  variableSymbol (field of type Variable)
+         |     |     |- initialExpression (field of type FunctionCallNode)
+         |     |     |  |- function (field of type Function)
+         |     |     |  |  |- accessModifier: PUBLIC
+         |     |     |  |  |- instanceModifier: STATIC
+         |     |     |  |  |- name: addNumbers
+         |     |     |  |  L  type (field of type BuiltIn)
+         |     |     |  |     L  name: int
+         |     |     |  L  values
+         |     |     |     |- 0 (field of type ValueNode)
+         |     |     |     |  L  value: 5
+         |     |     |     L  1 (field of type ValueNode)
+         |     |     |        L  value: 7
+         |     |     |- name: result
+         |     |     L  type (field of type BuiltIn)
+         |     |        L  name: int
+         |     |- 1 (field of type FunctionCallNode)
+         |     |  |- function (field of type Function)
+         |     |  |  |- accessModifier: PUBLIC
+         |     |  |  |- instanceModifier: null
+         |     |  |  |- name: System.out.println
+         |     |  |  L  type (field of type BuiltIn)
+         |     |  |     L  name: void
+         |     |  L  values
+         |     |     L  0 (field of type VariableCallNode)
+         |     |        L  symbol (field of type Variable)
+         |     |           |- initialExpression (field of type FunctionCallNode)
+         |     |           |  |- function (field of type Function)
+         |     |           |  |  |- accessModifier: PUBLIC
+         |     |           |  |  |- instanceModifier: STATIC
+         |     |           |  |  |- name: addNumbers
+         |     |           |  |  L  type (field of type BuiltIn)
+         |     |           |  |     L  name: int
+         |     |           |  L  values
+         |     |           |     |- 0 (field of type ValueNode)
+         |     |           |     |  L  value: 5
+         |     |           |     L  1 (field of type ValueNode)
+         |     |           |        L  value: 7
+         |     |           |- name: result
+         |     |           L  type (field of type BuiltIn)
+         |     |              L  name: int
+         |     |- 2 (field of type FunctionCallNode)
+         |     |  |- function (field of type Function)
+         |     |  |  |- accessModifier: PUBLIC
+         |     |  |  |- instanceModifier: STATIC
+         |     |  |  |- name: printMessage
+         |     |  |  L  type (field of type BuiltIn)
+         |     |  |     L  name: void
+         |     |  L  values
+         |     |     |- 0 (field of type ValueNode)
+         |     |     |  L  value: Hello, World!
+         |     |     L  1 (field of type ValueNode)
+         |     |        L  value: true
+         |     L  3 (field of type FunctionCallNode)
+         |        |- function (field of type Function)
+         |        |  |- accessModifier: PUBLIC
+         |        |  |- instanceModifier: STATIC
+         |        |  |- name: printMessage
+         |        |  L  type (field of type BuiltIn)
+         |        |     L  name: void
+         |        L  values
+         |           |- 0 (field of type ValueNode)
+         |           |  L  value: Hello, World!
+         |           L  1 (field of type ValueNode)
+         |              L  value: false
+         |- 1 (field of type FunctionNode)
+         |  |- functionSymbol (field of type Function)
+         |  |  |- accessModifier: PUBLIC
+         |  |  |- instanceModifier: STATIC
+         |  |  |- name: addNumbers
+         |  |  L  type (field of type BuiltIn)
+         |  |     L  name: int
+         |  |- parameters
+         |  |  |- 0 (field of type ParameterNode)
+         |  |  |  L  parameterSymbol (field of type Parameter)
+         |  |  |     |- name: a
+         |  |  |     L  type (field of type BuiltIn)
+         |  |  |        L  name: int
+         |  |  L  1 (field of type ParameterNode)
+         |  |     L  parameterSymbol (field of type Parameter)
+         |  |        |- name: b
+         |  |        L  type (field of type BuiltIn)
+         |  |           L  name: int
+         |  |- exception: null
+         |  L  body
+         |     |- 0 (field of type VariableNode)
+         |     |  L  variableSymbol (field of type Variable)
+         |     |     |- initialExpression (field of type InfixNode)
+         |     |     |  |- leftExpression (field of type ParameterCallNode)
+         |     |     |  |  L  parameter (field of type Parameter)
+         |     |     |  |     |- name: a
+         |     |     |  |     L  type (field of type BuiltIn)
+         |     |     |  |        L  name: int
+         |     |     |  |- operator: PLUS
+         |     |     |  L  rightExpression (field of type ParameterCallNode)
+         |     |     |     L  parameter (field of type Parameter)
+         |     |     |        |- name: b
+         |     |     |        L  type (field of type BuiltIn)
+         |     |     |           L  name: int
+         |     |     |- name: sum
+         |     |     L  type (field of type BuiltIn)
+         |     |        L  name: int
+         |     L  1 (field of type ReturnNode)
+         |        L  value (field of type VariableCallNode)
+         |           L  symbol (field of type Variable)
+         |              |- initialExpression (field of type InfixNode)
+         |              |  |- leftExpression (field of type ParameterCallNode)
+         |              |  |  L  parameter (field of type Parameter)
+         |              |  |     |- name: a
+         |              |  |     L  type (field of type BuiltIn)
+         |              |  |        L  name: int
+         |              |  |- operator: PLUS
+         |              |  L  rightExpression (field of type ParameterCallNode)
+         |              |     L  parameter (field of type Parameter)
+         |              |        |- name: b
+         |              |        L  type (field of type BuiltIn)
+         |              |           L  name: int
+         |              |- name: sum
+         |              L  type (field of type BuiltIn)
+         |                 L  name: int
+         L  2 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: printMessage
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  |- 0 (field of type ParameterNode)
+            |  |  L  parameterSymbol (field of type Parameter)
+            |  |     |- name: message
+            |  |     L  type (field of type BuiltIn)
+            |  |        L  name: String
+            |  L  1 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: shouldPrint
+            |        L  type (field of type BuiltIn)
+            |           L  name: boolean
+            |- exception: null
+            L  body
+               |- 0 (field of type IfBlockNode)
+               |  |- ifNodes
+               |  |  L  0 (field of type IfNode)
+               |  |     |- expression (field of type ParameterCallNode)
+               |  |     |  L  parameter (field of type Parameter)
+               |  |     |     |- name: shouldPrint
+               |  |     |     L  type (field of type BuiltIn)
+               |  |     |        L  name: boolean
+               |  |     L  statements
+               |  |        |- 0 (field of type FunctionCallNode)
+               |  |        |  |- function (field of type Function)
+               |  |        |  |  |- accessModifier: PUBLIC
+               |  |        |  |  |- instanceModifier: null
+               |  |        |  |  |- name: System.out.println
+               |  |        |  |  L  type (field of type BuiltIn)
+               |  |        |  |     L  name: void
+               |  |        |  L  values
+               |  |        |     L  0 (field of type ParameterCallNode)
+               |  |        |        L  parameter (field of type Parameter)
+               |  |        |           |- name: message
+               |  |        |           L  type (field of type BuiltIn)
+               |  |        |              L  name: String
+               |  |        L  1 (field of type ReturnNode)
+               |  |           L  value: null
+               |  L  elseNode: null
+               L  1 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type ValueNode)
+                        L  value: I will not print this
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/return/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/return/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/Main.java
rename from src/test/resources/java-test-files/cmjava2023/controlFlow/return/Main.java
rename to src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/Main.java
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/return/Main.java	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/Main.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -1,4 +1,4 @@
-package cmjava2023.controlFlow.return;
+package cmjava2023.controlFlow.return_test;
 
 public class Main {
     public static void main(String[] args) {
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/AST.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,762 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: controlFlow
+   |     L  2: switch_test
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 8
+               |     |- name: month
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression: null
+               |     |- name: monthString
+               |     L  type (field of type BuiltIn)
+               |        L  name: String
+               |- 2 (field of type SwitchNode)
+               |  |- switchEx (field of type VariableCallNode)
+               |  |  L  symbol (field of type Variable)
+               |  |     |- initialExpression (field of type ValueNode)
+               |  |     |  L  value: 8
+               |  |     |- name: month
+               |  |     L  type (field of type BuiltIn)
+               |  |        L  name: int
+               |  |- caseNodes
+               |  |  |- 0 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 1
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: January
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 1 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 2
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: February
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 2 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 3
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: March
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 3 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 4
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: April
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 4 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 5
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: May
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 5 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 6
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: June
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 6 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 7
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: July
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 7 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 8
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: August
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 8 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 9
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: September
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 9 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 10
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: October
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 10 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 11
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression: null
+               |  |  |     |  |  |- name: monthString
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: String
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: November
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  L  11 (field of type CaseNode)
+               |  |     |- caseEx (field of type ValueNode)
+               |  |     |  L  value: 12
+               |  |     L  body
+               |  |        |- 0 (field of type VariableAssignmentNode)
+               |  |        |  |- variable (field of type Variable)
+               |  |        |  |  |- initialExpression: null
+               |  |        |  |  |- name: monthString
+               |  |        |  |  L  type (field of type BuiltIn)
+               |  |        |  |     L  name: String
+               |  |        |  L  expression (field of type ValueNode)
+               |  |        |     L  value: December
+               |  |        L  1 (field of type BreakNode)
+               |  L  defaultStatements
+               |     |- 0 (field of type VariableAssignmentNode)
+               |     |  |- variable (field of type Variable)
+               |     |  |  |- initialExpression: null
+               |     |  |  |- name: monthString
+               |     |  |  L  type (field of type BuiltIn)
+               |     |  |     L  name: String
+               |     |  L  expression (field of type ValueNode)
+               |     |     L  value: Invalid month
+               |     L  1 (field of type BreakNode)
+               |- 3 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression: null
+               |           |- name: monthString
+               |           L  type (field of type BuiltIn)
+               |              L  name: String
+               |- 4 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 8
+               |     |- name: month2Example
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 5 (field of type SwitchNode)
+               |  |- switchEx (field of type VariableCallNode)
+               |  |  L  symbol (field of type Variable)
+               |  |     |- initialExpression (field of type ValueNode)
+               |  |     |  L  value: 8
+               |  |     |- name: month2Example
+               |  |     L  type (field of type BuiltIn)
+               |  |        L  name: int
+               |  |- caseNodes
+               |  |  |- 0 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 1
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: January
+               |  |  |- 1 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 2
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: February
+               |  |  |- 2 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 3
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: March
+               |  |  |- 3 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 4
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: April
+               |  |  |- 4 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 5
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: May
+               |  |  |- 5 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 6
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: June
+               |  |  |- 6 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 7
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: July
+               |  |  |- 7 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 8
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: August
+               |  |  |- 8 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 9
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: September
+               |  |  |- 9 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 10
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: October
+               |  |  |- 10 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 11
+               |  |  |  L  body
+               |  |  |     L  0 (field of type FunctionCallNode)
+               |  |  |        |- function (field of type Function)
+               |  |  |        |  |- accessModifier: PUBLIC
+               |  |  |        |  |- instanceModifier: null
+               |  |  |        |  |- name: System.out.println
+               |  |  |        |  L  type (field of type BuiltIn)
+               |  |  |        |     L  name: void
+               |  |  |        L  values
+               |  |  |           L  0 (field of type ValueNode)
+               |  |  |              L  value: November
+               |  |  L  11 (field of type CaseNode)
+               |  |     |- caseEx (field of type ValueNode)
+               |  |     |  L  value: 12
+               |  |     L  body
+               |  |        |- 0 (field of type FunctionCallNode)
+               |  |        |  |- function (field of type Function)
+               |  |        |  |  |- accessModifier: PUBLIC
+               |  |        |  |  |- instanceModifier: null
+               |  |        |  |  |- name: System.out.println
+               |  |        |  |  L  type (field of type BuiltIn)
+               |  |        |  |     L  name: void
+               |  |        |  L  values
+               |  |        |     L  0 (field of type ValueNode)
+               |  |        |        L  value: December
+               |  |        L  1 (field of type BreakNode)
+               |  L  defaultStatements
+               |     L  0 (field of type BreakNode)
+               |- 6 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 2
+               |     |- name: month3example
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 7 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 2000
+               |     |- name: year
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 8 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 0
+               |     |- name: numDays
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               |- 9 (field of type SwitchNode)
+               |  |- switchEx (field of type VariableCallNode)
+               |  |  L  symbol (field of type Variable)
+               |  |     |- initialExpression (field of type ValueNode)
+               |  |     |  L  value: 2
+               |  |     |- name: month3example
+               |  |     L  type (field of type BuiltIn)
+               |  |        L  name: int
+               |  |- caseNodes
+               |  |  |- 0 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 12
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression (field of type ValueNode)
+               |  |  |     |  |  |  L  value: 0
+               |  |  |     |  |  |- name: numDays
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: int
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: 31
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  |- 1 (field of type CaseNode)
+               |  |  |  |- caseEx (field of type ValueNode)
+               |  |  |  |  L  value: 11
+               |  |  |  L  body
+               |  |  |     |- 0 (field of type VariableAssignmentNode)
+               |  |  |     |  |- variable (field of type Variable)
+               |  |  |     |  |  |- initialExpression (field of type ValueNode)
+               |  |  |     |  |  |  L  value: 0
+               |  |  |     |  |  |- name: numDays
+               |  |  |     |  |  L  type (field of type BuiltIn)
+               |  |  |     |  |     L  name: int
+               |  |  |     |  L  expression (field of type ValueNode)
+               |  |  |     |     L  value: 30
+               |  |  |     L  1 (field of type BreakNode)
+               |  |  L  2 (field of type CaseNode)
+               |  |     |- caseEx (field of type ValueNode)
+               |  |     |  L  value: 2
+               |  |     L  body
+               |  |        |- 0 (field of type IfBlockNode)
+               |  |        |  |- ifNodes
+               |  |        |  |  L  0 (field of type IfNode)
+               |  |        |  |     |- expression (field of type ComparisonNode)
+               |  |        |  |     |  |- leftExpression (field of type ParenthesesNode)
+               |  |        |  |     |  |  L  Expression (field of type ComparisonNode)
+               |  |        |  |     |  |     |- leftExpression (field of type ParenthesesNode)
+               |  |        |  |     |  |     |  L  Expression (field of type ComparisonNode)
+               |  |        |  |     |  |     |     |- leftExpression (field of type InfixNode)
+               |  |        |  |     |  |     |     |  |- operator: MOD
+               |  |        |  |     |  |     |     |  L  rightExpression (field of type ValueNode)
+               |  |        |  |     |  |     |     |     L  value: 4
+               |  |        |  |     |  |     |     |- comparisonOperator: EQ
+               |  |        |  |     |  |     |     L  rightExpression (field of type ValueNode)
+               |  |        |  |     |  |     |        L  value: 0
+               |  |        |  |     |  |     |- comparisonOperator: LAND
+               |  |        |  |     |  |     L  rightExpression (field of type UnaryPrefixNode)
+               |  |        |  |     |  |        |- operator: NOT
+               |  |        |  |     |  |        L  Expression (field of type ParenthesesNode)
+               |  |        |  |     |  |- comparisonOperator: LOR
+               |  |        |  |     |  L  rightExpression (field of type ParenthesesNode)
+               |  |        |  |     |     L  Expression (field of type ComparisonNode)
+               |  |        |  |     |        |- leftExpression (field of type InfixNode)
+               |  |        |  |     |        |  |- operator: MOD
+               |  |        |  |     |        |  L  rightExpression (field of type ValueNode)
+               |  |        |  |     |        |     L  value: 400
+               |  |        |  |     |        |- comparisonOperator: EQ
+               |  |        |  |     |        L  rightExpression (field of type ValueNode)
+               |  |        |  |     |           L  value: 0
+               |  |        |  |     L  statements
+               |  |        |  |        L  0 (field of type VariableAssignmentNode)
+               |  |        |  |           |- variable (field of type Variable)
+               |  |        |  |           |  |- initialExpression (field of type ValueNode)
+               |  |        |  |           |  |  L  value: 0
+               |  |        |  |           |  |- name: numDays
+               |  |        |  |           |  L  type (field of type BuiltIn)
+               |  |        |  |           |     L  name: int
+               |  |        |  |           L  expression (field of type ValueNode)
+               |  |        |  |              L  value: 29
+               |  |        |  L  elseNode (field of type ElseNode)
+               |  |        |     L  statements
+               |  |        |        L  0 (field of type VariableAssignmentNode)
+               |  |        |           |- variable (field of type Variable)
+               |  |        |           |  |- initialExpression (field of type ValueNode)
+               |  |        |           |  |  L  value: 0
+               |  |        |           |  |- name: numDays
+               |  |        |           |  L  type (field of type BuiltIn)
+               |  |        |           |     L  name: int
+               |  |        |           L  expression (field of type ValueNode)
+               |  |        |              L  value: 28
+               |  |        L  1 (field of type BreakNode)
+               |  L  defaultStatements
+               |     |- 0 (field of type FunctionCallNode)
+               |     |  |- function (field of type Function)
+               |     |  |  |- accessModifier: PUBLIC
+               |     |  |  |- instanceModifier: null
+               |     |  |  |- name: System.out.println
+               |     |  |  L  type (field of type BuiltIn)
+               |     |  |     L  name: void
+               |     |  L  values
+               |     |     L  0 (field of type ValueNode)
+               |     |        L  value: Invalid month.
+               |     L  1 (field of type BreakNode)
+               |- 10 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type VariableCallNode)
+               |        L  symbol (field of type Variable)
+               |           |- initialExpression (field of type ValueNode)
+               |           |  L  value: 0
+               |           |- name: numDays
+               |           L  type (field of type BuiltIn)
+               |              L  name: int
+               |- 11 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 0
+               |     |- name: monthNumber
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               L  12 (field of type SwitchNode)
+                  |- switchEx (field of type FunctionCallNode)
+                  |  |- function (field of type Function)
+                  |  |  |- accessModifier: null
+                  |  |  |- instanceModifier: null
+                  |  |  |- name: monthString.toLowerCase
+                  |  |  L  type: null
+                  |  L  values
+                  |- caseNodes
+                  |  |- 0 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: january
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 1
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 1 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: february
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 2
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 2 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: march
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 3
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 3 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: april
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 4
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 4 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: may
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 5
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 5 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: june
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 6
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 6 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: july
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 7
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 7 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: august
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 8
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 8 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: september
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 9
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 9 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: october
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 10
+                  |  |     L  1 (field of type BreakNode)
+                  |  |- 10 (field of type CaseNode)
+                  |  |  |- caseEx (field of type ValueNode)
+                  |  |  |  L  value: november
+                  |  |  L  body
+                  |  |     |- 0 (field of type VariableAssignmentNode)
+                  |  |     |  |- variable (field of type Variable)
+                  |  |     |  |  |- initialExpression (field of type ValueNode)
+                  |  |     |  |  |  L  value: 0
+                  |  |     |  |  |- name: monthNumber
+                  |  |     |  |  L  type (field of type BuiltIn)
+                  |  |     |  |     L  name: int
+                  |  |     |  L  expression (field of type ValueNode)
+                  |  |     |     L  value: 11
+                  |  |     L  1 (field of type BreakNode)
+                  |  L  11 (field of type CaseNode)
+                  |     |- caseEx (field of type ValueNode)
+                  |     |  L  value: december
+                  |     L  body
+                  |        |- 0 (field of type VariableAssignmentNode)
+                  |        |  |- variable (field of type Variable)
+                  |        |  |  |- initialExpression (field of type ValueNode)
+                  |        |  |  |  L  value: 0
+                  |        |  |  |- name: monthNumber
+                  |        |  |  L  type (field of type BuiltIn)
+                  |        |  |     L  name: int
+                  |        |  L  expression (field of type ValueNode)
+                  |        |     L  value: 12
+                  |        L  1 (field of type BreakNode)
+                  L  defaultStatements
+                     |- 0 (field of type VariableAssignmentNode)
+                     |  |- variable (field of type Variable)
+                     |  |  |- initialExpression (field of type ValueNode)
+                     |  |  |  L  value: 0
+                     |  |  |- name: monthNumber
+                     |  |  L  type (field of type BuiltIn)
+                     |  |     L  name: int
+                     |  L  expression (field of type ValueNode)
+                     |     L  value: 0
+                     L  1 (field of type BreakNode)
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/switch/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/switch/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/Excluded.java
rename from src/test/resources/java-test-files/cmjava2023/controlFlow/switch/Main.java
rename to src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/Excluded.java
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/switch/Main.java	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/Excluded.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -1,4 +1,4 @@
-package cmjava2023.controlFlow.switch;
+package cmjava2023.controlFlow.switch_test;
 
 public class Main {
     public static void main(String[] args) {
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/Main.java
new file mode 100644
--- /dev/null	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/Main.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -0,0 +1,158 @@
+package cmjava2023.controlFlow.switch_test;
+
+public class Main {
+    public static void main(String[] args) {
+        // Standard switch
+        int month = 8;
+        String monthString;
+        switch (month) {
+            case 1:
+                monthString = "January";
+                break;
+            case 2:
+                monthString = "February";
+                break;
+            case 3:
+                monthString = "March";
+                break;
+            case 4:
+                monthString = "April";
+                break;
+            case 5:
+                monthString = "May";
+                break;
+            case 6:
+                monthString = "June";
+                break;
+            case 7:
+                monthString = "July";
+                break;
+            case 8:
+                monthString = "August";
+                break;
+            case 9:
+                monthString = "September";
+                break;
+            case 10:
+                monthString = "October";
+                break;
+            case 11:
+                monthString = "November";
+                break;
+            case 12:
+                monthString = "December";
+                break;
+            default:
+                monthString = "Invalid month";
+                break;
+        }
+        System.out.println(monthString);
+
+        //ss
+        int month2Example = 8;
+
+        switch (month2Example) {
+            case 1:
+                System.out.println("January");
+            case 2:
+                System.out.println("February");
+            case 3:
+                System.out.println("March");
+            case 4:
+                System.out.println("April");
+            case 5:
+                System.out.println("May");
+            case 6:
+                System.out.println("June");
+            case 7:
+                System.out.println("July");
+            case 8:
+                System.out.println("August");
+            case 9:
+                System.out.println("September");
+            case 10:
+                System.out.println("October");
+            case 11:
+                System.out.println("November");
+            case 12:
+                System.out.println("December");
+                break;
+            default:
+                break;
+        }
+
+        //  multiple case labels
+
+        int month3example = 2;
+        int year = 2000;
+        int numDays = 0;
+
+        switch (month3example) {
+            case 12:
+                numDays = 31;
+                break;
+            case 11:
+                numDays = 30;
+                break;
+            case 2:
+                if (((year % 4 == 0) &&
+                        !(year % 100 == 0))
+                        || (year % 400 == 0)) {
+                    numDays = 29;
+                } else {
+                    numDays = 28;
+                }
+                break;
+            default:
+                System.out.println("Invalid month.");
+                break;
+        }
+        System.out.println(numDays);
+
+        // String match
+
+        int monthNumber = 0;
+
+        switch (monthString.toLowerCase()) {
+            case "january":
+                monthNumber = 1;
+                break;
+            case "february":
+                monthNumber = 2;
+                break;
+            case "march":
+                monthNumber = 3;
+                break;
+            case "april":
+                monthNumber = 4;
+                break;
+            case "may":
+                monthNumber = 5;
+                break;
+            case "june":
+                monthNumber = 6;
+                break;
+            case "july":
+                monthNumber = 7;
+                break;
+            case "august":
+                monthNumber = 8;
+                break;
+            case "september":
+                monthNumber = 9;
+                break;
+            case "october":
+                monthNumber = 10;
+                break;
+            case "november":
+                monthNumber = 11;
+                break;
+            case "december":
+                monthNumber = 12;
+                break;
+            default:
+                monthNumber = 0;
+                break;
+        }
+    }
+}
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/while_test/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/while_test/AST.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/while_test/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/while_test/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,82 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     |- 1: controlFlow
+   |     L  2: while_test
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception: null
+            L  body
+               |- 0 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type ValueNode)
+               |     |  L  value: 1
+               |     |- name: count
+               |     L  type (field of type BuiltIn)
+               |        L  name: int
+               L  1 (field of type WhileLoopNode)
+                  |- expression (field of type ComparisonNode)
+                  |  |- leftExpression (field of type VariableCallNode)
+                  |  |  L  symbol (field of type Variable)
+                  |  |     |- initialExpression (field of type ValueNode)
+                  |  |     |  L  value: 1
+                  |  |     |- name: count
+                  |  |     L  type (field of type BuiltIn)
+                  |  |        L  name: int
+                  |  |- comparisonOperator: DIAMOND_OPEN
+                  |  L  rightExpression (field of type ValueNode)
+                  |     L  value: 11
+                  L  body
+                     |- 0 (field of type FunctionCallNode)
+                     |  |- function (field of type Function)
+                     |  |  |- accessModifier: PUBLIC
+                     |  |  |- instanceModifier: null
+                     |  |  |- name: System.out.println
+                     |  |  L  type (field of type BuiltIn)
+                     |  |     L  name: void
+                     |  L  values
+                     |     L  0 (field of type VariableCallNode)
+                     |        L  symbol (field of type Variable)
+                     |           |- initialExpression (field of type ValueNode)
+                     |           |  L  value: 1
+                     |           |- name: count
+                     |           L  type (field of type BuiltIn)
+                     |              L  name: int
+                     L  1 (field of type UnarySuffixNode)
+                        |- operator: INC
+                        L  Expression (field of type VariableCallNode)
+                           L  symbol (field of type Variable)
+                              |- initialExpression (field of type ValueNode)
+                              |  L  value: 1
+                              |- name: count
+                              L  type (field of type BuiltIn)
+                                 L  name: int
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/while/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/while/Main.java b/src/test/resources/java-test-files/cmjava2023/controlFlow/while_test/Main.java
rename from src/test/resources/java-test-files/cmjava2023/controlFlow/while/Main.java
rename to src/test/resources/java-test-files/cmjava2023/controlFlow/while_test/Main.java
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/while/Main.java	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/while_test/Main.java	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -1,4 +1,4 @@
-package cmjava2023.controlFlow.while;
+package cmjava2023.controlFlow.while_test;
 
 public class Main {
     public static void main(String[] args) {
Index: src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ParseTree.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ParseTree.txt	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/ints/logicops/ParseTree.txt	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -84,13 +84,14 @@
       |     |  |  |  L  i2
       |     |  |  |- =
       |     |  |  L  Expressions: i&2
-      |     |  |     |- Expression: i
-      |     |  |     |  L  i
-      |     |  |     |- Expression_operator: &
-      |     |  |     |  L  Bit_comparison_operator: &
-      |     |  |     |     L  &
-      |     |  |     L  Expression: 2
-      |     |  |        L  2
+      |     |  |     L  Expression: i&2
+      |     |  |        |- Expression: i
+      |     |  |        |  L  i
+      |     |  |        |- Expression_operator: &
+      |     |  |        |  L  Bit_comparison_operator: &
+      |     |  |        |     L  &
+      |     |  |        L  Expression: 2
+      |     |  |           L  2
       |     |  |- ;
       |     |  |- Assignment: inti3=i|2
       |     |  |  |- Variable_declaration: inti3
@@ -101,13 +102,14 @@
       |     |  |  |  L  i3
       |     |  |  |- =
       |     |  |  L  Expressions: i|2
-      |     |  |     |- Expression: i
-      |     |  |     |  L  i
-      |     |  |     |- Expression_operator: |
-      |     |  |     |  L  Bit_comparison_operator: |
-      |     |  |     |     L  |
-      |     |  |     L  Expression: 2
-      |     |  |        L  2
+      |     |  |     L  Expression: i|2
+      |     |  |        |- Expression: i
+      |     |  |        |  L  i
+      |     |  |        |- Expression_operator: |
+      |     |  |        |  L  Bit_comparison_operator: |
+      |     |  |        |     L  |
+      |     |  |        L  Expression: 2
+      |     |  |           L  2
       |     |  |- ;
       |     |  |- Assignment: inti4=eight<<1
       |     |  |  |- Variable_declaration: inti4
@@ -118,13 +120,14 @@
       |     |  |  |  L  i4
       |     |  |  |- =
       |     |  |  L  Expressions: eight<<1
-      |     |  |     |- Expression: eight
-      |     |  |     |  L  eight
-      |     |  |     |- Expression_operator: <<
-      |     |  |     |  L  Bit_comparison_operator: <<
-      |     |  |     |     L  <<
-      |     |  |     L  Expression: 1
-      |     |  |        L  1
+      |     |  |     L  Expression: eight<<1
+      |     |  |        |- Expression: eight
+      |     |  |        |  L  eight
+      |     |  |        |- Expression_operator: <<
+      |     |  |        |  L  Bit_comparison_operator: <<
+      |     |  |        |     L  <<
+      |     |  |        L  Expression: 1
+      |     |  |           L  1
       |     |  |- ;
       |     |  |- Assignment: inti5=eight>>1
       |     |  |  |- Variable_declaration: inti5
@@ -135,13 +138,14 @@
       |     |  |  |  L  i5
       |     |  |  |- =
       |     |  |  L  Expressions: eight>>1
-      |     |  |     |- Expression: eight
-      |     |  |     |  L  eight
-      |     |  |     |- Expression_operator: >>
-      |     |  |     |  L  Bit_comparison_operator: >>
-      |     |  |     |     L  >>
-      |     |  |     L  Expression: 1
-      |     |  |        L  1
+      |     |  |     L  Expression: eight>>1
+      |     |  |        |- Expression: eight
+      |     |  |        |  L  eight
+      |     |  |        |- Expression_operator: >>
+      |     |  |        |  L  Bit_comparison_operator: >>
+      |     |  |        |     L  >>
+      |     |  |        L  Expression: 1
+      |     |  |           L  1
       |     |  |- ;
       |     |  |- Assignment: inti6=eight>>>1
       |     |  |  |- Variable_declaration: inti6
@@ -152,13 +156,14 @@
       |     |  |  |  L  i6
       |     |  |  |- =
       |     |  |  L  Expressions: eight>>>1
-      |     |  |     |- Expression: eight
-      |     |  |     |  L  eight
-      |     |  |     |- Expression_operator: >>>
-      |     |  |     |  L  Bit_comparison_operator: >>>
-      |     |  |     |     L  >>>
-      |     |  |     L  Expression: 1
-      |     |  |        L  1
+      |     |  |     L  Expression: eight>>>1
+      |     |  |        |- Expression: eight
+      |     |  |        |  L  eight
+      |     |  |        |- Expression_operator: >>>
+      |     |  |        |  L  Bit_comparison_operator: >>>
+      |     |  |        |     L  >>>
+      |     |  |        L  Expression: 1
+      |     |  |           L  1
       |     |  |- ;
       |     |  |- Assignment: inti7=i2^2
       |     |  |  |- Variable_declaration: inti7
@@ -169,13 +174,14 @@
       |     |  |  |  L  i7
       |     |  |  |- =
       |     |  |  L  Expressions: i2^2
-      |     |  |     |- Expression: i2
-      |     |  |     |  L  i2
-      |     |  |     |- Expression_operator: ^
-      |     |  |     |  L  Bit_comparison_operator: ^
-      |     |  |     |     L  ^
-      |     |  |     L  Expression: 2
-      |     |  |        L  2
+      |     |  |     L  Expression: i2^2
+      |     |  |        |- Expression: i2
+      |     |  |        |  L  i2
+      |     |  |        |- Expression_operator: ^
+      |     |  |        |  L  Bit_comparison_operator: ^
+      |     |  |        |     L  ^
+      |     |  |        L  Expression: 2
+      |     |  |           L  2
       |     |  |- ;
       |     |  |- Expressions: System.out.println("i:")
       |     |  |  L  Expression: System.out.println("i:")
Index: src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ParseTree.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ParseTree.txt	(revision ca4ab41556ad67ecf0224b804b7ec7b76ac1db4b)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/longs/logicops/ParseTree.txt	(revision fed4d533d391dd080bff4dd5b6bf6b62515667e8)
@@ -72,13 +72,14 @@
       |     |  |  |  L  l2
       |     |  |  |- =
       |     |  |  L  Expressions: l&2
-      |     |  |     |- Expression: l
-      |     |  |     |  L  l
-      |     |  |     |- Expression_operator: &
-      |     |  |     |  L  Bit_comparison_operator: &
-      |     |  |     |     L  &
-      |     |  |     L  Expression: 2
-      |     |  |        L  2
+      |     |  |     L  Expression: l&2
+      |     |  |        |- Expression: l
+      |     |  |        |  L  l
+      |     |  |        |- Expression_operator: &
+      |     |  |        |  L  Bit_comparison_operator: &
+      |     |  |        |     L  &
+      |     |  |        L  Expression: 2
+      |     |  |           L  2
       |     |  |- ;
       |     |  |- Assignment: longl3=l|2
       |     |  |  |- Variable_declaration: longl3
@@ -89,13 +90,14 @@
       |     |  |  |  L  l3
       |     |  |  |- =
       |     |  |  L  Expressions: l|2
-      |     |  |     |- Expression: l
-      |     |  |     |  L  l
-      |     |  |     |- Expression_operator: |
-      |     |  |     |  L  Bit_comparison_operator: |
-      |     |  |     |     L  |
-      |     |  |     L  Expression: 2
-      |     |  |        L  2
+      |     |  |     L  Expression: l|2
+      |     |  |        |- Expression: l
+      |     |  |        |  L  l
+      |     |  |        |- Expression_operator: |
+      |     |  |        |  L  Bit_comparison_operator: |
+      |     |  |        |     L  |
+      |     |  |        L  Expression: 2
+      |     |  |           L  2
       |     |  |- ;
       |     |  |- Assignment: longl4=eight<<1
       |     |  |  |- Variable_declaration: longl4
@@ -106,13 +108,14 @@
       |     |  |  |  L  l4
       |     |  |  |- =
       |     |  |  L  Expressions: eight<<1
-      |     |  |     |- Expression: eight
-      |     |  |     |  L  eight
-      |     |  |     |- Expression_operator: <<
-      |     |  |     |  L  Bit_comparison_operator: <<
-      |     |  |     |     L  <<
-      |     |  |     L  Expression: 1
-      |     |  |        L  1
+      |     |  |     L  Expression: eight<<1
+      |     |  |        |- Expression: eight
+      |     |  |        |  L  eight
+      |     |  |        |- Expression_operator: <<
+      |     |  |        |  L  Bit_comparison_operator: <<
+      |     |  |        |     L  <<
+      |     |  |        L  Expression: 1
+      |     |  |           L  1
       |     |  |- ;
       |     |  |- Assignment: longl5=eight>>1
       |     |  |  |- Variable_declaration: longl5
@@ -123,13 +126,14 @@
       |     |  |  |  L  l5
       |     |  |  |- =
       |     |  |  L  Expressions: eight>>1
-      |     |  |     |- Expression: eight
-      |     |  |     |  L  eight
-      |     |  |     |- Expression_operator: >>
-      |     |  |     |  L  Bit_comparison_operator: >>
-      |     |  |     |     L  >>
-      |     |  |     L  Expression: 1
-      |     |  |        L  1
+      |     |  |     L  Expression: eight>>1
+      |     |  |        |- Expression: eight
+      |     |  |        |  L  eight
+      |     |  |        |- Expression_operator: >>
+      |     |  |        |  L  Bit_comparison_operator: >>
+      |     |  |        |     L  >>
+      |     |  |        L  Expression: 1
+      |     |  |           L  1
       |     |  |- ;
       |     |  |- Assignment: longl6=eight>>>1
       |     |  |  |- Variable_declaration: longl6
@@ -140,13 +144,14 @@
       |     |  |  |  L  l6
       |     |  |  |- =
       |     |  |  L  Expressions: eight>>>1
-      |     |  |     |- Expression: eight
-      |     |  |     |  L  eight
-      |     |  |     |- Expression_operator: >>>
-      |     |  |     |  L  Bit_comparison_operator: >>>
-      |     |  |     |     L  >>>
-      |     |  |     L  Expression: 1
-      |     |  |        L  1
+      |     |  |     L  Expression: eight>>>1
+      |     |  |        |- Expression: eight
+      |     |  |        |  L  eight
+      |     |  |        |- Expression_operator: >>>
+      |     |  |        |  L  Bit_comparison_operator: >>>
+      |     |  |        |     L  >>>
+      |     |  |        L  Expression: 1
+      |     |  |           L  1
       |     |  |- ;
       |     |  |- Assignment: longl7=l2^2
       |     |  |  |- Variable_declaration: longl7
@@ -157,13 +162,14 @@
       |     |  |  |  L  l7
       |     |  |  |- =
       |     |  |  L  Expressions: l2^2
-      |     |  |     |- Expression: l2
-      |     |  |     |  L  l2
-      |     |  |     |- Expression_operator: ^
-      |     |  |     |  L  Bit_comparison_operator: ^
-      |     |  |     |     L  ^
-      |     |  |     L  Expression: 2
-      |     |  |        L  2
+      |     |  |     L  Expression: l2^2
+      |     |  |        |- Expression: l2
+      |     |  |        |  L  l2
+      |     |  |        |- Expression_operator: ^
+      |     |  |        |  L  Bit_comparison_operator: ^
+      |     |  |        |     L  ^
+      |     |  |        L  Expression: 2
+      |     |  |           L  2
       |     |  |- ;
       |     |  |- Expressions: System.out.println("l:")
       |     |  |  L  Expression: System.out.println("l:")
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/ParseTree.txt
new file mode 100644
--- /dev/null	(revision 4297f87e4dfad72d4c6e89c88f1512264ad820d0)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/do_while_test/ParseTree.txt	(revision 4297f87e4dfad72d4c6e89c88f1512264ad820d0)
@@ -0,0 +1,96 @@
+Start: packagecmjava2023.controlFlow.do_while_test;publicclassMain{publicstaticvoidmain(String[]args){intcount=1;do{System.out.println(count);count++;}while(count<11);}}
+|- Global_scope: packagecmjava2023.controlFlow.do_while_test;
+|  |- Package_declaration: packagecmjava2023.controlFlow.do_while_test
+|  |  |- package
+|  |  L  Identifier: cmjava2023.controlFlow.do_while_test
+|  |     |- cmjava2023
+|  |     |- .
+|  |     |- controlFlow
+|  |     |- .
+|  |     L  do_while_test
+|  L  ;
+L  Global_scope: publicclassMain{publicstaticvoidmain(String[]args){intcount=1;do{System.out.println(count);count++;}while(count<11);}}
+   L  Class_declaration: publicclassMain{publicstaticvoidmain(String[]args){intcount=1;do{System.out.println(count);count++;}while(count<11);}}
+      |- Access_modifier: public
+      |  L  public
+      |- class
+      |- Main
+      |- {
+      |- Class_scope: publicstaticvoidmain(String[]args){intcount=1;do{System.out.println(count);count++;}while(count<11);}
+      |  L  Function_declaration: publicstaticvoidmain(String[]args){intcount=1;do{System.out.println(count);count++;}while(count<11);}
+      |     |- Access_modifier: public
+      |     |  L  public
+      |     |- static
+      |     |- Type: void
+      |     |  L  void
+      |     |- main
+      |     |- (
+      |     |- Function_declaration_args: String[]args
+      |     |  L  Function_declaration_arg: String[]args
+      |     |     |- Type: String[]
+      |     |     |  L  Array_type: String[]
+      |     |     |     |- Class_type: String
+      |     |     |     |  L  String
+      |     |     |     |- [
+      |     |     |     L  ]
+      |     |     L  args
+      |     |- )
+      |     |- {
+      |     |- Function_scope: intcount=1;do{System.out.println(count);count++;}while(count<11);
+      |     |  |- Assignment: intcount=1
+      |     |  |  |- Variable_declaration: intcount
+      |     |  |  |  |- Primitive_type: int
+      |     |  |  |  |  L  Numeric_type: int
+      |     |  |  |  |     L  Integral_type: int
+      |     |  |  |  |        L  int
+      |     |  |  |  L  count
+      |     |  |  |- =
+      |     |  |  L  Expressions: 1
+      |     |  |     L  Expression: 1
+      |     |  |        L  1
+      |     |  |- ;
+      |     |  L  Block_scope: do{System.out.println(count);count++;}while(count<11);
+      |     |     L  Do_while_loop: do{System.out.println(count);count++;}while(count<11);
+      |     |        |- do
+      |     |        |- {
+      |     |        |- Function_scope: System.out.println(count);count++;
+      |     |        |  |- Expressions: System.out.println(count)
+      |     |        |  |  L  Expression: System.out.println(count)
+      |     |        |  |     L  Function_call: System.out.println(count)
+      |     |        |  |        |- Identifier: System.out.println
+      |     |        |  |        |  |- System
+      |     |        |  |        |  |- .
+      |     |        |  |        |  |- out
+      |     |        |  |        |  |- .
+      |     |        |  |        |  L  println
+      |     |        |  |        |- (
+      |     |        |  |        |- Function_args: count
+      |     |        |  |        |  L  Function_arg: count
+      |     |        |  |        |     L  Expressions: count
+      |     |        |  |        |        L  Expression: count
+      |     |        |  |        |           L  count
+      |     |        |  |        L  )
+      |     |        |  |- ;
+      |     |        |  |- Expressions: count++
+      |     |        |  |  L  Expression: count++
+      |     |        |  |     |- Expression: count
+      |     |        |  |     |  L  count
+      |     |        |  |     L  Expression_suffix: ++
+      |     |        |  |        L  ++
+      |     |        |  L  ;
+      |     |        |- }
+      |     |        |- while
+      |     |        |- (
+      |     |        |- Expressions: count<11
+      |     |        |  L  Expression: count<11
+      |     |        |     |- Expression: count
+      |     |        |     |  L  count
+      |     |        |     |- Expression_operator: <
+      |     |        |     |  L  Numerical_comparison_operator: <
+      |     |        |     |     L  <
+      |     |        |     L  Expression: 11
+      |     |        |        L  11
+      |     |        |- )
+      |     |        L  ;
+      |     L  }
+      L  }
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/ParseTree.txt
new file mode 100644
--- /dev/null	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/return_test/ParseTree.txt	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -0,0 +1,248 @@
+Start: packagecmjava2023.controlFlow.return_test;publicclassMain{publicstaticvoidmain(String[]args){intresult=addNumbers(5,7);System.out.println(result);printMessage("Hello, World!",true);printMessage("Hello, World!",false);}publicstaticintaddNumbers(inta,intb){intsum=a+b;returnsum;}publicstaticvoidprintMessage(Stringmessage,booleanshouldPrint){if(shouldPrint){System.out.println(message);return;}System.out.println("I will not print this");}}
+|- Global_scope: packagecmjava2023.controlFlow.return_test;
+|  |- Package_declaration: packagecmjava2023.controlFlow.return_test
+|  |  |- package
+|  |  L  Identifier: cmjava2023.controlFlow.return_test
+|  |     |- cmjava2023
+|  |     |- .
+|  |     |- controlFlow
+|  |     |- .
+|  |     L  return_test
+|  L  ;
+L  Global_scope: publicclassMain{publicstaticvoidmain(String[]args){intresult=addNumbers(5,7);System.out.println(result);printMessage("Hello, World!",true);printMessage("Hello, World!",false);}publicstaticintaddNumbers(inta,intb){intsum=a+b;returnsum;}publicstaticvoidprintMessage(Stringmessage,booleanshouldPrint){if(shouldPrint){System.out.println(message);return;}System.out.println("I will not print this");}}
+   L  Class_declaration: publicclassMain{publicstaticvoidmain(String[]args){intresult=addNumbers(5,7);System.out.println(result);printMessage("Hello, World!",true);printMessage("Hello, World!",false);}publicstaticintaddNumbers(inta,intb){intsum=a+b;returnsum;}publicstaticvoidprintMessage(Stringmessage,booleanshouldPrint){if(shouldPrint){System.out.println(message);return;}System.out.println("I will not print this");}}
+      |- Access_modifier: public
+      |  L  public
+      |- class
+      |- Main
+      |- {
+      |- Class_scope: publicstaticvoidmain(String[]args){intresult=addNumbers(5,7);System.out.println(result);printMessage("Hello, World!",true);printMessage("Hello, World!",false);}publicstaticintaddNumbers(inta,intb){intsum=a+b;returnsum;}publicstaticvoidprintMessage(Stringmessage,booleanshouldPrint){if(shouldPrint){System.out.println(message);return;}System.out.println("I will not print this");}
+      |  |- Function_declaration: publicstaticvoidmain(String[]args){intresult=addNumbers(5,7);System.out.println(result);printMessage("Hello, World!",true);printMessage("Hello, World!",false);}
+      |  |  |- Access_modifier: public
+      |  |  |  L  public
+      |  |  |- static
+      |  |  |- Type: void
+      |  |  |  L  void
+      |  |  |- main
+      |  |  |- (
+      |  |  |- Function_declaration_args: String[]args
+      |  |  |  L  Function_declaration_arg: String[]args
+      |  |  |     |- Type: String[]
+      |  |  |     |  L  Array_type: String[]
+      |  |  |     |     |- Class_type: String
+      |  |  |     |     |  L  String
+      |  |  |     |     |- [
+      |  |  |     |     L  ]
+      |  |  |     L  args
+      |  |  |- )
+      |  |  |- {
+      |  |  |- Function_scope: intresult=addNumbers(5,7);System.out.println(result);printMessage("Hello, World!",true);printMessage("Hello, World!",false);
+      |  |  |  |- Assignment: intresult=addNumbers(5,7)
+      |  |  |  |  |- Variable_declaration: intresult
+      |  |  |  |  |  |- Primitive_type: int
+      |  |  |  |  |  |  L  Numeric_type: int
+      |  |  |  |  |  |     L  Integral_type: int
+      |  |  |  |  |  |        L  int
+      |  |  |  |  |  L  result
+      |  |  |  |  |- =
+      |  |  |  |  L  Expressions: addNumbers(5,7)
+      |  |  |  |     L  Expression: addNumbers(5,7)
+      |  |  |  |        L  Function_call: addNumbers(5,7)
+      |  |  |  |           |- Identifier: addNumbers
+      |  |  |  |           |  L  addNumbers
+      |  |  |  |           |- (
+      |  |  |  |           |- Function_args: 5,7
+      |  |  |  |           |  |- Function_arg: 5
+      |  |  |  |           |  |  L  Expressions: 5
+      |  |  |  |           |  |     L  Expression: 5
+      |  |  |  |           |  |        L  5
+      |  |  |  |           |  |- ,
+      |  |  |  |           |  L  Function_arg: 7
+      |  |  |  |           |     L  Expressions: 7
+      |  |  |  |           |        L  Expression: 7
+      |  |  |  |           |           L  7
+      |  |  |  |           L  )
+      |  |  |  |- ;
+      |  |  |  |- Expressions: System.out.println(result)
+      |  |  |  |  L  Expression: System.out.println(result)
+      |  |  |  |     L  Function_call: System.out.println(result)
+      |  |  |  |        |- Identifier: System.out.println
+      |  |  |  |        |  |- System
+      |  |  |  |        |  |- .
+      |  |  |  |        |  |- out
+      |  |  |  |        |  |- .
+      |  |  |  |        |  L  println
+      |  |  |  |        |- (
+      |  |  |  |        |- Function_args: result
+      |  |  |  |        |  L  Function_arg: result
+      |  |  |  |        |     L  Expressions: result
+      |  |  |  |        |        L  Expression: result
+      |  |  |  |        |           L  result
+      |  |  |  |        L  )
+      |  |  |  |- ;
+      |  |  |  |- Expressions: printMessage("Hello, World!",true)
+      |  |  |  |  L  Expression: printMessage("Hello, World!",true)
+      |  |  |  |     L  Function_call: printMessage("Hello, World!",true)
+      |  |  |  |        |- Identifier: printMessage
+      |  |  |  |        |  L  printMessage
+      |  |  |  |        |- (
+      |  |  |  |        |- Function_args: "Hello, World!",true
+      |  |  |  |        |  |- Function_arg: "Hello, World!"
+      |  |  |  |        |  |  L  Expressions: "Hello, World!"
+      |  |  |  |        |  |     L  Expression: "Hello, World!"
+      |  |  |  |        |  |        L  "Hello, World!"
+      |  |  |  |        |  |- ,
+      |  |  |  |        |  L  Function_arg: true
+      |  |  |  |        |     L  Expressions: true
+      |  |  |  |        |        L  Expression: true
+      |  |  |  |        |           L  true
+      |  |  |  |        L  )
+      |  |  |  |- ;
+      |  |  |  |- Expressions: printMessage("Hello, World!",false)
+      |  |  |  |  L  Expression: printMessage("Hello, World!",false)
+      |  |  |  |     L  Function_call: printMessage("Hello, World!",false)
+      |  |  |  |        |- Identifier: printMessage
+      |  |  |  |        |  L  printMessage
+      |  |  |  |        |- (
+      |  |  |  |        |- Function_args: "Hello, World!",false
+      |  |  |  |        |  |- Function_arg: "Hello, World!"
+      |  |  |  |        |  |  L  Expressions: "Hello, World!"
+      |  |  |  |        |  |     L  Expression: "Hello, World!"
+      |  |  |  |        |  |        L  "Hello, World!"
+      |  |  |  |        |  |- ,
+      |  |  |  |        |  L  Function_arg: false
+      |  |  |  |        |     L  Expressions: false
+      |  |  |  |        |        L  Expression: false
+      |  |  |  |        |           L  false
+      |  |  |  |        L  )
+      |  |  |  L  ;
+      |  |  L  }
+      |  |- Function_declaration: publicstaticintaddNumbers(inta,intb){intsum=a+b;returnsum;}
+      |  |  |- Access_modifier: public
+      |  |  |  L  public
+      |  |  |- static
+      |  |  |- Type: int
+      |  |  |  L  Primitive_type: int
+      |  |  |     L  Numeric_type: int
+      |  |  |        L  Integral_type: int
+      |  |  |           L  int
+      |  |  |- addNumbers
+      |  |  |- (
+      |  |  |- Function_declaration_args: inta,intb
+      |  |  |  |- Function_declaration_arg: inta
+      |  |  |  |  |- Type: int
+      |  |  |  |  |  L  Primitive_type: int
+      |  |  |  |  |     L  Numeric_type: int
+      |  |  |  |  |        L  Integral_type: int
+      |  |  |  |  |           L  int
+      |  |  |  |  L  a
+      |  |  |  |- ,
+      |  |  |  L  Function_declaration_arg: intb
+      |  |  |     |- Type: int
+      |  |  |     |  L  Primitive_type: int
+      |  |  |     |     L  Numeric_type: int
+      |  |  |     |        L  Integral_type: int
+      |  |  |     |           L  int
+      |  |  |     L  b
+      |  |  |- )
+      |  |  |- {
+      |  |  |- Function_scope: intsum=a+b;returnsum;
+      |  |  |  |- Assignment: intsum=a+b
+      |  |  |  |  |- Variable_declaration: intsum
+      |  |  |  |  |  |- Primitive_type: int
+      |  |  |  |  |  |  L  Numeric_type: int
+      |  |  |  |  |  |     L  Integral_type: int
+      |  |  |  |  |  |        L  int
+      |  |  |  |  |  L  sum
+      |  |  |  |  |- =
+      |  |  |  |  L  Expressions: a+b
+      |  |  |  |     L  Expression: a+b
+      |  |  |  |        |- Expression: a
+      |  |  |  |        |  L  a
+      |  |  |  |        |- Expression_concatinator: +
+      |  |  |  |        |  L  +
+      |  |  |  |        L  Expression: b
+      |  |  |  |           L  b
+      |  |  |  |- ;
+      |  |  |  |- Return_statement: returnsum
+      |  |  |  |  |- return
+      |  |  |  |  L  Expressions: sum
+      |  |  |  |     L  Expression: sum
+      |  |  |  |        L  sum
+      |  |  |  L  ;
+      |  |  L  }
+      |  L  Function_declaration: publicstaticvoidprintMessage(Stringmessage,booleanshouldPrint){if(shouldPrint){System.out.println(message);return;}System.out.println("I will not print this");}
+      |     |- Access_modifier: public
+      |     |  L  public
+      |     |- static
+      |     |- Type: void
+      |     |  L  void
+      |     |- printMessage
+      |     |- (
+      |     |- Function_declaration_args: Stringmessage,booleanshouldPrint
+      |     |  |- Function_declaration_arg: Stringmessage
+      |     |  |  |- Type: String
+      |     |  |  |  L  Reference_type: String
+      |     |  |  |     L  Class_type: String
+      |     |  |  |        L  String
+      |     |  |  L  message
+      |     |  |- ,
+      |     |  L  Function_declaration_arg: booleanshouldPrint
+      |     |     |- Type: boolean
+      |     |     |  L  Primitive_type: boolean
+      |     |     |     L  boolean
+      |     |     L  shouldPrint
+      |     |- )
+      |     |- {
+      |     |- Function_scope: if(shouldPrint){System.out.println(message);return;}System.out.println("I will not print this");
+      |     |  |- Block_scope: if(shouldPrint){System.out.println(message);return;}
+      |     |  |  L  If_block: if(shouldPrint){System.out.println(message);return;}
+      |     |  |     L  If_statement: if(shouldPrint){System.out.println(message);return;}
+      |     |  |        |- if
+      |     |  |        |- (
+      |     |  |        |- Expressions: shouldPrint
+      |     |  |        |  L  Expression: shouldPrint
+      |     |  |        |     L  shouldPrint
+      |     |  |        |- )
+      |     |  |        |- {
+      |     |  |        |- Function_scope: System.out.println(message);return;
+      |     |  |        |  |- Expressions: System.out.println(message)
+      |     |  |        |  |  L  Expression: System.out.println(message)
+      |     |  |        |  |     L  Function_call: System.out.println(message)
+      |     |  |        |  |        |- Identifier: System.out.println
+      |     |  |        |  |        |  |- System
+      |     |  |        |  |        |  |- .
+      |     |  |        |  |        |  |- out
+      |     |  |        |  |        |  |- .
+      |     |  |        |  |        |  L  println
+      |     |  |        |  |        |- (
+      |     |  |        |  |        |- Function_args: message
+      |     |  |        |  |        |  L  Function_arg: message
+      |     |  |        |  |        |     L  Expressions: message
+      |     |  |        |  |        |        L  Expression: message
+      |     |  |        |  |        |           L  message
+      |     |  |        |  |        L  )
+      |     |  |        |  |- ;
+      |     |  |        |  |- Return_statement: return
+      |     |  |        |  |  L  return
+      |     |  |        |  L  ;
+      |     |  |        L  }
+      |     |  |- Expressions: System.out.println("I will not print this")
+      |     |  |  L  Expression: System.out.println("I will not print this")
+      |     |  |     L  Function_call: System.out.println("I will not print this")
+      |     |  |        |- Identifier: System.out.println
+      |     |  |        |  |- System
+      |     |  |        |  |- .
+      |     |  |        |  |- out
+      |     |  |        |  |- .
+      |     |  |        |  L  println
+      |     |  |        |- (
+      |     |  |        |- Function_args: "I will not print this"
+      |     |  |        |  L  Function_arg: "I will not print this"
+      |     |  |        |     L  Expressions: "I will not print this"
+      |     |  |        |        L  Expression: "I will not print this"
+      |     |  |        |           L  "I will not print this"
+      |     |  |        L  )
+      |     |  L  ;
+      |     L  }
+      L  }
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/array/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/array/AST.txt b/src/test/resources/java-test-files/cmjava2023/array/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/array/AST.txt	(revision c4cdcc723b5cffaa05773cd1ee15912bc608939f)
+++ b/src/test/resources/java-test-files/cmjava2023/array/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -33,6 +33,7 @@
             |           |  L  type (field of type BuiltIn)
             |           |     L  name: String
             |           L  dimensions: 1
+            |- exception: null
             L  body
                |- 0 (field of type VariableNode)
                |  L  variableSymbol (field of type Variable)
Index: src/test/resources/java-test-files/cmjava2023/helloworld/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/helloworld/AST.txt b/src/test/resources/java-test-files/cmjava2023/helloworld/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/helloworld/AST.txt	(revision c4cdcc723b5cffaa05773cd1ee15912bc608939f)
+++ b/src/test/resources/java-test-files/cmjava2023/helloworld/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -33,6 +33,7 @@
             |           |  L  type (field of type BuiltIn)
             |           |     L  name: String
             |           L  dimensions: 1
+            |- exception: null
             L  body
                L  0 (field of type FunctionCallNode)
                   |- function (field of type Function)
Index: src/test/resources/java-test-files/cmjava2023/primitive/assignment/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/primitive/assignment/AST.txt b/src/test/resources/java-test-files/cmjava2023/primitive/assignment/AST.txt
--- a/src/test/resources/java-test-files/cmjava2023/primitive/assignment/AST.txt	(revision c4cdcc723b5cffaa05773cd1ee15912bc608939f)
+++ b/src/test/resources/java-test-files/cmjava2023/primitive/assignment/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -34,6 +34,7 @@
             |           |  L  type (field of type BuiltIn)
             |           |     L  name: String
             |           L  dimensions: 1
+            |- exception: null
             L  body
                |- 0 (field of type VariableNode)
                |  L  variableSymbol (field of type Variable)
Index: src/test/resources/java-test-files/cmjava2023/system_in_read/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/system_in_read/AST.txt b/src/test/resources/java-test-files/cmjava2023/system_in_read/AST.txt
new file mode 100644
--- /dev/null	(revision 037a5730dc9e08fcdd5f7039583743be5b04faca)
+++ b/src/test/resources/java-test-files/cmjava2023/system_in_read/AST.txt	(revision 037a5730dc9e08fcdd5f7039583743be5b04faca)
@@ -0,0 +1,93 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     L  1: system_in_read
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception (field of type NestedIdentifierNode)
+            |  L  nestedIdentifier
+            |     |- 0: java
+            |     |- 1: io
+            |     L  2: IOException
+            L  body
+               |- 0 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: Type one char and press ENTER: 
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: char
+               |     |  L  expression (field of type FunctionCallNode)
+               |     |     |- function (field of type Function)
+               |     |     |  |- accessModifier: null
+               |     |     |  |- instanceModifier: null
+               |     |     |  |- name: System.in.read
+               |     |     |  L  type: null
+               |     |     L  values
+               |     |- name: c
+               |     L  type (field of type BuiltIn)
+               |        L  name: char
+               L  2 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type InfixNode)
+                        |- leftExpression (field of type ValueNode)
+                        |  L  value: You entered char: 
+                        |- operator: PLUS
+                        L  rightExpression (field of type VariableCallNode)
+                           L  symbol (field of type Variable)
+                              |- initialExpression (field of type CastNode)
+                              |  |- type (field of type BuiltIn)
+                              |  |  L  name: char
+                              |  L  expression (field of type FunctionCallNode)
+                              |     |- function (field of type Function)
+                              |     |  |- accessModifier: null
+                              |     |  |- instanceModifier: null
+                              |     |  |- name: System.in.read
+                              |     |  L  type: null
+                              |     L  values
+                              |- name: c
+                              L  type (field of type BuiltIn)
+                                 L  name: char
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/system_in_read/AST.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/system_in_read/AST.txt b/src/test/resources/java-test-files/cmjava2023/system_in_read/AST.txt
new file mode 100644
--- /dev/null	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
+++ b/src/test/resources/java-test-files/cmjava2023/system_in_read/AST.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -0,0 +1,93 @@
+root (field of type StartNode)
+L  body
+   |- 0 (field of type PackageNode)
+   |  L  nestedIdentifier
+   |     |- 0: cmjava2023
+   |     L  1: system_in_read
+   L  1 (field of type ClassNode)
+      |- classSymbol (field of type Clazz)
+      |  |- parentClazz: null
+      |  |- accessModifier: PUBLIC
+      |  |- instanceModifier: null
+      |  |- name: Main
+      |  L  type (field of type Clazz)
+      |     |- parentClazz: null
+      |     |- accessModifier: PUBLIC
+      |     |- instanceModifier: null
+      |     L  name: Main
+      L  body
+         L  0 (field of type FunctionNode)
+            |- functionSymbol (field of type Function)
+            |  |- accessModifier: PUBLIC
+            |  |- instanceModifier: STATIC
+            |  |- name: main
+            |  L  type (field of type BuiltIn)
+            |     L  name: void
+            |- parameters
+            |  L  0 (field of type ParameterNode)
+            |     L  parameterSymbol (field of type Parameter)
+            |        |- name: args
+            |        L  type (field of type ArrayType)
+            |           |- arrayType (field of type BuiltIn)
+            |           |  |- name: String
+            |           |  L  type (field of type BuiltIn)
+            |           |     L  name: String
+            |           L  dimensions: 1
+            |- exception (field of type NestedIdentifierNode)
+            |  L  nestedIdentifier
+            |     |- 0: java
+            |     |- 1: io
+            |     L  2: IOException
+            L  body
+               |- 0 (field of type FunctionCallNode)
+               |  |- function (field of type Function)
+               |  |  |- accessModifier: PUBLIC
+               |  |  |- instanceModifier: null
+               |  |  |- name: System.out.println
+               |  |  L  type (field of type BuiltIn)
+               |  |     L  name: void
+               |  L  values
+               |     L  0 (field of type ValueNode)
+               |        L  value: Type one char and press ENTER: 
+               |- 1 (field of type VariableNode)
+               |  L  variableSymbol (field of type Variable)
+               |     |- initialExpression (field of type CastNode)
+               |     |  |- type (field of type BuiltIn)
+               |     |  |  L  name: char
+               |     |  L  expression (field of type FunctionCallNode)
+               |     |     |- function (field of type Function)
+               |     |     |  |- accessModifier: null
+               |     |     |  |- instanceModifier: null
+               |     |     |  |- name: System.in.read
+               |     |     |  L  type: null
+               |     |     L  values
+               |     |- name: c
+               |     L  type (field of type BuiltIn)
+               |        L  name: char
+               L  2 (field of type FunctionCallNode)
+                  |- function (field of type Function)
+                  |  |- accessModifier: PUBLIC
+                  |  |- instanceModifier: null
+                  |  |- name: System.out.println
+                  |  L  type (field of type BuiltIn)
+                  |     L  name: void
+                  L  values
+                     L  0 (field of type InfixNode)
+                        |- leftExpression (field of type ValueNode)
+                        |  L  value: You entered char: 
+                        |- operator: PLUS
+                        L  rightExpression (field of type VariableCallNode)
+                           L  symbol (field of type Variable)
+                              |- initialExpression (field of type CastNode)
+                              |  |- type (field of type BuiltIn)
+                              |  |  L  name: char
+                              |  L  expression (field of type FunctionCallNode)
+                              |     |- function (field of type Function)
+                              |     |  |- accessModifier: null
+                              |     |  |- instanceModifier: null
+                              |     |  |- name: System.in.read
+                              |     |  L  type: null
+                              |     L  values
+                              |- name: c
+                              L  type (field of type BuiltIn)
+                                 L  name: char
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/system_in_read/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/system_in_read/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/system_in_read/ParseTree.txt
--- a/src/test/resources/java-test-files/cmjava2023/system_in_read/ParseTree.txt	(revision c4cdcc723b5cffaa05773cd1ee15912bc608939f)
+++ b/src/test/resources/java-test-files/cmjava2023/system_in_read/ParseTree.txt	(revision 463460f0c900a6b9fec92f92c763b9278c5cdd08)
@@ -1,0 +1,115 @@
+Start: packagecmjava2023.system_in_read;publicclassMain{publicstaticvoidmain(String[]args)throwsjava.io.IOException{System.out.println("Type one char and press ENTER: ");charc=(char)System.in.read();System.out.println("You entered char: "+c);}}
+|- Global_scope: packagecmjava2023.system_in_read;
+|  |- Package_declaration: packagecmjava2023.system_in_read
+|  |  |- package
+|  |  L  Identifier: cmjava2023.system_in_read
+|  |     |- cmjava2023
+|  |     |- .
+|  |     L  system_in_read
+|  L  ;
+L  Global_scope: publicclassMain{publicstaticvoidmain(String[]args)throwsjava.io.IOException{System.out.println("Type one char and press ENTER: ");charc=(char)System.in.read();System.out.println("You entered char: "+c);}}
+   L  Class_declaration: publicclassMain{publicstaticvoidmain(String[]args)throwsjava.io.IOException{System.out.println("Type one char and press ENTER: ");charc=(char)System.in.read();System.out.println("You entered char: "+c);}}
+      |- Access_modifier: public
+      |  L  public
+      |- class
+      |- Main
+      |- {
+      |- Class_scope: publicstaticvoidmain(String[]args)throwsjava.io.IOException{System.out.println("Type one char and press ENTER: ");charc=(char)System.in.read();System.out.println("You entered char: "+c);}
+      |  L  Function_declaration: publicstaticvoidmain(String[]args)throwsjava.io.IOException{System.out.println("Type one char and press ENTER: ");charc=(char)System.in.read();System.out.println("You entered char: "+c);}
+      |     |- Access_modifier: public
+      |     |  L  public
+      |     |- static
+      |     |- Type: void
+      |     |  L  void
+      |     |- main
+      |     |- (
+      |     |- Function_declaration_args: String[]args
+      |     |  L  Function_declaration_arg: String[]args
+      |     |     |- Type: String[]
+      |     |     |  L  Array_type: String[]
+      |     |     |     |- Class_type: String
+      |     |     |     |  L  String
+      |     |     |     |- [
+      |     |     |     L  ]
+      |     |     L  args
+      |     |- )
+      |     |- throws
+      |     |- Identifier: java.io.IOException
+      |     |  |- java
+      |     |  |- .
+      |     |  |- io
+      |     |  |- .
+      |     |  L  IOException
+      |     |- {
+      |     |- Function_scope: System.out.println("Type one char and press ENTER: ");charc=(char)System.in.read();System.out.println("You entered char: "+c);
+      |     |  |- Expressions: System.out.println("Type one char and press ENTER: ")
+      |     |  |  L  Expression: System.out.println("Type one char and press ENTER: ")
+      |     |  |     L  Function_call: System.out.println("Type one char and press ENTER: ")
+      |     |  |        |- Identifier: System.out.println
+      |     |  |        |  |- System
+      |     |  |        |  |- .
+      |     |  |        |  |- out
+      |     |  |        |  |- .
+      |     |  |        |  L  println
+      |     |  |        |- (
+      |     |  |        |- Function_args: "Type one char and press ENTER: "
+      |     |  |        |  L  Function_arg: "Type one char and press ENTER: "
+      |     |  |        |     L  Expressions: "Type one char and press ENTER: "
+      |     |  |        |        L  Expression: "Type one char and press ENTER: "
+      |     |  |        |           L  "Type one char and press ENTER: "
+      |     |  |        L  )
+      |     |  |- ;
+      |     |  |- Assignment: charc=(char)System.in.read()
+      |     |  |  |- Variable_declaration: charc
+      |     |  |  |  |- Primitive_type: char
+      |     |  |  |  |  L  Numeric_type: char
+      |     |  |  |  |     L  Integral_type: char
+      |     |  |  |  |        L  char
+      |     |  |  |  L  c
+      |     |  |  |- =
+      |     |  |  L  Expressions: (char)System.in.read()
+      |     |  |     L  Expression: (char)System.in.read()
+      |     |  |        L  Casting: (char)System.in.read()
+      |     |  |           |- (
+      |     |  |           |- Type: char
+      |     |  |           |  L  Primitive_type: char
+      |     |  |           |     L  Numeric_type: char
+      |     |  |           |        L  Integral_type: char
+      |     |  |           |           L  char
+      |     |  |           |- )
+      |     |  |           L  Expressions: System.in.read()
+      |     |  |              L  Expression: System.in.read()
+      |     |  |                 L  Function_call: System.in.read()
+      |     |  |                    |- Identifier: System.in.read
+      |     |  |                    |  |- System
+      |     |  |                    |  |- .
+      |     |  |                    |  |- in
+      |     |  |                    |  |- .
+      |     |  |                    |  L  read
+      |     |  |                    |- (
+      |     |  |                    L  )
+      |     |  |- ;
+      |     |  |- Expressions: System.out.println("You entered char: "+c)
+      |     |  |  L  Expression: System.out.println("You entered char: "+c)
+      |     |  |     L  Function_call: System.out.println("You entered char: "+c)
+      |     |  |        |- Identifier: System.out.println
+      |     |  |        |  |- System
+      |     |  |        |  |- .
+      |     |  |        |  |- out
+      |     |  |        |  |- .
+      |     |  |        |  L  println
+      |     |  |        |- (
+      |     |  |        |- Function_args: "You entered char: "+c
+      |     |  |        |  L  Function_arg: "You entered char: "+c
+      |     |  |        |     L  Expressions: "You entered char: "+c
+      |     |  |        |        L  Expression: "You entered char: "+c
+      |     |  |        |           |- Expression: "You entered char: "
+      |     |  |        |           |  L  "You entered char: "
+      |     |  |        |           |- Expression_concatinator: +
+      |     |  |        |           |  L  +
+      |     |  |        |           L  Expression: c
+      |     |  |        |              L  c
+      |     |  |        L  )
+      |     |  L  ;
+      |     L  }
+      L  }
\ No newline at end of file
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/ParseTree.txt
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/ParseTree.txt	(revision 990f2efa2d50929d4035bec7ff5ae45a452e002a)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/break_test/ParseTree.txt	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -77,25 +77,26 @@
       |     |        |  |        L  )
       |     |        |  |- ;
       |     |        |  |- Block_scope: if(i==5){break;}
-      |     |        |  |  L  If_statement: if(i==5){break;}
-      |     |        |  |     |- if
-      |     |        |  |     |- (
-      |     |        |  |     |- Expressions: i==5
-      |     |        |  |     |  L  Expression: i==5
-      |     |        |  |     |     |- Expression: i
-      |     |        |  |     |     |  L  i
-      |     |        |  |     |     |- Expression_operator: ==
-      |     |        |  |     |     |  L  Numerical_comparison_operator: ==
-      |     |        |  |     |     |     L  ==
-      |     |        |  |     |     L  Expression: 5
-      |     |        |  |     |        L  5
-      |     |        |  |     |- )
-      |     |        |  |     |- {
-      |     |        |  |     |- Function_scope: break;
-      |     |        |  |     |  |- Break_statement: break
-      |     |        |  |     |  |  L  break
-      |     |        |  |     |  L  ;
-      |     |        |  |     L  }
+      |     |        |  |  L  If_block: if(i==5){break;}
+      |     |        |  |     L  If_statement: if(i==5){break;}
+      |     |        |  |        |- if
+      |     |        |  |        |- (
+      |     |        |  |        |- Expressions: i==5
+      |     |        |  |        |  L  Expression: i==5
+      |     |        |  |        |     |- Expression: i
+      |     |        |  |        |     |  L  i
+      |     |        |  |        |     |- Expression_operator: ==
+      |     |        |  |        |     |  L  Numerical_comparison_operator: ==
+      |     |        |  |        |     |     L  ==
+      |     |        |  |        |     L  Expression: 5
+      |     |        |  |        |        L  5
+      |     |        |  |        |- )
+      |     |        |  |        |- {
+      |     |        |  |        |- Function_scope: break;
+      |     |        |  |        |  |- Break_statement: break
+      |     |        |  |        |  |  L  break
+      |     |        |  |        |  L  ;
+      |     |        |  |        L  }
       |     |        |  |- Expressions: i++
       |     |        |  |  L  Expression: i++
       |     |        |  |     |- Expression: i
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/ParseTree.txt
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/ParseTree.txt	(revision 990f2efa2d50929d4035bec7ff5ae45a452e002a)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/continue_test/ParseTree.txt	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -76,25 +76,26 @@
       |     |        |- {
       |     |        |- Function_scope: if(i==3){continue;}System.out.println(i);
       |     |        |  |- Block_scope: if(i==3){continue;}
-      |     |        |  |  L  If_statement: if(i==3){continue;}
-      |     |        |  |     |- if
-      |     |        |  |     |- (
-      |     |        |  |     |- Expressions: i==3
-      |     |        |  |     |  L  Expression: i==3
-      |     |        |  |     |     |- Expression: i
-      |     |        |  |     |     |  L  i
-      |     |        |  |     |     |- Expression_operator: ==
-      |     |        |  |     |     |  L  Numerical_comparison_operator: ==
-      |     |        |  |     |     |     L  ==
-      |     |        |  |     |     L  Expression: 3
-      |     |        |  |     |        L  3
-      |     |        |  |     |- )
-      |     |        |  |     |- {
-      |     |        |  |     |- Function_scope: continue;
-      |     |        |  |     |  |- Continue_statement: continue
-      |     |        |  |     |  |  L  continue
-      |     |        |  |     |  L  ;
-      |     |        |  |     L  }
+      |     |        |  |  L  If_block: if(i==3){continue;}
+      |     |        |  |     L  If_statement: if(i==3){continue;}
+      |     |        |  |        |- if
+      |     |        |  |        |- (
+      |     |        |  |        |- Expressions: i==3
+      |     |        |  |        |  L  Expression: i==3
+      |     |        |  |        |     |- Expression: i
+      |     |        |  |        |     |  L  i
+      |     |        |  |        |     |- Expression_operator: ==
+      |     |        |  |        |     |  L  Numerical_comparison_operator: ==
+      |     |        |  |        |     |     L  ==
+      |     |        |  |        |     L  Expression: 3
+      |     |        |  |        |        L  3
+      |     |        |  |        |- )
+      |     |        |  |        |- {
+      |     |        |  |        |- Function_scope: continue;
+      |     |        |  |        |  |- Continue_statement: continue
+      |     |        |  |        |  |  L  continue
+      |     |        |  |        |  L  ;
+      |     |        |  |        L  }
       |     |        |  |- Expressions: System.out.println(i)
       |     |        |  |  L  Expression: System.out.println(i)
       |     |        |  |     L  Function_call: System.out.println(i)
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/ParseTree.txt
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/ParseTree.txt	(revision 990f2efa2d50929d4035bec7ff5ae45a452e002a)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/ParseTree.txt	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -1,12 +1,4 @@
-Start: packagecmjava2023.controlFlow.if_test;publicclassMain{publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';}System.out.println(grade);}}
+Start: packagecmjava2023.controlFlow.if_test;publicclassMain{publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';}elseif(testscore>=80){grade='B';}elseif(testscore>=70){grade='C';}elseif(testscore>=60){grade='D';}else{grade='F';}System.out.println(grade);}}
 |- Global_scope: packagecmjava2023.controlFlow.if_test;
 |  |- Package_declaration: packagecmjava2023.controlFlow.if_test
 |  |  |- package
@@ -17,47 +9,15 @@
 |  |     |- .
 |  |     L  if_test
 |  L  ;
-L  Global_scope: publicclassMain{publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';}System.out.println(grade);}}
-   L  Class_declaration: publicclassMain{publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';}System.out.println(grade);}}
+L  Global_scope: publicclassMain{publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';}elseif(testscore>=80){grade='B';}elseif(testscore>=70){grade='C';}elseif(testscore>=60){grade='D';}else{grade='F';}System.out.println(grade);}}
+   L  Class_declaration: publicclassMain{publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';}elseif(testscore>=80){grade='B';}elseif(testscore>=70){grade='C';}elseif(testscore>=60){grade='D';}else{grade='F';}System.out.println(grade);}}
       |- Access_modifier: public
       |  L  public
       |- class
       |- Main
       |- {
-      |- Class_scope: publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';}System.out.println(grade);}
-      |  L  Function_declaration: publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';}System.out.println(grade);}
+      |- Class_scope: publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';}elseif(testscore>=80){grade='B';}elseif(testscore>=70){grade='C';}elseif(testscore>=60){grade='D';}else{grade='F';}System.out.println(grade);}
+      |  L  Function_declaration: publicstaticvoidmain(String[]args){booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';}elseif(testscore>=80){grade='B';}elseif(testscore>=70){grade='C';}elseif(testscore>=60){grade='D';}else{grade='F';}System.out.println(grade);}
       |     |- Access_modifier: public
       |     |  L  public
       |     |- static
@@ -76,15 +36,7 @@
       |     |     L  args
       |     |- )
       |     |- {
-      |     |- Function_scope: booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';}System.out.println(grade);
+      |     |- Function_scope: booleanisMoving=true;intcurrentSpeed=5;if(isMoving){currentSpeed--;}isMoving=false;if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}inttestscore=76;chargrade;if(testscore>=90){grade='A';}elseif(testscore>=80){grade='B';}elseif(testscore>=70){grade='C';}elseif(testscore>=60){grade='D';}else{grade='F';}System.out.println(grade);
       |     |  |- Assignment: booleanisMoving=true
       |     |  |  |- Variable_declaration: booleanisMoving
       |     |  |  |  |- Primitive_type: boolean
@@ -108,23 +60,24 @@
       |     |  |        L  5
       |     |  |- ;
       |     |  |- Block_scope: if(isMoving){currentSpeed--;}
-      |     |  |  L  If_statement: if(isMoving){currentSpeed--;}
-      |     |  |     |- if
-      |     |  |     |- (
-      |     |  |     |- Expressions: isMoving
-      |     |  |     |  L  Expression: isMoving
-      |     |  |     |     L  isMoving
-      |     |  |     |- )
-      |     |  |     |- {
-      |     |  |     |- Function_scope: currentSpeed--;
-      |     |  |     |  |- Expressions: currentSpeed--
-      |     |  |     |  |  L  Expression: currentSpeed--
-      |     |  |     |  |     |- Expression: currentSpeed
-      |     |  |     |  |     |  L  currentSpeed
-      |     |  |     |  |     L  Expression_suffix: --
-      |     |  |     |  |        L  --
-      |     |  |     |  L  ;
-      |     |  |     L  }
+      |     |  |  L  If_block: if(isMoving){currentSpeed--;}
+      |     |  |     L  If_statement: if(isMoving){currentSpeed--;}
+      |     |  |        |- if
+      |     |  |        |- (
+      |     |  |        |- Expressions: isMoving
+      |     |  |        |  L  Expression: isMoving
+      |     |  |        |     L  isMoving
+      |     |  |        |- )
+      |     |  |        |- {
+      |     |  |        |- Function_scope: currentSpeed--;
+      |     |  |        |  |- Expressions: currentSpeed--
+      |     |  |        |  |  L  Expression: currentSpeed--
+      |     |  |        |  |     |- Expression: currentSpeed
+      |     |  |        |  |     |  L  currentSpeed
+      |     |  |        |  |     L  Expression_suffix: --
+      |     |  |        |  |        L  --
+      |     |  |        |  L  ;
+      |     |  |        L  }
       |     |  |- Assignment: isMoving=false
       |     |  |  |- Identifier: isMoving
       |     |  |  |  L  isMoving
@@ -134,7 +87,7 @@
       |     |  |        L  false
       |     |  |- ;
       |     |  |- Block_scope: if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}
-      |     |  |  L  If_else_statement: if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}
+      |     |  |  L  If_block: if(isMoving){currentSpeed--;}else{System.out.println("The bicycle has already stopped!");}
       |     |  |     |- If_statement: if(isMoving){currentSpeed--;}
       |     |  |     |  |- if
       |     |  |     |  |- (
@@ -193,87 +146,120 @@
       |     |  |  |        L  char
       |     |  |  L  grade
       |     |  |- ;
-      |     |  |- Block_scope: if(testscore>=90){grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';}
-      |     |  |  L  If_statement: if(testscore>=90){grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';}
-      |     |  |     |- if
-      |     |  |     |- (
-      |     |  |     |- Expressions: testscore>=90
-      |     |  |     |  L  Expression: testscore>=90
-      |     |  |     |     |- Expression: testscore
-      |     |  |     |     |  L  testscore
-      |     |  |     |     |- Expression_operator: >=
-      |     |  |     |     |  L  Numerical_comparison_operator: >=
-      |     |  |     |     |     L  >=
-      |     |  |     |     L  Expression: 90
-      |     |  |     |        L  90
-      |     |  |     |- )
-      |     |  |     |- {
-      |     |  |     |- Function_scope: grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F';
-      |     |  |     |  |- Assignment: grade='A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F'
-      |     |  |     |  |  |- Identifier: grade
-      |     |  |     |  |  |  L  grade
-      |     |  |     |  |  |- =
-      |     |  |     |  |  L  Expressions: 'A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F'
-      |     |  |     |  |     L  Expression: 'A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F'
-      |     |  |     |  |        L  'A';
-        } else if (testscore >= 80) {
-            grade = 'B';
-        } else if (testscore >= 70) {
-            grade = 'C';
-        } else if (testscore >= 60) {
-            grade = 'D';
-        } else {
-            grade = 'F'
-      |     |  |     |  L  ;
-      |     |  |     L  }
+      |     |  |- Block_scope: if(testscore>=90){grade='A';}elseif(testscore>=80){grade='B';}elseif(testscore>=70){grade='C';}elseif(testscore>=60){grade='D';}else{grade='F';}
+      |     |  |  L  If_block: if(testscore>=90){grade='A';}elseif(testscore>=80){grade='B';}elseif(testscore>=70){grade='C';}elseif(testscore>=60){grade='D';}else{grade='F';}
+      |     |  |     |- If_statement: if(testscore>=90){grade='A';}
+      |     |  |     |  |- if
+      |     |  |     |  |- (
+      |     |  |     |  |- Expressions: testscore>=90
+      |     |  |     |  |  L  Expression: testscore>=90
+      |     |  |     |  |     |- Expression: testscore
+      |     |  |     |  |     |  L  testscore
+      |     |  |     |  |     |- Expression_operator: >=
+      |     |  |     |  |     |  L  Numerical_comparison_operator: >=
+      |     |  |     |  |     |     L  >=
+      |     |  |     |  |     L  Expression: 90
+      |     |  |     |  |        L  90
+      |     |  |     |  |- )
+      |     |  |     |  |- {
+      |     |  |     |  |- Function_scope: grade='A';
+      |     |  |     |  |  |- Assignment: grade='A'
+      |     |  |     |  |  |  |- Identifier: grade
+      |     |  |     |  |  |  |  L  grade
+      |     |  |     |  |  |  |- =
+      |     |  |     |  |  |  L  Expressions: 'A'
+      |     |  |     |  |  |     L  Expression: 'A'
+      |     |  |     |  |  |        L  'A'
+      |     |  |     |  |  L  ;
+      |     |  |     |  L  }
+      |     |  |     |- else
+      |     |  |     |- If_statement: if(testscore>=80){grade='B';}
+      |     |  |     |  |- if
+      |     |  |     |  |- (
+      |     |  |     |  |- Expressions: testscore>=80
+      |     |  |     |  |  L  Expression: testscore>=80
+      |     |  |     |  |     |- Expression: testscore
+      |     |  |     |  |     |  L  testscore
+      |     |  |     |  |     |- Expression_operator: >=
+      |     |  |     |  |     |  L  Numerical_comparison_operator: >=
+      |     |  |     |  |     |     L  >=
+      |     |  |     |  |     L  Expression: 80
+      |     |  |     |  |        L  80
+      |     |  |     |  |- )
+      |     |  |     |  |- {
+      |     |  |     |  |- Function_scope: grade='B';
+      |     |  |     |  |  |- Assignment: grade='B'
+      |     |  |     |  |  |  |- Identifier: grade
+      |     |  |     |  |  |  |  L  grade
+      |     |  |     |  |  |  |- =
+      |     |  |     |  |  |  L  Expressions: 'B'
+      |     |  |     |  |  |     L  Expression: 'B'
+      |     |  |     |  |  |        L  'B'
+      |     |  |     |  |  L  ;
+      |     |  |     |  L  }
+      |     |  |     |- else
+      |     |  |     |- If_statement: if(testscore>=70){grade='C';}
+      |     |  |     |  |- if
+      |     |  |     |  |- (
+      |     |  |     |  |- Expressions: testscore>=70
+      |     |  |     |  |  L  Expression: testscore>=70
+      |     |  |     |  |     |- Expression: testscore
+      |     |  |     |  |     |  L  testscore
+      |     |  |     |  |     |- Expression_operator: >=
+      |     |  |     |  |     |  L  Numerical_comparison_operator: >=
+      |     |  |     |  |     |     L  >=
+      |     |  |     |  |     L  Expression: 70
+      |     |  |     |  |        L  70
+      |     |  |     |  |- )
+      |     |  |     |  |- {
+      |     |  |     |  |- Function_scope: grade='C';
+      |     |  |     |  |  |- Assignment: grade='C'
+      |     |  |     |  |  |  |- Identifier: grade
+      |     |  |     |  |  |  |  L  grade
+      |     |  |     |  |  |  |- =
+      |     |  |     |  |  |  L  Expressions: 'C'
+      |     |  |     |  |  |     L  Expression: 'C'
+      |     |  |     |  |  |        L  'C'
+      |     |  |     |  |  L  ;
+      |     |  |     |  L  }
+      |     |  |     |- else
+      |     |  |     |- If_statement: if(testscore>=60){grade='D';}
+      |     |  |     |  |- if
+      |     |  |     |  |- (
+      |     |  |     |  |- Expressions: testscore>=60
+      |     |  |     |  |  L  Expression: testscore>=60
+      |     |  |     |  |     |- Expression: testscore
+      |     |  |     |  |     |  L  testscore
+      |     |  |     |  |     |- Expression_operator: >=
+      |     |  |     |  |     |  L  Numerical_comparison_operator: >=
+      |     |  |     |  |     |     L  >=
+      |     |  |     |  |     L  Expression: 60
+      |     |  |     |  |        L  60
+      |     |  |     |  |- )
+      |     |  |     |  |- {
+      |     |  |     |  |- Function_scope: grade='D';
+      |     |  |     |  |  |- Assignment: grade='D'
+      |     |  |     |  |  |  |- Identifier: grade
+      |     |  |     |  |  |  |  L  grade
+      |     |  |     |  |  |  |- =
+      |     |  |     |  |  |  L  Expressions: 'D'
+      |     |  |     |  |  |     L  Expression: 'D'
+      |     |  |     |  |  |        L  'D'
+      |     |  |     |  |  L  ;
+      |     |  |     |  L  }
+      |     |  |     L  Else_statement: else{grade='F';}
+      |     |  |        |- else
+      |     |  |        |- {
+      |     |  |        |- Function_scope: grade='F';
+      |     |  |        |  |- Assignment: grade='F'
+      |     |  |        |  |  |- Identifier: grade
+      |     |  |        |  |  |  L  grade
+      |     |  |        |  |  |- =
+      |     |  |        |  |  L  Expressions: 'F'
+      |     |  |        |  |     L  Expression: 'F'
+      |     |  |        |  |        L  'F'
+      |     |  |        |  L  ;
+      |     |  |        L  }
       |     |  |- Expressions: System.out.println(grade)
       |     |  |  L  Expression: System.out.println(grade)
       |     |  |     L  Function_call: System.out.println(grade)
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/SymbolTable.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/SymbolTable.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/SymbolTable.txt
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/SymbolTable.txt	(revision 990f2efa2d50929d4035bec7ff5ae45a452e002a)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/if_test/SymbolTable.txt	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -11,13 +11,18 @@
 |  L  main: void
 |     |- args: String[]
 |     L  LocalScope
-|        |- numbers: int[]
+|        |- grade: char
+|        |- isMoving: boolean
+|        |- testscore: int
+|        |- currentSpeed: int
+|        |- LocalScope
 |        |- LocalScope
-|        |  L  i: int
 |        |- LocalScope
-|        |  L  i: int
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
 |        L  LocalScope
-|           L  item: int
 |- int: int
 |- long: long
 L  System.out.println: void
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/ParseTree.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/ParseTree.txt
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/ParseTree.txt	(revision 990f2efa2d50929d4035bec7ff5ae45a452e002a)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/ParseTree.txt	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -696,7 +696,7 @@
       |     |  |     |  |- :
       |     |  |     |  |- Function_scope: if(((year%4==0)&&!(year%100==0))||(year%400==0)){numDays=29;}else{numDays=28;}break;
       |     |  |     |  |  |- Block_scope: if(((year%4==0)&&!(year%100==0))||(year%400==0)){numDays=29;}else{numDays=28;}
-      |     |  |     |  |  |  L  If_else_statement: if(((year%4==0)&&!(year%100==0))||(year%400==0)){numDays=29;}else{numDays=28;}
+      |     |  |     |  |  |  L  If_block: if(((year%4==0)&&!(year%100==0))||(year%400==0)){numDays=29;}else{numDays=28;}
       |     |  |     |  |  |     |- If_statement: if(((year%4==0)&&!(year%100==0))||(year%400==0)){numDays=29;}
       |     |  |     |  |  |     |  |- if
       |     |  |     |  |  |     |  |- (
Index: src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/SymbolTable.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/SymbolTable.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/SymbolTable.txt
--- a/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/SymbolTable.txt	(revision 990f2efa2d50929d4035bec7ff5ae45a452e002a)
+++ b/src/test/resources/java-test-files/cmjava2023/controlFlow/switch_test/SymbolTable.txt	(revision c00bad1886530d30183ecb70cc446aacf98bc114)
@@ -8,20 +8,61 @@
 |- String: String
 |- float: float
 |- Main: Main
-|  |- addNumbers: int
-|  |  |- a: int
-|  |  |- b: int
-|  |  L  LocalScope
-|  |     L  sum: int
-|  |- printMessage: void
-|  |  |- shouldPrint: boolean
-|  |  |- message: String
-|  |  L  LocalScope
-|  |     L  LocalScope
 |  L  main: void
 |     |- args: String[]
 |     L  LocalScope
-|        L  result: int
+|        |- month: int
+|        |- year: int
+|        |- monthNumber: int
+|        |- numDays: int
+|        |- month2Example: int
+|        |- monthString: String
+|        |- month3example: int
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |  |- LocalScope
+|        |  L  LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        |- LocalScope
+|        L  LocalScope
 |- int: int
 |- long: long
 L  System.out.println: void
diff --git a/src/test/resources/java-test-files/cmjava2023/notSupport/array/Main.java b/src/test/resources/java-test-files/cmjava2023/notSupported/array/Main.java
rename from src/test/resources/java-test-files/cmjava2023/notSupport/array/Main.java
rename to src/test/resources/java-test-files/cmjava2023/notSupported/array/Main.java
diff --git a/src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/ParseTree.txt b/src/test/resources/java-test-files/cmjava2023/controlFlow/for_test/ParseTree.txt
new file mode 100644
diff --git a/src/main/gen/MainAntlr.interp b/src/main/gen/MainAntlr.interp
new file mode 100644
index 0000000000000000000000000000000000000000..f035ca28ab00c1638bb73794a21119d3792d42e4
GIT binary patch
literal 18380
zc$~#r`)?yTa{k?b{|D!X++LEor1|Q{<#K?=*31a&ktVjh4;(In#+GM=l_f)#_kmpg
z_jG+#>}D6`-N^<)FdkOx<EvOK7K=q5cHghIXPfn5wO?+|w#$dr(;rVyw$Gc*>B$$5
z%iHglpH^SApSPRk(-VE%FE>v>4*O@&r^E8FzNN2^yWM8B+~V`+1807>+aKs-y#?9q
zwx7`4cgsCm+w7LexZ6E{+@Q*8`}_d<(_yu}L!VF2k1G`aVYj{``q&ocJ|Fk%AC}zL
z<9>Ho-5ypbv0ojY_h4na`VkD=qfuf0euwsc{BF&i-tExOkL$zjci?Zy<v#9L%kKf~
zwukkWM|`)sUp{Y$ZIRQz68c9<UQzPTl>DBOf1u<ql>C*F|D@!<DESj5f2QQ$kRbg#
zq<=>GC!~K*$v;u@2TJ~tl79ilAkg3aj?%yV4NV|H%4o-=u=*bg`26$>791s)ZE|{Y
zfa*N`{P1ztPKMH*52N!hM{mcAFUQ}0J-fO%JvqM|U0?S<-;6G=$EPRrtD82ROt0so
z>G^o^es(c=GZ|l<p1hvTF2|#3U*Yw)^Q5)wceAT`|8p`;eq7F`Z<BuCjjobzFK45q
z=*8^j^<~oRczW|b`Ss0wJiSPmzP|Y|P8$1aHo543eQ2ASoF~7pCSQ$Go<Cg8=Hv7E
zIH_|rp5I(e({YF(dgM*QPb;!yD6@o>uis75aa_z2roW!d&)+2i8Ktefz8a6dOfqNF
z`DA*NHZ^`Ty17hceKBs!@GM=A-%rkGt-z_KkoWIL#K4?%;A%Ww%sz~#@%#L8Mzj9<
zs@0D1T(aUX$vnTgy8KqM_**hACZqSW>4jv)Uy?cg_nTIuh@PHIDS10@(Mw8NrE2@X
zylHdaw__vH4rubBovqP)GDBNmO|J1ZnV!>-+vIXIg)X(DoYG+01oSoV*Mz^G%oo@1
zCU548%k&53d_(ypi&j=`E0gJX(fw-YYCgVh7f8$7_55lweal)pYIWmER1{21-j6P!
z+vB&CL3$lEc>K+W*|cqKaeedV&Ey+_+ol#DW|IWQT8KYRPxjB7Rku)E!@WP8o_yNu
zJ}x(lr`z4*>huJ5KK{6W-rgS8yKVgaakIPqKK@w!^tfL=J+;|Srzbxw_v>YAz!!I`
zwuSwYYMq|6O|3s|A6DB#T0H$;v`w|8cl!a@8r$2piEWng^n8E6{^|5&y=|Fq4RY+~
z_O>msSa0uEKal}?Snb!h?U-(N505QlPlJB??6z67w%L6;`uk}0kL$zn4B0G)5@2x-
zAll!C$ohUko9Ide)oxMg?>1LMyiXlNcxrg_OY^ahr9j-z20h)iWPQJ0wWB%wObxZW
z_UcpX7%ccFcI)-_)8cX0<_IYAlwa+B{IEW(e^|-yR-~)_YI_@hvq1Qp(#3NB>6yBJ
zQok3Q_0vINrzbzIH+Q$o{hee)wQE&izhC|=?ecf3aM<S;o89j5^yF^0NPo7TK=QTT
zt`GdxIz$hofv8Ww^W$ABsdfa*Cz3&@bq~8cky*D~2D5t%r4c>7oR#FXdbmk`s(L6(
z|CWbsyQ2T%U!9p(XI1^`EEM6@nSFIuv_Fwr&O&POSH%y9Z-;M>Z;$VQZ*Hf=cNr^I
zv3iY<8s81R8}5rcHqx_n&3zkg!*K70yEojwVFnCyV3-BNJQ!xeFc*e-FwBQxMhtUe
zm=(jkSmwntFP3?+A_ox!^J1A7%e+|T#WF9Jd9lokWnL`vVnrSzQs%`nFP3?+%!^}Q
z9P{Fs7stFf=EcdZ$h0soj(Ks+i(_6K^WvBn$GkY^#W63Ad2!5(V_qEd;+YrEym;ot
zGcTTb@yv^7UcBgtC<*i8nHSHzc;>}3FP?ev%!_AUJoDn27tg!|<|QyMfq4ncOJH6C
z^Aebsz`O+JC5Xm~$}%s3c?rx*U|s_A5||ev2J6EkHKZgpe;PrA7?eEv=lFvrypEWC
zITcN(*{icmQFWT4x?4%MUoGBtODuN$nJNF7z^hhe2FWbD%z}xPj0W9udH-vv<L{D9
z1H)mMa-XJRZeGYNlgu)vj=yW3sdAXv*|;j&HB*<-OqpY8{r{aho@vAM7mL&{7s*pm
zFI#q%SYpOX22UxMZ-%L3B_nfFN0_Q7#0-f2W#UDFedt&)u|!mEUv|Ys@oeZhrX2SI
z@l32}FLGiD8}oR!jUSLOAmxBm15yu2bA;I9e@e_}kszCu=&_YKup%qY<GDQEhW(Ai
z{W|f-NcfGU{45ffI4g^y6mgUy4&;?Aj?ZYZI!5XNX;R_}O#&0=#jqC4kdw`W^8zm`
zsbyXuPDqetFFAHV+<^FwI3a--b<7DJaY9O#T+AsoaY9Nq8!@Nqh!Y~lJLc5CKpIT~
z6IaVn8<AQgQbV3+sc|h|bi@g%nZuZ4ULa0L!{#jJ*a2~xI3~Ve4)X#&76^TTSi;6U
z7M}Mnkif)?^+!%2)W$s4=HqRI-$=^;9jX2gNIf7;N<uLp=GTcG5Z4jM#FwlKNzPFc
zi&w>G6;FuQBrx&fxCEK%AXCkGyz$0b;TS13aZG%}ikcTN?Dh^xVB#BILqSe!K~82U
zLaN{NwQ5bo6(FnJ#8ak+A13aGks}@U)S7obD@QAwoy1@|IpV<X$cpw+|4UX1n*1Pw
zqEQh8Ws8+`Jf&V+j7%0y6<MZ=js_(khaq#aRy6Cx9(gq_){r+%R)&@sc!u?c+l~3b
z?m`(D4f`#WK?4#)&j$o2XRgrCR3Us;u?$8NSm8xa<Ct9hg%S06HH%jAERWK}bG_*b
zMn6Y>iKv6A<Sf&*QFPG&+3Y%uh9#D?!>F^M%8@jBE{aYLrmPi+Q@ZLI(yN04NfnIh
z2ZL}<F;4%Tst%2EsybB6>2Xs>z32s`j)E$Q6MCsi;%HtfmT)F76-zjbmx?8v!b{Z=
zj^CA4Ac6|IBz4s2lC)w9HEkZtO0g6$Dm6y|aR;wJT8U1L9hS!FlGKq?%0MdYoa(4V
z*g~rp{1r7K(k&NMM<pB<)n)}jtLhaZB1-ZVY>Sd783$LX*{tBuXqCt0X%KFTs!j&R
zHA?bialD?R8fH$7h-{MAi?u;KM)lsn`%sc6Gv>W+lRDCphoSRY^sszh%O0lC>jeVa
z==BPLvGkQT5AbPf-7Y*FEmqi9-(+RUk`|g@oX5x}xEK;CqO~)bHA15K1)wF)sMWm*
zFvQ^P)tygjBaUrdyl!Hp5u9{G&N0sS&6Lv2u<<JPkfT~awhQVc7>&#EdEU!ek#L+t
zBAzgfH7_{km-Z!O#DJCfwzB)dI!D;YP_u!Ra9VndY8GM3wH`CzDlH}0cx}@S#A}bD
zPOCkmdJ-Ac5=BQ|55spAGSusK3D8>|8r1u&@iF?QW(sb;;B^<JgcBbmP*R`|z-0pW
z(*gfF!u{mIP6&+nX)N9(c+Cf2!eK%pF1{Ne6FEu;#HgNEM)itkREv~RJ*_}9YX(CW
zv~B?q*E`Xo5M??n9O5+OsMZXi+Ku2QGcyVIDP-aSnhm**QON{rV(}C$k?>g@eu0Fk
zVUHtTvlj&1_Bb{fQ5iTh5x4A40QU***<}SDdK|&}*iIRl8gN-gmU2|DD@L{a8P)P<
zG;<=W7^+M#5^*IKs_bI>a0Mz^5**<qxGH)W+l91JnOG-n8)&7+3|CHj6%15f^FfHo
zcFQWn)^ju~OF&i>aqj}X!AX)?BIl;VEqkfJn^<YkN)xN3XpKbo2%zTs3+H-xa4d-+
zgkEZU1ouE-xR9}Uh;;^ygji*O;+&ZsBp?nBiHm|4f|$C|R<y=~Q%y8TOg!8ELCiBD
z2+Je(BX>^7u#z#92f2$8u9DV$0-GKV32b|~OyH#LDuH`z*VG9ddbmj#jHo5AFrvOk
zlTju!V+)&%o_+))8CXAJc<a6$8fKvvBM@7ZT}&{Rj>AkR!WLEEXDtyk;B}8%38?^Y
z61-$>#2}Gyga=+i5ZolVWj=vhsWjk*QKM1JvezgkIVg1lk`L3Asc8GcRn)~n;Yu{_
z2&&J|jAp!5qHagf@+hiL+l*$zs6^E=)avt)pqVTyQM4oIv9Uoxj-balgL34kIog}a
z<bX@GtT)oPxOeob&w($acNRd_+H^@Yf>^72#JdD5aYNg~UJ5(*1LWq~;;BLw`2niW
z6sT^s4~@}Tn?+lIYJmdK(!i^SOh$;UBv%#^rLuSjAvl_owT-Y#EH9Bn;7%GFw(g{<
zBdDHP^sYyZXBG0OB0;etbx{(9Q(hZ@Ou~3{;rZsn_LGO>m*=q|Mk14kcNm^GRNuFP
zvjKUj10xRvm#cxVHzMq%r2!{+s-azT09Jdtf@YyL8n$-AE&NSHnbc4k8RxKcBUJ`y
z^eKlR$sz=`nOZyu2~LX$FGIxZPeg<xPAIjA@K!{}K~T<WryGFPuDqbxKu8!_1Gtnd
z;^Qen3CNZndCiujSf%@O6zi}kwl*JMZbj6;I?JM`C2mj4_^>OY<*TzSrb^zlE$jI1
zE28~<Us9BYMea=61^`=`%xeIohg%`w>14n29GENwvlY)~FR}{f)l4G@v6akmQkrJ7
zl0#8!27s-^*GbywZwM3iXoR(lu$OU-#Ar4MvEmFTY!G7WDk}|ZC(cqYX+m)4uSy50
zGT^Vqd0Y#X`m#FKE~wVm8Yg|dNb5!_4A2IN(UK!XAD|Jhwhb>*o0O$NH<^bBN4Uv+
zBsjuN<{`onZYnKjIKqv%t8w)JuuYRO-E?=N9n*-XyMhO3eGil77J6QRxWWzlV?cc1
zzCR$^o+4E5ic+8E87f3^%T9oRbYujfeOJf^Q}-|(a7329q=7hNl%yFkR!JI&Gfs~j
zezM`sE6C%EB0?tUu>(;{%aPaP3{Rp>dZbZj4lpBn#|Gf6jIpz8K%6*T{loy!+p~iY
zrhPmVbJ`EXeTmc2VL`PjAq1>90>`gZyhdrvR?cL-lo8prO*T3jG%iom(cwjk9vmK(
zIG$B&dYH!SqS5VSOo-m)aP#AwSlk2--Suz+;;KjtUD92ZUS>v+1}6?pZ{{3=&|YS=
z^TU8Rufq%uuRHXff^sff+j!cc4ZNUwLI}w20DX}1Llk=`n+%gMTnRjk#5mm036AR_
znLb+8UHLvjgPSv_eKtY0_(SaA2&!d7U1b-V2=dB1+kPknWY?UyDwJopy>THRyZl5H
zJ8-xK&WRYgP$hWT%`0yEoDS0pnzh|l*YP<Ar=t|R3^fzn2p$s82KR_gM=%A|DnONW
ze9mD^C0i^+`YORgkJF|u_S0dk5l>VA(N!Jt6jY0!Q7t2QZF*8kJg(Bdii1*0$g`5y
z7lo8`I=CsQwtRSPp;?17Cytx%_fVD$@9?;5Z3M?c7uT&fa(KX@XB)0u%{-F}<|7X0
zv{9ZE5WF)}#p_sS&^QX}z#{inYjH5DB~5_7yGM&CKSZ%9*V%GM7*ueoBnKAUK|Afy
z397XKkK?qGBHT&-8@17kxk2JHJ{tJyY;R33(Z;?|+({RMK7lrx6FkP#qJ!%f9lc&j
z3CTuHZXO=zDbtGk?uaMr5T2gk$vVWvywmY4LF=Pv_JV^P-@<E@=B?1jQy_RUI5>x*
zy4P_ol#6c&6SO?qAJA+ZWSBD$B5IU72gHjz*ZTt=m-oh~Wd+0=?LBy0>gzx$%6aWx
zp)aq)ZGr}kLSA|#)TGy;RuuCwjO}`uR)n5B@*TbSj<z42MPiiO48+HHT|a1xCmK$<
z%|N{MTFw^Q$2PF@+yHoa8IUlIx6Eqs;5CRBPtjIAO!I29c_qYaPZ5B3`V<GmM_;j*
z2O-`$Ee}Gx%T&hUbxP3kAVf!`@rcEXw`fBT(-2*qbx1>$CklA(QVWh3vW2?q1>)rm
zFbqQ@IE^wol1XtIrH?vY@EvC%n3o5;$$;>pFUH+^f#Z>%FO|UYkkMCK;DqSVJ09_P
zFLzVjRX&i+R0SmZC<i1nRRIrtvPFv%gO0u9A&`%8w|)u&wrCk$ALj$)<!NamBfK&V
z`XmR$=ny_$8F`72^-aJn)9=~v_Q;oc%*dCx$mYrF6{>WSHEhI5*&#|J*WMNYU*-cZ
z@e)c0c7XV@(c&xdLaGq9YkquDNKvmJQ8KC>F#uk>pa6WOPwzl{rBClbyxd9mT3R7M
zq0jC>Ot!mJSb?H?m|U4%a?!j5*OEO0!8N&n9+q#U(x7>GYuZUbe?EI02~;~+4Cref
zH0iZ(g!gH_4%ze)<g-W|5Toz@@SM%p*<C3hFOFBD4745L;Wh-~`7m8bQJ-yAK(pNd
zfw$~oD4ugP*`5UZtMBCT-p)5-Z}8Sm>?&C%A3d^uB4K))`bhaoDh-<_O~~vEJhIH3
zAx5Wf2N}>#0h;vM$l;k_D729SVloec+U4hdl*5nIaQ8$R{Mrb<GUei=#m_!)%%_eK
zkmY;ecw5FdWVmtS`;#VK6TnkPpa`1`&g3wSe9oj?9I^OdQHk>mx0C%l_(p8AnyB=w
I6wP1%8|a>r$p8QV

diff --git a/src/main/gen/MainAntlr.tokens b/src/main/gen/MainAntlr.tokens
new file mode 100644
index 0000000000000000000000000000000000000000..d4af8e900a356ecc5c3cc93e7b7fcd5fd5bc0a7c
GIT binary patch
literal 1799
zc$`g?ZFAa25Xav$!-w#T=HE6=YY+&h&1L2g2i#alsvi6>otBZYh?x-N0TH*;^t*R=
z4IHnuw_5G~Z?(Toba1UFW`1q%Z{u{NI_*{v>MT1sy6x6jhnZ1cyOpPfQN4D{Mp>?-
zz|3dy$d0W^RlnUD#&KwLbo$UI*M06X58AD48mIZmam9(;@qN1$#?iznxg;r5ojM0;
z8;7xWpL9svC@zNKnSPRKqGIM8q}SZ#CK|arbx3YjB<3tPslAEq$T>)ELYZygTqHP2
z?TtRWROdbW;@kweaUXX{dTR0_b=~N8&f0czl72gON7hcQb`H`$j-ARb>As!Xv+H(!
z?tnXTlW%PvOr48V2l_lINgk#~U!Oc4cRG%88x=0hBf%px)<x+0?XljGp-B1Z9_h`@
z%my+2IOX*?i&%ZOW;3lkk(VovyQxzX&Ev#Sz}4{>gfWknNTNwJ`D;M$(m7s3dOVm#
z8r~lQy2s<;HAxv+J&U8!A)x0RhY(U_elKX2RnKQr^+;93Pm(jqDS}6ko_(rLldbwx
zGYN}K^{Lv7x<eM#nNdq@LX)9$OSkPyr5l^cq0hfLP<_6*p(m9Hbws(Yc)SS|su58~
z{7ZR?No9r{<9C^&RQXh7X!ChCwc~sqD!+GrruR(S9S8cajix`Me6D08Ge0@5WLR>O
zB|0$5r@~pD+GwH%2eLE`ZK?)Gtkj?@qU}tFYTyZ-X2KD@S2We2e<aY{C2>Sm=2<Zw
z+dDPz4{s>{Jc;euo56wW<C$dPxm<iMKULs$gT=bs?ZAr$%W}OVFV#k~-IGO?v1`g^
zwE*uJJk<5NDmUQmf`@+^3K?+7Q@w4#8wINk8FW{y>&+*~7Qy1F+(PyTmg~Bt0NxyU
ztoILV7QywZ&Hf8yTcG;8sWy)!iT4C{`{#<k=89kI)gxp#;F-Q<RUNs{cJ;MnF}x4x
zR5#V4sVI~;0k&1M-;!qD0oYV85b&{DLXbx#muA?ptf>@Zj+dtuYh%DkC<JZnURKTG
z2?8}1rF_N}AGTHb83HmE^`=>ExOt2)9;;=!U(=NtUi=2(6u&|!#ZM4M@iT-`d=G&W
zKR}?w9}pJtCxk%!3qcS6L6E}-2x<5T;R^}^7Ze+u@PZA__>m1x`GE{34BtTr!&?Yo
zcn84?KSG$oFA$vYmIFBHJC5L_Z{9$F!nbb_qHqBr3Kwi}Qi@=lKmm*s{({f~9vFU7
L?|Cv2LMHNm+4ip~

diff --git a/src/main/gen/MainAntlrLexer.interp b/src/main/gen/MainAntlrLexer.interp
new file mode 100644
index 0000000000000000000000000000000000000000..c17998ebf667b46ba91705ba9b205220ea02ad00
GIT binary patch
literal 20206
zc%1EAZEqaOasEz#|3Ud+U*gco^y|zxj)4`qk`_nqD&+EBU^oI#+Vcs=BL#}`#jyR~
zJ@r)ePEXZHqRt7B4+k8(W}lg<dAhr*ySlq{_qX5gZXR8~zTe$lT|c_H`eFC>H-`r|
z@2;;84?cTy_450xKkhyoE?-_>y?sj;-(Fq61#*A)4)X2&)&1+2boI^c?e*^J2A6-n
z=bPW%-rdv1>l=vc+nYZ^-FH`a&~|-$g&VJK-+gn9S9Uk=et`U+``yheeDm$QH#<E3
zr`y-BNWK{!=5M~ad;O;?{??nj+xy+i`yHOR+ugsr1C^WIk09_ZlnVK8Z=vtU?_Tpq
zU)|z6Kfb<y`5pLO@pIqY?XJEDaC>wA`i5)#YWMBcyKAB??ergn{)UPpD*la%f2QJJ
zsQ5h<f1u(oRQ!#K-%{~AD*h7%%6~%nJCwgg`3oxkm5N_e@hd9+9T<Z^fB8!)|N2*`
zK!K9cJxQVZ-wJqm`58AH6{kaScyJHXdHd%dzPTMbL)p&r#qsBhr^^?gFTehBbAEDo
zaD2MBxEOyvS)5)h4-dBImqWQ)Uu+la<K>I9&B^M?YI%Nm@OZO1T`tz+3y;6vR@yF}
zZO*sj&(*s6ak^PQt-kwgabA7)bhD@)J=t77KCRR)*OzD2udlYt^+`qg;_~^jQuf7W
zbu#{XKB!t9SHI6!Uo2|Q&(Am8<?(h|y>q_YUY@V(dPqZz$diiC&}3CrHWigGpRMY8
zoNOx6U#_;t&#DGl)LI^&FBhLzH#h6;YJFL&T0U7^p4M%BvK*e_Ub<MGt&TTCgVUQL
z&dwG@U`sY|zFfc9JYTNM_3`P3dj0YFU>(b?+$z81=JDnE>DO|LujR(cYH_w%pUAE9
zOKvXz>vFItl7|OtDxPi!^puLhsD|&KUJiH9hPsg$Dzth&^wwg#+CbMAs|#GM*2h%k
zp*UTvVM{|T*HoFIfP4)6G2xF_+ZPwlR!_DsPU|0Z=PSBTZ85afpk=jQzS#d7`f9tp
z7#w8acCkHQt)H@$E(Y5;7ZU}E)!E_{w!M5xH^{Dw1uwsPzF802UR+#0d9wOS;6c@k
z=bKdp!xzer!-Knb*So!={_LVZyXem@`v1#C*Nd|ye~PO7bhRa~9fGBso81_lmHyst
zKBo?Qwpg#11B+*?lM`z8!-F4gU+v7(LmMyY=GFbpfc`!nJ!*~~wcXL9l!hW7J^Hmf
zdgK{JIb1tjGwyNC7XjA+*Adqd*9q4N*BRHjyx5l4J6v?Q?s47oxA?<OzAT^SZ#&lE
z`0I{8@A&(U2{>lpn1W*tj!8IX;h2MC9*&7PX5yHNV=kV#c;@1ni<fqghF~t9xp?N{
znTuyGp1FAD;+czQE?(M0nv}VC=Hi))XD)%c1m+T$OJFX6xdiDI=@#Y^m`h+Tfw=_c
z5|~S1E`hlO<`S4oU@n2V1m+T%OJpvQxkTm?nM-6Yk-0>%5it_x5}8Y6E|IxJ<`S7p
zWG<1pMCKBiOJpvIxg_S2m`h?ViMb@^l9)?kE{VA$u~;!#=8~98VlIifB<7NsOJXjG
zxg_S2nM-CanYm=<l9@|pE}6Mx=8~C9W-ghzWbq$yAm);pOJ**axn$;&nM-CaEpus^
zOUqnZ=F*BUiaRrxmbtXdrDZNHb7`4N%UoLVW^rfc(lVEpxwOosWiB0aA>lBld{X(4
z|NH~W@WC=ZxJ;i|<`0(b1Iq3_W&gp_H6Iu5!NPy42p<>mCyMl7kv}flPZixy6#f5(
z@Xe<R_W|MOMEJOf9}wxmBF~BTQ$_c2(LYp#<{uO8Ckj6iVIty0q>0EA(N07+5q&LU
zGZAhg{6vI_h!c?}BF~9-PIPmkpAo5<2saUaBEm$(iAZxI&xv+UbaSGwMQ-MVn+QJ<
z0h0*?*-ppTPHs70?#auMA16Uw-|@ARTh5nzGO?tI$nOz}MU0}6?ldBOxz}Mfd9MyD
z+V_aWB2trea;Fg~flbW37MR!3eL(c@5s5{lXr_}pjYwba@zP^fN87wdBo?vbw!@u9
zq%Zfl?dEm3|5FiIq$V@H2R`ondmi6E@F9JEFOmo^`pUAdEa7l3aqEn4g>t7G-+G^5
z{~?hA_iZcw(~AG_J$8XM&WSV;c_P}0=(I>868kRh$THgbaxZWN<*mLJ5($flG+L4-
zZb(;_)TyknBQz!P_@n*GmyOS{0Xs2n%<WF*YFU0_ja*j8J->;uCCfY`YeEWDf~<eB
z)@x*4=VT2h%Qn&-Wrd4%SdukYmi1LxOLekt>UpfBv5p4BAOl^H<qmPkvPvb_!!p&$
z0yW6eG|8e=)}hptQCf{Sc7bOta!KOa$x5^9nRD-WTIz*+pLp`=Wi8qFGSf6pCYdJ4
z{L&<uS{hj~x~7+zgjyQ22Q@Kf3~F1<5>6I|j#?9w0yQJ%18P4^1=Mgn;<sfi?`7l;
zWl$}R<ET|I;ssgexlqQJSo|=G7dfo1NpqCdoWr`AG^b+dSP{dJ#GoD3fb<b>lEiku
z7UPAU40ZSm{1<@s3iSJkrs1BI7^dO&mg%+OUcetenfZ?zp>MdK@Q0bg*Dob3%VV`r
zY^wi)L6SjQgY*V*R<*ObomK9vc4yUltKM7n-m3Rjy|?PaOv709!Kx2deX#1IRUfVT
zXw^rnK3et3s!uchYSkyJK3VnIs?Sz^w(7H0pRM}Vs&B3OcE&8N`qrxNtoqKX@2vXH
zs_(4&-m34d`rfMVXS{00t(qCXYGxd(nenV<#<iL`*PZ#sob%3k@0|P2_^+FBU^nBz
zZpMY(j1RjRCw4Pl>}K59&G@mKab!2+$!^A#-Hb208E1Ag-t1=F+0FQ~n{jBTJsPo!
zdJb`m(nqgp=b@k4FNj*#sc(=jZO(|Cv{m9*q0z6?^ys1jDL8WKNt_^P3&GKW*H0qW
zQaW*1pgRkv1hVQLTZlfC)ay7GkTvQE(uedohm(NTE08|asn-!B_8O!Q>9K%}Cuq+n
z>j{nG84)ik8zTD&+JVV{g7!?Zpx_mGniYcfF9fE#krAavRU?F~+N=@3>gfi-te$WX
z+3G2W!(3G(#JsvY5CH3m2hp&edT6c)+BIml2zvVI5L~Md(Towa7tx#%^dv;HM$pp`
z%^Sfu9DPVnMLj}#W%E7ad#w`-675`MM?qT{=8&K#9Lyq78y@D7XxzKO(n5~}G(JQ<
z@nANIuF)ucP1`AEl<2ZX>1*12F{?y9wP0R}Ubh1c6VYqEG)_cq?3i7mwsy=fG3XJE
zhKi`20CP;#qY7r3s7)60Ow{IynI`Hn1anQ&6ES9+q^C*DH%U)`m~oPx?l9*hQwth2
zQuG?7uSH!qtTXiBiZxO)?LhvWl71ErPU}0Y8U2XU>(pwpz$q|2CVO;!Kf<I|Hq&6b
z1*a<K&S;_jlx;A0MZu{*WETrQB)FUvPA4_8K-tr&m|#}G77MB9MjVrJ)J(AcY?D+!
zjX37(Z1G$U+bSkhN!fgH&Dexkx3<0cB&PVrFofCBkflC}QLOW(Q3%q#iNUQay_rXx
zICrI*am2B;QmQ#}B*=BG{bpNE_^NLb(Djx#wtgDJ1+#JQbhBV!?Y(`RI<zkxI;uy+
z-$&j57>cz^A$ID;YR48Q#Pw23H`WpZci&l@YTEav=Xz{N8M6iC8(mW%z9}_rMqG9w
zC(%=bFfS_VKzt(|>Z?y80L;1-0r|#sC?FjgB7pRb=}|!5m3r>2$n)l&)9nSwJFl${
zkaxk5#I&SL8iA{KN%ub>@3Lt{<kGm-Do3=fl~YZf=}|!5H>O5Nxbe<>lmqADqhZAT
zQ916c9!5Z|Ef<LQ$+Rv)ZJ)IjAy3D*rg0I3Yb!$HjxY7}BTn@UW-J2agY8ko?ZIm<
z$nOcZLlMzy>q5d$DD|vxEGe@6CRH?)idG+`iiS>m2J(V}?NTfcqIFW_3TdOmvLTu=
z7m$y^^gmV<F&d6YD2k=7V_##dS{oxWjH2~X-p`id$XCx(O=E9bo%g+MO_7O|tnp%h
zJbBY0$WBV7vZLo=Rilj>=}O5=q=0-fGYlY~O0SL<iB0*`S@Klb)Ejfh8cCZw@|<$1
z>1YGUc*@?G7;>MonPUL?5*$@6lP7z|1*DqhY-)rAsch{RsZ!b4FLI``wO?dU?PH^n
zBVwc0>CvPdQcNf!uc`z`6-8uNwb3*#a;-{qRDYAIx{r=Vj>x}iTRl7=5vv49m7yXf
ztL;r+W0k1AqeI~gcY=IpCmDi#7ffFh<ZXxq$d?eQBGbWDb;JwAcXpZ~$amI$3GyXM
zs!XZt_vsEJ*rRZ!P6YYh4od|2-j2ULHahIE)Z?_xgoA*5Z|78k^oj%<D1IL$RXEkO
zx4nv$a*2}Mz9j+ag$*`hLWz+^%L5de;;DYb!#=g6QbKOpm@WkrN{}?V7@$ysBv*YD
zyFjK-0mV*#l&ZN8l17FOg_%+T1sfzWqznTaOu<Fdh6IIukW?w5nwB7`YDOHdmLREW
z0UWnFTT?)KzYS-xB}f`g8c^`Irhs%udmP4@Nd{2xwx$GyeUwx^Pc`)>@C6hkOzJB&
z*l+7hg8|ZZ<gpLeXdMBC4)1}4;7yHi>{x=Ns%-&jE5fOy1WDuM03_^Vq>(m`CW8qb
z0EH4GRTSwoeIFxLcsUQQsYDcdf&mhunM(l$8zKP;(Tux*LbM%<{n%*6B0wRU=@d|i
z)^rKV+H|pnyAP2@JfUz#33hk)A=2p71O*9^s`f>Ml+3sbD3l<nayx7ZCu_U}W$iK8
zDkg)W)e=&`JGoJEr6x~fYnN-9#@-_&Yoo)~vV=!zWS9LuJE(dV8^K(~I2s}n#&v6B
zBU&P(IMxmc<hpj)pO&a7R&cjZfvG_3CUf25*jY$0*L6cYRJMz%XMLUhT|n$T%K|No
zFy(CMx?%6TghIZ0m=cn7<*+AS0wF)zIzgST9Y;Z2yF9{#=$&cobO#B7@@Srf=)(_e
zfCmYH^4JoD^tyJ~aF^hxewKVtf}a|u<P}|K;u<9I31j<UgI;!rDiz49&@F*|``*-!
zkRVY{ts?M{IaNWPClOE8nAqp<P5r>2(GAD@|J-|FbZUI7F^5rz>%=zq)du3sff9{0
zQKFrgMi?nRSwBpnj_e3UKf+PQl<C88BXPZUgtH8)(}!{9&>7AY=E!zX4fhg=PjomG
zPFDp-6wcHTuj~D%$R`(E!_bW|<#b7qQ^RG@oa&&EwL~~RjyO&_I*WI*l$mOwUX&1L
zG+rQ1@9RW981d#|N==gpr-qSSrJE0VYu?n+7q-)f5tiFJ;!r~GX+#QbqC_#df_u3)
zc{reO8g(-VH;n2vI0IHMb*;oTqbuXsC+brZJQwvM7JxY?5>%h*0?>OEI8KTZ{`6zB
zA@#u2BcgEHgK$zL;ZNm-bQ$$RBt{%pC7kY8Xp~#iXECAbc8kb)*41NFHw8Tw^<gkn
z&M-p`Vxy~(P?$;+67@O&K%|f-bNo?Yq}yq76aqyFfojbd7tA<CNYoK&q@bsyYgcF|
zx2DhHoKI8E<pqoCV{iabpMyiCWro~%ih(kpv=^9K!5DHzIFzTkegL9AOply}-m&6w
zT;QZjQxB@MY}<s<zLEPa3Fl*1Q(zP&FsfRfkSH-wts{t{$p;zL4M%TBeOeD*QJ?k;
zs#^%BZ90^L%BWKV@K}`1q?$1Kf!<)j5pR^ZCiEjrZ6TTSV+&Cf6=f%>Y9XZccBYjn
zj*2?-Ku~Rl$OzWK9C$??I|`~>6S>4XMGh*X4k+<hl#r{cGy+7uyAzR=+;j3fXX*yI
zL9NkqZY^hn2u{s`FiXEcMr7t^Bso)@rPWY15ou{P?W`KADR!3h<4Brrw0=NFP2$Yz
zY}6zKWlfm5LH5u@tDkDCW444%C><jTYMv#t)Y%*WQq#>4p;!i+NJo-Do#Y0!fRi2s
zT~?T|Ikmr$cxR^(Ey*S}IeBLW)ipwdXR@Gh)aR^e0JEKe6cwFkBWRjMyBRd;lo~;e
z25N4dQ3)Wqvd9j+_-q7oddf{WLX>}MzYp;e0!J?mP18tMZaBF+QG(D>=VC%@(&;vW
zY8u!t(=iuRCY{xnuvaGku0M`wE47(E+sX@56q|zPS){sH$3x^9oHYVOnL02@*gy->
zwjH+1bd-iClg=>(V3KhJH6J8E$6d(TNnytAu&EYg;K9FAXypbqh~BtGmQRu>vf5Yz
z<a9)Z?4MNj(8ld1Ku&L=A}c7#4qBT>m|oU<nMf8&sSFoAr{v)V)igD>!Lg@SZcN_j
z<+bStdU<DpBE;1Bw22d-OnxMxrcD6okPRx6&fP`sQ!4-Ggb}3%(IFc$qLTcd6voCw
q9I3-b*~yayPc8vC!bT2((tfJXWqjv>vbZ3-5-bo6CDi4^fA~A*OJCRk

diff --git a/src/main/gen/MainAntlrLexer.tokens b/src/main/gen/MainAntlrLexer.tokens
new file mode 100644
index 0000000000000000000000000000000000000000..d4af8e900a356ecc5c3cc93e7b7fcd5fd5bc0a7c
GIT binary patch
literal 1799
zc$`g?ZFAa25Xav$!-w#T=HE6=YY+&h&1L2g2i#alsvi6>otBZYh?x-N0TH*;^t*R=
z4IHnuw_5G~Z?(Toba1UFW`1q%Z{u{NI_*{v>MT1sy6x6jhnZ1cyOpPfQN4D{Mp>?-
zz|3dy$d0W^RlnUD#&KwLbo$UI*M06X58AD48mIZmam9(;@qN1$#?iznxg;r5ojM0;
z8;7xWpL9svC@zNKnSPRKqGIM8q}SZ#CK|arbx3YjB<3tPslAEq$T>)ELYZygTqHP2
z?TtRWROdbW;@kweaUXX{dTR0_b=~N8&f0czl72gON7hcQb`H`$j-ARb>As!Xv+H(!
z?tnXTlW%PvOr48V2l_lINgk#~U!Oc4cRG%88x=0hBf%px)<x+0?XljGp-B1Z9_h`@
z%my+2IOX*?i&%ZOW;3lkk(VovyQxzX&Ev#Sz}4{>gfWknNTNwJ`D;M$(m7s3dOVm#
z8r~lQy2s<;HAxv+J&U8!A)x0RhY(U_elKX2RnKQr^+;93Pm(jqDS}6ko_(rLldbwx
zGYN}K^{Lv7x<eM#nNdq@LX)9$OSkPyr5l^cq0hfLP<_6*p(m9Hbws(Yc)SS|su58~
z{7ZR?No9r{<9C^&RQXh7X!ChCwc~sqD!+GrruR(S9S8cajix`Me6D08Ge0@5WLR>O
zB|0$5r@~pD+GwH%2eLE`ZK?)Gtkj?@qU}tFYTyZ-X2KD@S2We2e<aY{C2>Sm=2<Zw
z+dDPz4{s>{Jc;euo56wW<C$dPxm<iMKULs$gT=bs?ZAr$%W}OVFV#k~-IGO?v1`g^
zwE*uJJk<5NDmUQmf`@+^3K?+7Q@w4#8wINk8FW{y>&+*~7Qy1F+(PyTmg~Bt0NxyU
ztoILV7QywZ&Hf8yTcG;8sWy)!iT4C{`{#<k=89kI)gxp#;F-Q<RUNs{cJ;MnF}x4x
zR5#V4sVI~;0k&1M-;!qD0oYV85b&{DLXbx#muA?ptf>@Zj+dtuYh%DkC<JZnURKTG
z2?8}1rF_N}AGTHb83HmE^`=>ExOt2)9;;=!U(=NtUi=2(6u&|!#ZM4M@iT-`d=G&W
zKR}?w9}pJtCxk%!3qcS6L6E}-2x<5T;R^}^7Ze+u@PZA__>m1x`GE{34BtTr!&?Yo
zcn84?KSG$oFA$vYmIFBHJC5L_Z{9$F!nbb_qHqBr3Kwi}Qi@=lKmm*s{({f~9vFU7
L?|Cv2LMHNm+4ip~

