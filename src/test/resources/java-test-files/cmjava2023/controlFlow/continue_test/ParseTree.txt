Start: packagecmjava2023.controlFlow.continue_test;publicclassMain{publicstaticvoidmain(String[]args){for(inti=1;i<=5;i++){if(i==3){continue;}System.out.println(i);}}}
|- Global_scope: packagecmjava2023.controlFlow.continue_test;
|  |- Package_declaration: packagecmjava2023.controlFlow.continue_test
|  |  |- package
|  |  L  Identifier: cmjava2023.controlFlow.continue_test
|  |     |- cmjava2023
|  |     |- .
|  |     |- controlFlow
|  |     |- .
|  |     L  continue_test
|  L  ;
L  Global_scope: publicclassMain{publicstaticvoidmain(String[]args){for(inti=1;i<=5;i++){if(i==3){continue;}System.out.println(i);}}}
   L  Class_declaration: publicclassMain{publicstaticvoidmain(String[]args){for(inti=1;i<=5;i++){if(i==3){continue;}System.out.println(i);}}}
      |- Access_modifier: public
      |  L  public
      |- class
      |- Main
      |- {
      |- Class_scope: publicstaticvoidmain(String[]args){for(inti=1;i<=5;i++){if(i==3){continue;}System.out.println(i);}}
      |  L  Function_declaration: publicstaticvoidmain(String[]args){for(inti=1;i<=5;i++){if(i==3){continue;}System.out.println(i);}}
      |     |- Access_modifier: public
      |     |  L  public
      |     |- static
      |     |- Type: void
      |     |  L  void
      |     |- main
      |     |- (
      |     |- Function_declaration_args: String[]args
      |     |  L  Function_declaration_arg: String[]args
      |     |     |- Type: String[]
      |     |     |  L  Array_type: String[]
      |     |     |     |- Class_type: String
      |     |     |     |  L  String
      |     |     |     |- [
      |     |     |     L  ]
      |     |     L  args
      |     |- )
      |     |- {
      |     |- Function_scope: for(inti=1;i<=5;i++){if(i==3){continue;}System.out.println(i);}
      |     |  L  Block_scope: for(inti=1;i<=5;i++){if(i==3){continue;}System.out.println(i);}
      |     |     L  For_loop: for(inti=1;i<=5;i++){if(i==3){continue;}System.out.println(i);}
      |     |        |- for
      |     |        |- (
      |     |        |- For_init: inti=1
      |     |        |  L  Assignment: inti=1
      |     |        |     |- Variable_declaration: inti
      |     |        |     |  |- Primitive_type: int
      |     |        |     |  |  L  Numeric_type: int
      |     |        |     |  |     L  Integral_type: int
      |     |        |     |  |        L  int
      |     |        |     |  L  i
      |     |        |     |- =
      |     |        |     L  Expressions: 1
      |     |        |        L  Expression: 1
      |     |        |           L  1
      |     |        |- ;
      |     |        |- For_termination: i<=5
      |     |        |  L  Expressions: i<=5
      |     |        |     L  Expression: i<=5
      |     |        |        |- Expression: i
      |     |        |        |  L  i
      |     |        |        |- Expression_operator: <=
      |     |        |        |  L  Numerical_comparison_operator: <=
      |     |        |        |     L  <=
      |     |        |        L  Expression: 5
      |     |        |           L  5
      |     |        |- ;
      |     |        |- For_update: i++
      |     |        |  L  Expressions: i++
      |     |        |     L  Expression: i++
      |     |        |        |- Expression: i
      |     |        |        |  L  i
      |     |        |        L  Expression_suffix: ++
      |     |        |           L  ++
      |     |        |- )
      |     |        |- {
      |     |        |- Function_scope: if(i==3){continue;}System.out.println(i);
      |     |        |  |- Block_scope: if(i==3){continue;}
      |     |        |  |  L  If_statement: if(i==3){continue;}
      |     |        |  |     |- if
      |     |        |  |     |- (
      |     |        |  |     |- Expressions: i==3
      |     |        |  |     |  L  Expression: i==3
      |     |        |  |     |     |- Expression: i
      |     |        |  |     |     |  L  i
      |     |        |  |     |     |- Expression_operator: ==
      |     |        |  |     |     |  L  Numerical_comparison_operator: ==
      |     |        |  |     |     |     L  ==
      |     |        |  |     |     L  Expression: 3
      |     |        |  |     |        L  3
      |     |        |  |     |- )
      |     |        |  |     |- {
      |     |        |  |     |- Function_scope: continue;
      |     |        |  |     |  |- Continue_statement: continue
      |     |        |  |     |  |  L  continue
      |     |        |  |     |  L  ;
      |     |        |  |     L  }
      |     |        |  |- Expressions: System.out.println(i)
      |     |        |  |  L  Expression: System.out.println(i)
      |     |        |  |     L  Function_call: System.out.println(i)
      |     |        |  |        |- Identifier: System.out.println
      |     |        |  |        |  |- System
      |     |        |  |        |  |- .
      |     |        |  |        |  |- out
      |     |        |  |        |  |- .
      |     |        |  |        |  L  println
      |     |        |  |        |- (
      |     |        |  |        |- Function_args: i
      |     |        |  |        |  L  Function_arg: i
      |     |        |  |        |     L  Expressions: i
      |     |        |  |        |        L  Expression: i
      |     |        |  |        |           L  i
      |     |        |  |        L  )
      |     |        |  L  ;
      |     |        L  }
      |     L  }
      L  }